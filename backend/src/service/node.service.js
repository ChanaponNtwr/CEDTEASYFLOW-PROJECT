class NodeService {
    constructor(db, local) {
        this.db = db
        this.local = local
    }
    InputHandler(node, context /*, flowchart optional */) {
        return node + context
        // const varName = node.data.variable;
        // const varType = node.data.varType;

        // // ‡∏´‡∏≤ variable ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô context (API ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß)
        // let variable = context.variables.find(v => v.name === varName);
        // if (!variable) {
        //     throw new Error(`‚ùå Missing required variable: ${varName}`);
        // }

        // let inputValue = variable.value;

        // // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏ï‡∏≤‡∏° type
        // switch (varType) {
        //     case "int":
        //         inputValue = parseInt(inputValue, 10);
        //         if (isNaN(inputValue)) throw new Error(`Variable ${varName} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏°`);
        //         break;
        //     case "float":
        //         inputValue = parseFloat(inputValue);
        //         if (isNaN(inputValue)) throw new Error(`Variable ${varName} ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç`);
        //         break;
        //     case "bool":
        //         inputValue = String(inputValue).toLowerCase() === "true";
        //         break;
        //     case "string":
        //     default:
        //         inputValue = String(inputValue);
        // }

        // // update ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤ context
        // variable.value = inputValue;
        // // update index_map just in case
        // context.variables.forEach((v,i)=> context.index_map[v.name]=i);

        // console.log(`Input: ${varName} = ${inputValue}`);
        // return { nextCondition: "auto" }
    }

    OutputHandler(node, context /*, flowchart optional */) {
    let message = String(node.data.message).trim();

    try {
        // 1) ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏ä‡∏∑‡πà‡∏≠ variable ‡πÉ‡∏´‡πâ push ‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        const variable = context.variables.find(v => v.name === message);
        if (variable) {
        console.log(`üì§ Output: ${variable.name} = ${variable.value}`);
        context.output.push(variable.value);
        return { nextCondition: "auto" };
        }

        // 2) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô assignment expression ‡πÄ‡∏ä‡πà‡∏ô "line = line + '*'" ‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏ß‡∏≤‡πÅ‡∏•‡πâ‡∏ß set ‡∏Å‡∏•‡∏±‡∏ö context
        if (message.includes("=")) {
        // ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (support expressions containing = ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏û‡∏¥‡πÄ‡∏®‡∏©)
        const [leftRaw, ...rest] = message.split("=");
        const varName = leftRaw.trim();
        const expr = rest.join("=").trim();

        const keys = context.variables.map(v => v.name);
        const values = context.variables.map(v => v.value);

        let value;
        try {
            value = Function(...keys, `return (${expr});`)(...values);
        } catch (e) {
            console.error(`‚ùå Error evaluating output-assignment '${message}': ${e.message}`);
            value = undefined;
        }

        context.set(varName, value);
        console.log(`üì§ Output (assign -> context.set): ${varName} = ${value}`);
        // ‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ assignment ‡∏ú‡πà‡∏≤‡∏ô OU ‡∏à‡∏∞‡πÑ‡∏°‡πà push ‡πÄ‡∏õ‡πá‡∏ô output line (‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô context)
        return { nextCondition: "auto" };
        }

        // 3) ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ -> push ‡πÄ‡∏î‡∏¥‡∏°
        console.log(`üì§ Output: ${message}`);
        context.output.push(message);
        return { nextCondition: "auto" };

    } catch (e) {
        console.error(`‚ùå Error evaluating output '${message}': ${e.message}`);
        return { nextCondition: "auto" };
    }
    }
}

module.exports = {NodeService}