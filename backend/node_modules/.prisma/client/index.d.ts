
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Package
 * 
 */
export type Package = $Result.DefaultSelection<Prisma.$PackagePayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model PackageClass
 * 
 */
export type PackageClass = $Result.DefaultSelection<Prisma.$PackageClassPayload>
/**
 * Model Lab
 * 
 */
export type Lab = $Result.DefaultSelection<Prisma.$LabPayload>
/**
 * Model ClassLabs
 * 
 */
export type ClassLabs = $Result.DefaultSelection<Prisma.$ClassLabsPayload>
/**
 * Model Testcase
 * 
 */
export type Testcase = $Result.DefaultSelection<Prisma.$TestcasePayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model UserClass
 * 
 */
export type UserClass = $Result.DefaultSelection<Prisma.$UserClassPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Flowchart
 * 
 */
export type Flowchart = $Result.DefaultSelection<Prisma.$FlowchartPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.package`: Exposes CRUD operations for the **Package** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Packages
    * const packages = await prisma.package.findMany()
    * ```
    */
  get package(): Prisma.PackageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.packageClass`: Exposes CRUD operations for the **PackageClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PackageClasses
    * const packageClasses = await prisma.packageClass.findMany()
    * ```
    */
  get packageClass(): Prisma.PackageClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lab`: Exposes CRUD operations for the **Lab** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Labs
    * const labs = await prisma.lab.findMany()
    * ```
    */
  get lab(): Prisma.LabDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classLabs`: Exposes CRUD operations for the **ClassLabs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassLabs
    * const classLabs = await prisma.classLabs.findMany()
    * ```
    */
  get classLabs(): Prisma.ClassLabsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.testcase`: Exposes CRUD operations for the **Testcase** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Testcases
    * const testcases = await prisma.testcase.findMany()
    * ```
    */
  get testcase(): Prisma.TestcaseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userClass`: Exposes CRUD operations for the **UserClass** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserClasses
    * const userClasses = await prisma.userClass.findMany()
    * ```
    */
  get userClass(): Prisma.UserClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.flowchart`: Exposes CRUD operations for the **Flowchart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Flowcharts
    * const flowcharts = await prisma.flowchart.findMany()
    * ```
    */
  get flowchart(): Prisma.FlowchartDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Account: 'Account',
    Session: 'Session',
    Package: 'Package',
    Class: 'Class',
    PackageClass: 'PackageClass',
    Lab: 'Lab',
    ClassLabs: 'ClassLabs',
    Testcase: 'Testcase',
    Submission: 'Submission',
    UserClass: 'UserClass',
    Role: 'Role',
    Notification: 'Notification',
    Flowchart: 'Flowchart'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "account" | "session" | "package" | "class" | "packageClass" | "lab" | "classLabs" | "testcase" | "submission" | "userClass" | "role" | "notification" | "flowchart"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AccountCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AccountUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Package: {
        payload: Prisma.$PackagePayload<ExtArgs>
        fields: Prisma.PackageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findFirst: {
            args: Prisma.PackageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          findMany: {
            args: Prisma.PackageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          create: {
            args: Prisma.PackageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          createMany: {
            args: Prisma.PackageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          delete: {
            args: Prisma.PackageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          update: {
            args: Prisma.PackageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          deleteMany: {
            args: Prisma.PackageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>[]
          }
          upsert: {
            args: Prisma.PackageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackagePayload>
          }
          aggregate: {
            args: Prisma.PackageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackage>
          }
          groupBy: {
            args: Prisma.PackageGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageCountArgs<ExtArgs>
            result: $Utils.Optional<PackageCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      PackageClass: {
        payload: Prisma.$PackageClassPayload<ExtArgs>
        fields: Prisma.PackageClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PackageClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PackageClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          findFirst: {
            args: Prisma.PackageClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PackageClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          findMany: {
            args: Prisma.PackageClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>[]
          }
          create: {
            args: Prisma.PackageClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          createMany: {
            args: Prisma.PackageClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PackageClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>[]
          }
          delete: {
            args: Prisma.PackageClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          update: {
            args: Prisma.PackageClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          deleteMany: {
            args: Prisma.PackageClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PackageClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PackageClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>[]
          }
          upsert: {
            args: Prisma.PackageClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PackageClassPayload>
          }
          aggregate: {
            args: Prisma.PackageClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePackageClass>
          }
          groupBy: {
            args: Prisma.PackageClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<PackageClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.PackageClassCountArgs<ExtArgs>
            result: $Utils.Optional<PackageClassCountAggregateOutputType> | number
          }
        }
      }
      Lab: {
        payload: Prisma.$LabPayload<ExtArgs>
        fields: Prisma.LabFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LabFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LabFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          findFirst: {
            args: Prisma.LabFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LabFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          findMany: {
            args: Prisma.LabFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>[]
          }
          create: {
            args: Prisma.LabCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          createMany: {
            args: Prisma.LabCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LabCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>[]
          }
          delete: {
            args: Prisma.LabDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          update: {
            args: Prisma.LabUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          deleteMany: {
            args: Prisma.LabDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LabUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LabUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>[]
          }
          upsert: {
            args: Prisma.LabUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LabPayload>
          }
          aggregate: {
            args: Prisma.LabAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLab>
          }
          groupBy: {
            args: Prisma.LabGroupByArgs<ExtArgs>
            result: $Utils.Optional<LabGroupByOutputType>[]
          }
          count: {
            args: Prisma.LabCountArgs<ExtArgs>
            result: $Utils.Optional<LabCountAggregateOutputType> | number
          }
        }
      }
      ClassLabs: {
        payload: Prisma.$ClassLabsPayload<ExtArgs>
        fields: Prisma.ClassLabsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassLabsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassLabsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          findFirst: {
            args: Prisma.ClassLabsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassLabsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          findMany: {
            args: Prisma.ClassLabsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>[]
          }
          create: {
            args: Prisma.ClassLabsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          createMany: {
            args: Prisma.ClassLabsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassLabsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>[]
          }
          delete: {
            args: Prisma.ClassLabsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          update: {
            args: Prisma.ClassLabsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          deleteMany: {
            args: Prisma.ClassLabsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassLabsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassLabsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>[]
          }
          upsert: {
            args: Prisma.ClassLabsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassLabsPayload>
          }
          aggregate: {
            args: Prisma.ClassLabsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassLabs>
          }
          groupBy: {
            args: Prisma.ClassLabsGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassLabsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassLabsCountArgs<ExtArgs>
            result: $Utils.Optional<ClassLabsCountAggregateOutputType> | number
          }
        }
      }
      Testcase: {
        payload: Prisma.$TestcasePayload<ExtArgs>
        fields: Prisma.TestcaseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TestcaseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TestcaseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          findFirst: {
            args: Prisma.TestcaseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TestcaseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          findMany: {
            args: Prisma.TestcaseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>[]
          }
          create: {
            args: Prisma.TestcaseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          createMany: {
            args: Prisma.TestcaseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TestcaseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>[]
          }
          delete: {
            args: Prisma.TestcaseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          update: {
            args: Prisma.TestcaseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          deleteMany: {
            args: Prisma.TestcaseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TestcaseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TestcaseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>[]
          }
          upsert: {
            args: Prisma.TestcaseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TestcasePayload>
          }
          aggregate: {
            args: Prisma.TestcaseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTestcase>
          }
          groupBy: {
            args: Prisma.TestcaseGroupByArgs<ExtArgs>
            result: $Utils.Optional<TestcaseGroupByOutputType>[]
          }
          count: {
            args: Prisma.TestcaseCountArgs<ExtArgs>
            result: $Utils.Optional<TestcaseCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubmissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SubmissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      UserClass: {
        payload: Prisma.$UserClassPayload<ExtArgs>
        fields: Prisma.UserClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          findFirst: {
            args: Prisma.UserClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          findMany: {
            args: Prisma.UserClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>[]
          }
          create: {
            args: Prisma.UserClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          createMany: {
            args: Prisma.UserClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>[]
          }
          delete: {
            args: Prisma.UserClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          update: {
            args: Prisma.UserClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          deleteMany: {
            args: Prisma.UserClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>[]
          }
          upsert: {
            args: Prisma.UserClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserClassPayload>
          }
          aggregate: {
            args: Prisma.UserClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserClass>
          }
          groupBy: {
            args: Prisma.UserClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserClassCountArgs<ExtArgs>
            result: $Utils.Optional<UserClassCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NotificationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Flowchart: {
        payload: Prisma.$FlowchartPayload<ExtArgs>
        fields: Prisma.FlowchartFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FlowchartFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FlowchartFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          findFirst: {
            args: Prisma.FlowchartFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FlowchartFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          findMany: {
            args: Prisma.FlowchartFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>[]
          }
          create: {
            args: Prisma.FlowchartCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          createMany: {
            args: Prisma.FlowchartCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FlowchartCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>[]
          }
          delete: {
            args: Prisma.FlowchartDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          update: {
            args: Prisma.FlowchartUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          deleteMany: {
            args: Prisma.FlowchartDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FlowchartUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FlowchartUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>[]
          }
          upsert: {
            args: Prisma.FlowchartUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FlowchartPayload>
          }
          aggregate: {
            args: Prisma.FlowchartAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFlowchart>
          }
          groupBy: {
            args: Prisma.FlowchartGroupByArgs<ExtArgs>
            result: $Utils.Optional<FlowchartGroupByOutputType>[]
          }
          count: {
            args: Prisma.FlowchartCountArgs<ExtArgs>
            result: $Utils.Optional<FlowchartCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    account?: AccountOmit
    session?: SessionOmit
    package?: PackageOmit
    class?: ClassOmit
    packageClass?: PackageClassOmit
    lab?: LabOmit
    classLabs?: ClassLabsOmit
    testcase?: TestcaseOmit
    submission?: SubmissionOmit
    userClass?: UserClassOmit
    role?: RoleOmit
    notification?: NotificationOmit
    flowchart?: FlowchartOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    flowcharts: number
    labs: number
    notifications: number
    sessions: number
    submissions: number
    userClasses: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    flowcharts?: boolean | UserCountOutputTypeCountFlowchartsArgs
    labs?: boolean | UserCountOutputTypeCountLabsArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    submissions?: boolean | UserCountOutputTypeCountSubmissionsArgs
    userClasses?: boolean | UserCountOutputTypeCountUserClassesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFlowchartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowchartWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClassWhereInput
  }


  /**
   * Count Type PackageCountOutputType
   */

  export type PackageCountOutputType = {
    packageClasses: number
  }

  export type PackageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packageClasses?: boolean | PackageCountOutputTypeCountPackageClassesArgs
  }

  // Custom InputTypes
  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageCountOutputType
     */
    select?: PackageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PackageCountOutputType without action
   */
  export type PackageCountOutputTypeCountPackageClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageClassWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    classLabs: number
    packageClasses: number
    userClasses: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classLabs?: boolean | ClassCountOutputTypeCountClassLabsArgs
    packageClasses?: boolean | ClassCountOutputTypeCountPackageClassesArgs
    userClasses?: boolean | ClassCountOutputTypeCountUserClassesArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountClassLabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassLabsWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountPackageClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageClassWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountUserClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClassWhereInput
  }


  /**
   * Count Type LabCountOutputType
   */

  export type LabCountOutputType = {
    classLabs: number
    flowcharts: number
    submissions: number
    testcases: number
  }

  export type LabCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classLabs?: boolean | LabCountOutputTypeCountClassLabsArgs
    flowcharts?: boolean | LabCountOutputTypeCountFlowchartsArgs
    submissions?: boolean | LabCountOutputTypeCountSubmissionsArgs
    testcases?: boolean | LabCountOutputTypeCountTestcasesArgs
  }

  // Custom InputTypes
  /**
   * LabCountOutputType without action
   */
  export type LabCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LabCountOutputType
     */
    select?: LabCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LabCountOutputType without action
   */
  export type LabCountOutputTypeCountClassLabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassLabsWhereInput
  }

  /**
   * LabCountOutputType without action
   */
  export type LabCountOutputTypeCountFlowchartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowchartWhereInput
  }

  /**
   * LabCountOutputType without action
   */
  export type LabCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }

  /**
   * LabCountOutputType without action
   */
  export type LabCountOutputTypeCountTestcasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestcaseWhereInput
  }


  /**
   * Count Type TestcaseCountOutputType
   */

  export type TestcaseCountOutputType = {
    submissions: number
  }

  export type TestcaseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | TestcaseCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes
  /**
   * TestcaseCountOutputType without action
   */
  export type TestcaseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TestcaseCountOutputType
     */
    select?: TestcaseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TestcaseCountOutputType without action
   */
  export type TestcaseCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    userClasses: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userClasses?: boolean | RoleCountOutputTypeCountUserClassesArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUserClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClassWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    fname: string | null
    lname: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    fname: string | null
    lname: string | null
    name: string | null
    email: string | null
    createdAt: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fname: number
    lname: number
    name: number
    email: number
    createdAt: number
    image: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    name?: true
    email?: true
    createdAt?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    name?: true
    email?: true
    createdAt?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fname?: true
    lname?: true
    name?: true
    email?: true
    createdAt?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    fname: string | null
    lname: string | null
    name: string | null
    email: string
    createdAt: Date
    image: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    image?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    flowcharts?: boolean | User$flowchartsArgs<ExtArgs>
    labs?: boolean | User$labsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    userClasses?: boolean | User$userClassesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fname?: boolean
    lname?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    image?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    fname?: boolean
    lname?: boolean
    name?: boolean
    email?: boolean
    createdAt?: boolean
    image?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fname" | "lname" | "name" | "email" | "createdAt" | "image", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    flowcharts?: boolean | User$flowchartsArgs<ExtArgs>
    labs?: boolean | User$labsArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    userClasses?: boolean | User$userClassesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      flowcharts: Prisma.$FlowchartPayload<ExtArgs>[]
      labs: Prisma.$LabPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      userClasses: Prisma.$UserClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fname: string | null
      lname: string | null
      name: string | null
      email: string
      createdAt: Date
      image: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    flowcharts<T extends User$flowchartsArgs<ExtArgs> = {}>(args?: Subset<T, User$flowchartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    labs<T extends User$labsArgs<ExtArgs> = {}>(args?: Subset<T, User$labsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    submissions<T extends User$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userClasses<T extends User$userClassesArgs<ExtArgs> = {}>(args?: Subset<T, User$userClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly fname: FieldRef<"User", 'String'>
    readonly lname: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.flowcharts
   */
  export type User$flowchartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    where?: FlowchartWhereInput
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    cursor?: FlowchartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowchartScalarFieldEnum | FlowchartScalarFieldEnum[]
  }

  /**
   * User.labs
   */
  export type User$labsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    where?: LabWhereInput
    orderBy?: LabOrderByWithRelationInput | LabOrderByWithRelationInput[]
    cursor?: LabWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LabScalarFieldEnum | LabScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.submissions
   */
  export type User$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * User.userClasses
   */
  export type User$userClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    where?: UserClassWhereInput
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    cursor?: UserClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    expires_at: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
    userId: number | null
    expires_at: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    access_token: string | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    expires_at: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    access_token: string | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    expires_at: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    access_token: number
    token_type: number
    scope: number
    id_token: number
    expires_at: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
    userId?: true
    expires_at?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
    userId?: true
    expires_at?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    access_token?: true
    token_type?: true
    scope?: true
    id_token?: true
    expires_at?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    access_token?: true
    token_type?: true
    scope?: true
    id_token?: true
    expires_at?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    access_token?: true
    token_type?: true
    scope?: true
    id_token?: true
    expires_at?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    userId: number
    type: string
    provider: string
    providerAccountId: string
    access_token: string | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    expires_at: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    access_token?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    expires_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    access_token?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    expires_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    access_token?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    expires_at?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    access_token?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    expires_at?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "type" | "provider" | "providerAccountId" | "access_token" | "token_type" | "scope" | "id_token" | "expires_at", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type AccountIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      type: string
      provider: string
      providerAccountId: string
      access_token: string | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      expires_at: number | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Accounts and returns the data saved in the database.
     * @param {AccountCreateManyAndReturnArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AccountCreateManyAndReturnArgs>(args?: SelectSubset<T, AccountCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts and returns the data updated in the database.
     * @param {AccountUpdateManyAndReturnArgs} args - Arguments to update many Accounts.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Accounts and only return the `id`
     * const accountWithIdOnly = await prisma.account.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AccountUpdateManyAndReturnArgs>(args: SelectSubset<T, AccountUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly userId: FieldRef<"Account", 'Int'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account createManyAndReturn
   */
  export type AccountCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account updateManyAndReturn
   */
  export type AccountUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    sessionToken: string | null
    userId: number | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: number
    sessionToken: string
    userId: number
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "sessionToken" | "userId" | "expires", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SessionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionToken: string
      userId: number
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `id`
     * const sessionWithIdOnly = await prisma.session.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'Int'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'Int'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Package
   */

  export type AggregatePackage = {
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  export type PackageAvgAggregateOutputType = {
    packageId: number | null
    duration: number | null
    seats: number | null
    price: Decimal | null
  }

  export type PackageSumAggregateOutputType = {
    packageId: number | null
    duration: number | null
    seats: number | null
    price: Decimal | null
  }

  export type PackageMinAggregateOutputType = {
    packageId: number | null
    packageName: string | null
    duration: number | null
    seats: number | null
    price: Decimal | null
  }

  export type PackageMaxAggregateOutputType = {
    packageId: number | null
    packageName: string | null
    duration: number | null
    seats: number | null
    price: Decimal | null
  }

  export type PackageCountAggregateOutputType = {
    packageId: number
    packageName: number
    duration: number
    seats: number
    price: number
    _all: number
  }


  export type PackageAvgAggregateInputType = {
    packageId?: true
    duration?: true
    seats?: true
    price?: true
  }

  export type PackageSumAggregateInputType = {
    packageId?: true
    duration?: true
    seats?: true
    price?: true
  }

  export type PackageMinAggregateInputType = {
    packageId?: true
    packageName?: true
    duration?: true
    seats?: true
    price?: true
  }

  export type PackageMaxAggregateInputType = {
    packageId?: true
    packageName?: true
    duration?: true
    seats?: true
    price?: true
  }

  export type PackageCountAggregateInputType = {
    packageId?: true
    packageName?: true
    duration?: true
    seats?: true
    price?: true
    _all?: true
  }

  export type PackageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Package to aggregate.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Packages
    **/
    _count?: true | PackageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageMaxAggregateInputType
  }

  export type GetPackageAggregateType<T extends PackageAggregateArgs> = {
        [P in keyof T & keyof AggregatePackage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackage[P]>
      : GetScalarType<T[P], AggregatePackage[P]>
  }




  export type PackageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageWhereInput
    orderBy?: PackageOrderByWithAggregationInput | PackageOrderByWithAggregationInput[]
    by: PackageScalarFieldEnum[] | PackageScalarFieldEnum
    having?: PackageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageCountAggregateInputType | true
    _avg?: PackageAvgAggregateInputType
    _sum?: PackageSumAggregateInputType
    _min?: PackageMinAggregateInputType
    _max?: PackageMaxAggregateInputType
  }

  export type PackageGroupByOutputType = {
    packageId: number
    packageName: string
    duration: number
    seats: number
    price: Decimal
    _count: PackageCountAggregateOutputType | null
    _avg: PackageAvgAggregateOutputType | null
    _sum: PackageSumAggregateOutputType | null
    _min: PackageMinAggregateOutputType | null
    _max: PackageMaxAggregateOutputType | null
  }

  type GetPackageGroupByPayload<T extends PackageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageGroupByOutputType[P]>
            : GetScalarType<T[P], PackageGroupByOutputType[P]>
        }
      >
    >


  export type PackageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    packageName?: boolean
    duration?: boolean
    seats?: boolean
    price?: boolean
    packageClasses?: boolean | Package$packageClassesArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["package"]>

  export type PackageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    packageName?: boolean
    duration?: boolean
    seats?: boolean
    price?: boolean
  }, ExtArgs["result"]["package"]>

  export type PackageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageId?: boolean
    packageName?: boolean
    duration?: boolean
    seats?: boolean
    price?: boolean
  }, ExtArgs["result"]["package"]>

  export type PackageSelectScalar = {
    packageId?: boolean
    packageName?: boolean
    duration?: boolean
    seats?: boolean
    price?: boolean
  }

  export type PackageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"packageId" | "packageName" | "duration" | "seats" | "price", ExtArgs["result"]["package"]>
  export type PackageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    packageClasses?: boolean | Package$packageClassesArgs<ExtArgs>
    _count?: boolean | PackageCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PackageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type PackageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PackagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Package"
    objects: {
      packageClasses: Prisma.$PackageClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      packageId: number
      packageName: string
      duration: number
      seats: number
      price: Prisma.Decimal
    }, ExtArgs["result"]["package"]>
    composites: {}
  }

  type PackageGetPayload<S extends boolean | null | undefined | PackageDefaultArgs> = $Result.GetResult<Prisma.$PackagePayload, S>

  type PackageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageCountAggregateInputType | true
    }

  export interface PackageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Package'], meta: { name: 'Package' } }
    /**
     * Find zero or one Package that matches the filter.
     * @param {PackageFindUniqueArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageFindUniqueArgs>(args: SelectSubset<T, PackageFindUniqueArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Package that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageFindUniqueOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageFindFirstArgs>(args?: SelectSubset<T, PackageFindFirstArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Package that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindFirstOrThrowArgs} args - Arguments to find a Package
     * @example
     * // Get one Package
     * const package = await prisma.package.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Packages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Packages
     * const packages = await prisma.package.findMany()
     * 
     * // Get first 10 Packages
     * const packages = await prisma.package.findMany({ take: 10 })
     * 
     * // Only select the `packageId`
     * const packageWithPackageIdOnly = await prisma.package.findMany({ select: { packageId: true } })
     * 
     */
    findMany<T extends PackageFindManyArgs>(args?: SelectSubset<T, PackageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Package.
     * @param {PackageCreateArgs} args - Arguments to create a Package.
     * @example
     * // Create one Package
     * const Package = await prisma.package.create({
     *   data: {
     *     // ... data to create a Package
     *   }
     * })
     * 
     */
    create<T extends PackageCreateArgs>(args: SelectSubset<T, PackageCreateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Packages.
     * @param {PackageCreateManyArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageCreateManyArgs>(args?: SelectSubset<T, PackageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Packages and returns the data saved in the database.
     * @param {PackageCreateManyAndReturnArgs} args - Arguments to create many Packages.
     * @example
     * // Create many Packages
     * const package = await prisma.package.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Packages and only return the `packageId`
     * const packageWithPackageIdOnly = await prisma.package.createManyAndReturn({
     *   select: { packageId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Package.
     * @param {PackageDeleteArgs} args - Arguments to delete one Package.
     * @example
     * // Delete one Package
     * const Package = await prisma.package.delete({
     *   where: {
     *     // ... filter to delete one Package
     *   }
     * })
     * 
     */
    delete<T extends PackageDeleteArgs>(args: SelectSubset<T, PackageDeleteArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Package.
     * @param {PackageUpdateArgs} args - Arguments to update one Package.
     * @example
     * // Update one Package
     * const package = await prisma.package.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageUpdateArgs>(args: SelectSubset<T, PackageUpdateArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Packages.
     * @param {PackageDeleteManyArgs} args - Arguments to filter Packages to delete.
     * @example
     * // Delete a few Packages
     * const { count } = await prisma.package.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageDeleteManyArgs>(args?: SelectSubset<T, PackageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageUpdateManyArgs>(args: SelectSubset<T, PackageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Packages and returns the data updated in the database.
     * @param {PackageUpdateManyAndReturnArgs} args - Arguments to update many Packages.
     * @example
     * // Update many Packages
     * const package = await prisma.package.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Packages and only return the `packageId`
     * const packageWithPackageIdOnly = await prisma.package.updateManyAndReturn({
     *   select: { packageId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Package.
     * @param {PackageUpsertArgs} args - Arguments to update or create a Package.
     * @example
     * // Update or create a Package
     * const package = await prisma.package.upsert({
     *   create: {
     *     // ... data to create a Package
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Package we want to update
     *   }
     * })
     */
    upsert<T extends PackageUpsertArgs>(args: SelectSubset<T, PackageUpsertArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Packages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageCountArgs} args - Arguments to filter Packages to count.
     * @example
     * // Count the number of Packages
     * const count = await prisma.package.count({
     *   where: {
     *     // ... the filter for the Packages we want to count
     *   }
     * })
    **/
    count<T extends PackageCountArgs>(
      args?: Subset<T, PackageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageAggregateArgs>(args: Subset<T, PackageAggregateArgs>): Prisma.PrismaPromise<GetPackageAggregateType<T>>

    /**
     * Group by Package.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageGroupByArgs['orderBy'] }
        : { orderBy?: PackageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Package model
   */
  readonly fields: PackageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Package.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    packageClasses<T extends Package$packageClassesArgs<ExtArgs> = {}>(args?: Subset<T, Package$packageClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Package model
   */
  interface PackageFieldRefs {
    readonly packageId: FieldRef<"Package", 'Int'>
    readonly packageName: FieldRef<"Package", 'String'>
    readonly duration: FieldRef<"Package", 'Int'>
    readonly seats: FieldRef<"Package", 'Int'>
    readonly price: FieldRef<"Package", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * Package findUnique
   */
  export type PackageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findUniqueOrThrow
   */
  export type PackageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package findFirst
   */
  export type PackageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findFirstOrThrow
   */
  export type PackageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Package to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Packages.
     */
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package findMany
   */
  export type PackageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter, which Packages to fetch.
     */
    where?: PackageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Packages to fetch.
     */
    orderBy?: PackageOrderByWithRelationInput | PackageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Packages.
     */
    cursor?: PackageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Packages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Packages.
     */
    skip?: number
    distinct?: PackageScalarFieldEnum | PackageScalarFieldEnum[]
  }

  /**
   * Package create
   */
  export type PackageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to create a Package.
     */
    data: XOR<PackageCreateInput, PackageUncheckedCreateInput>
  }

  /**
   * Package createMany
   */
  export type PackageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package createManyAndReturn
   */
  export type PackageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to create many Packages.
     */
    data: PackageCreateManyInput | PackageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Package update
   */
  export type PackageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The data needed to update a Package.
     */
    data: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
    /**
     * Choose, which Package to update.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package updateMany
   */
  export type PackageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
  }

  /**
   * Package updateManyAndReturn
   */
  export type PackageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * The data used to update Packages.
     */
    data: XOR<PackageUpdateManyMutationInput, PackageUncheckedUpdateManyInput>
    /**
     * Filter which Packages to update
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to update.
     */
    limit?: number
  }

  /**
   * Package upsert
   */
  export type PackageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * The filter to search for the Package to update in case it exists.
     */
    where: PackageWhereUniqueInput
    /**
     * In case the Package found by the `where` argument doesn't exist, create a new Package with this data.
     */
    create: XOR<PackageCreateInput, PackageUncheckedCreateInput>
    /**
     * In case the Package was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageUpdateInput, PackageUncheckedUpdateInput>
  }

  /**
   * Package delete
   */
  export type PackageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
    /**
     * Filter which Package to delete.
     */
    where: PackageWhereUniqueInput
  }

  /**
   * Package deleteMany
   */
  export type PackageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Packages to delete
     */
    where?: PackageWhereInput
    /**
     * Limit how many Packages to delete.
     */
    limit?: number
  }

  /**
   * Package.packageClasses
   */
  export type Package$packageClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    where?: PackageClassWhereInput
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    cursor?: PackageClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageClassScalarFieldEnum | PackageClassScalarFieldEnum[]
  }

  /**
   * Package without action
   */
  export type PackageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Package
     */
    select?: PackageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Package
     */
    omit?: PackageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    classId: number | null
  }

  export type ClassSumAggregateOutputType = {
    classId: number | null
  }

  export type ClassMinAggregateOutputType = {
    classId: number | null
    classname: string | null
    createAt: Date | null
  }

  export type ClassMaxAggregateOutputType = {
    classId: number | null
    classname: string | null
    createAt: Date | null
  }

  export type ClassCountAggregateOutputType = {
    classId: number
    classname: number
    createAt: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    classId?: true
  }

  export type ClassSumAggregateInputType = {
    classId?: true
  }

  export type ClassMinAggregateInputType = {
    classId?: true
    classname?: true
    createAt?: true
  }

  export type ClassMaxAggregateInputType = {
    classId?: true
    classname?: true
    createAt?: true
  }

  export type ClassCountAggregateInputType = {
    classId?: true
    classname?: true
    createAt?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    classId: number
    classname: string
    createAt: Date
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    classname?: boolean
    createAt?: boolean
    classLabs?: boolean | Class$classLabsArgs<ExtArgs>
    packageClasses?: boolean | Class$packageClassesArgs<ExtArgs>
    userClasses?: boolean | Class$userClassesArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    classname?: boolean
    createAt?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    classname?: boolean
    createAt?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    classId?: boolean
    classname?: boolean
    createAt?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"classId" | "classname" | "createAt", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classLabs?: boolean | Class$classLabsArgs<ExtArgs>
    packageClasses?: boolean | Class$packageClassesArgs<ExtArgs>
    userClasses?: boolean | Class$userClassesArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      classLabs: Prisma.$ClassLabsPayload<ExtArgs>[]
      packageClasses: Prisma.$PackageClassPayload<ExtArgs>[]
      userClasses: Prisma.$UserClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      classId: number
      classname: string
      createAt: Date
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `classId`
     * const classWithClassIdOnly = await prisma.class.findMany({ select: { classId: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `classId`
     * const classWithClassIdOnly = await prisma.class.createManyAndReturn({
     *   select: { classId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `classId`
     * const classWithClassIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { classId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classLabs<T extends Class$classLabsArgs<ExtArgs> = {}>(args?: Subset<T, Class$classLabsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    packageClasses<T extends Class$packageClassesArgs<ExtArgs> = {}>(args?: Subset<T, Class$packageClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    userClasses<T extends Class$userClassesArgs<ExtArgs> = {}>(args?: Subset<T, Class$userClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly classId: FieldRef<"Class", 'Int'>
    readonly classname: FieldRef<"Class", 'String'>
    readonly createAt: FieldRef<"Class", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.classLabs
   */
  export type Class$classLabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    where?: ClassLabsWhereInput
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    cursor?: ClassLabsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassLabsScalarFieldEnum | ClassLabsScalarFieldEnum[]
  }

  /**
   * Class.packageClasses
   */
  export type Class$packageClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    where?: PackageClassWhereInput
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    cursor?: PackageClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PackageClassScalarFieldEnum | PackageClassScalarFieldEnum[]
  }

  /**
   * Class.userClasses
   */
  export type Class$userClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    where?: UserClassWhereInput
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    cursor?: UserClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model PackageClass
   */

  export type AggregatePackageClass = {
    _count: PackageClassCountAggregateOutputType | null
    _avg: PackageClassAvgAggregateOutputType | null
    _sum: PackageClassSumAggregateOutputType | null
    _min: PackageClassMinAggregateOutputType | null
    _max: PackageClassMaxAggregateOutputType | null
  }

  export type PackageClassAvgAggregateOutputType = {
    packageClassId: number | null
    classId: number | null
    packageId: number | null
  }

  export type PackageClassSumAggregateOutputType = {
    packageClassId: number | null
    classId: number | null
    packageId: number | null
  }

  export type PackageClassMinAggregateOutputType = {
    packageClassId: number | null
    classId: number | null
    packageId: number | null
    purchasedAt: Date | null
    startDate: Date | null
    endDate: Date | null
  }

  export type PackageClassMaxAggregateOutputType = {
    packageClassId: number | null
    classId: number | null
    packageId: number | null
    purchasedAt: Date | null
    startDate: Date | null
    endDate: Date | null
  }

  export type PackageClassCountAggregateOutputType = {
    packageClassId: number
    classId: number
    packageId: number
    purchasedAt: number
    startDate: number
    endDate: number
    _all: number
  }


  export type PackageClassAvgAggregateInputType = {
    packageClassId?: true
    classId?: true
    packageId?: true
  }

  export type PackageClassSumAggregateInputType = {
    packageClassId?: true
    classId?: true
    packageId?: true
  }

  export type PackageClassMinAggregateInputType = {
    packageClassId?: true
    classId?: true
    packageId?: true
    purchasedAt?: true
    startDate?: true
    endDate?: true
  }

  export type PackageClassMaxAggregateInputType = {
    packageClassId?: true
    classId?: true
    packageId?: true
    purchasedAt?: true
    startDate?: true
    endDate?: true
  }

  export type PackageClassCountAggregateInputType = {
    packageClassId?: true
    classId?: true
    packageId?: true
    purchasedAt?: true
    startDate?: true
    endDate?: true
    _all?: true
  }

  export type PackageClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageClass to aggregate.
     */
    where?: PackageClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageClasses to fetch.
     */
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PackageClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PackageClasses
    **/
    _count?: true | PackageClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PackageClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PackageClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PackageClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PackageClassMaxAggregateInputType
  }

  export type GetPackageClassAggregateType<T extends PackageClassAggregateArgs> = {
        [P in keyof T & keyof AggregatePackageClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePackageClass[P]>
      : GetScalarType<T[P], AggregatePackageClass[P]>
  }




  export type PackageClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PackageClassWhereInput
    orderBy?: PackageClassOrderByWithAggregationInput | PackageClassOrderByWithAggregationInput[]
    by: PackageClassScalarFieldEnum[] | PackageClassScalarFieldEnum
    having?: PackageClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PackageClassCountAggregateInputType | true
    _avg?: PackageClassAvgAggregateInputType
    _sum?: PackageClassSumAggregateInputType
    _min?: PackageClassMinAggregateInputType
    _max?: PackageClassMaxAggregateInputType
  }

  export type PackageClassGroupByOutputType = {
    packageClassId: number
    classId: number
    packageId: number
    purchasedAt: Date
    startDate: Date
    endDate: Date
    _count: PackageClassCountAggregateOutputType | null
    _avg: PackageClassAvgAggregateOutputType | null
    _sum: PackageClassSumAggregateOutputType | null
    _min: PackageClassMinAggregateOutputType | null
    _max: PackageClassMaxAggregateOutputType | null
  }

  type GetPackageClassGroupByPayload<T extends PackageClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PackageClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PackageClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PackageClassGroupByOutputType[P]>
            : GetScalarType<T[P], PackageClassGroupByOutputType[P]>
        }
      >
    >


  export type PackageClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageClassId?: boolean
    classId?: boolean
    packageId?: boolean
    purchasedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageClass"]>

  export type PackageClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageClassId?: boolean
    classId?: boolean
    packageId?: boolean
    purchasedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageClass"]>

  export type PackageClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    packageClassId?: boolean
    classId?: boolean
    packageId?: boolean
    purchasedAt?: boolean
    startDate?: boolean
    endDate?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["packageClass"]>

  export type PackageClassSelectScalar = {
    packageClassId?: boolean
    classId?: boolean
    packageId?: boolean
    purchasedAt?: boolean
    startDate?: boolean
    endDate?: boolean
  }

  export type PackageClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"packageClassId" | "classId" | "packageId" | "purchasedAt" | "startDate" | "endDate", ExtArgs["result"]["packageClass"]>
  export type PackageClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type PackageClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }
  export type PackageClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    package?: boolean | PackageDefaultArgs<ExtArgs>
  }

  export type $PackageClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PackageClass"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      package: Prisma.$PackagePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      packageClassId: number
      classId: number
      packageId: number
      purchasedAt: Date
      startDate: Date
      endDate: Date
    }, ExtArgs["result"]["packageClass"]>
    composites: {}
  }

  type PackageClassGetPayload<S extends boolean | null | undefined | PackageClassDefaultArgs> = $Result.GetResult<Prisma.$PackageClassPayload, S>

  type PackageClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PackageClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PackageClassCountAggregateInputType | true
    }

  export interface PackageClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PackageClass'], meta: { name: 'PackageClass' } }
    /**
     * Find zero or one PackageClass that matches the filter.
     * @param {PackageClassFindUniqueArgs} args - Arguments to find a PackageClass
     * @example
     * // Get one PackageClass
     * const packageClass = await prisma.packageClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PackageClassFindUniqueArgs>(args: SelectSubset<T, PackageClassFindUniqueArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PackageClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PackageClassFindUniqueOrThrowArgs} args - Arguments to find a PackageClass
     * @example
     * // Get one PackageClass
     * const packageClass = await prisma.packageClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PackageClassFindUniqueOrThrowArgs>(args: SelectSubset<T, PackageClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassFindFirstArgs} args - Arguments to find a PackageClass
     * @example
     * // Get one PackageClass
     * const packageClass = await prisma.packageClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PackageClassFindFirstArgs>(args?: SelectSubset<T, PackageClassFindFirstArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PackageClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassFindFirstOrThrowArgs} args - Arguments to find a PackageClass
     * @example
     * // Get one PackageClass
     * const packageClass = await prisma.packageClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PackageClassFindFirstOrThrowArgs>(args?: SelectSubset<T, PackageClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PackageClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PackageClasses
     * const packageClasses = await prisma.packageClass.findMany()
     * 
     * // Get first 10 PackageClasses
     * const packageClasses = await prisma.packageClass.findMany({ take: 10 })
     * 
     * // Only select the `packageClassId`
     * const packageClassWithPackageClassIdOnly = await prisma.packageClass.findMany({ select: { packageClassId: true } })
     * 
     */
    findMany<T extends PackageClassFindManyArgs>(args?: SelectSubset<T, PackageClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PackageClass.
     * @param {PackageClassCreateArgs} args - Arguments to create a PackageClass.
     * @example
     * // Create one PackageClass
     * const PackageClass = await prisma.packageClass.create({
     *   data: {
     *     // ... data to create a PackageClass
     *   }
     * })
     * 
     */
    create<T extends PackageClassCreateArgs>(args: SelectSubset<T, PackageClassCreateArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PackageClasses.
     * @param {PackageClassCreateManyArgs} args - Arguments to create many PackageClasses.
     * @example
     * // Create many PackageClasses
     * const packageClass = await prisma.packageClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PackageClassCreateManyArgs>(args?: SelectSubset<T, PackageClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PackageClasses and returns the data saved in the database.
     * @param {PackageClassCreateManyAndReturnArgs} args - Arguments to create many PackageClasses.
     * @example
     * // Create many PackageClasses
     * const packageClass = await prisma.packageClass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PackageClasses and only return the `packageClassId`
     * const packageClassWithPackageClassIdOnly = await prisma.packageClass.createManyAndReturn({
     *   select: { packageClassId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PackageClassCreateManyAndReturnArgs>(args?: SelectSubset<T, PackageClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PackageClass.
     * @param {PackageClassDeleteArgs} args - Arguments to delete one PackageClass.
     * @example
     * // Delete one PackageClass
     * const PackageClass = await prisma.packageClass.delete({
     *   where: {
     *     // ... filter to delete one PackageClass
     *   }
     * })
     * 
     */
    delete<T extends PackageClassDeleteArgs>(args: SelectSubset<T, PackageClassDeleteArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PackageClass.
     * @param {PackageClassUpdateArgs} args - Arguments to update one PackageClass.
     * @example
     * // Update one PackageClass
     * const packageClass = await prisma.packageClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PackageClassUpdateArgs>(args: SelectSubset<T, PackageClassUpdateArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PackageClasses.
     * @param {PackageClassDeleteManyArgs} args - Arguments to filter PackageClasses to delete.
     * @example
     * // Delete a few PackageClasses
     * const { count } = await prisma.packageClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PackageClassDeleteManyArgs>(args?: SelectSubset<T, PackageClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PackageClasses
     * const packageClass = await prisma.packageClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PackageClassUpdateManyArgs>(args: SelectSubset<T, PackageClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PackageClasses and returns the data updated in the database.
     * @param {PackageClassUpdateManyAndReturnArgs} args - Arguments to update many PackageClasses.
     * @example
     * // Update many PackageClasses
     * const packageClass = await prisma.packageClass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PackageClasses and only return the `packageClassId`
     * const packageClassWithPackageClassIdOnly = await prisma.packageClass.updateManyAndReturn({
     *   select: { packageClassId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PackageClassUpdateManyAndReturnArgs>(args: SelectSubset<T, PackageClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PackageClass.
     * @param {PackageClassUpsertArgs} args - Arguments to update or create a PackageClass.
     * @example
     * // Update or create a PackageClass
     * const packageClass = await prisma.packageClass.upsert({
     *   create: {
     *     // ... data to create a PackageClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PackageClass we want to update
     *   }
     * })
     */
    upsert<T extends PackageClassUpsertArgs>(args: SelectSubset<T, PackageClassUpsertArgs<ExtArgs>>): Prisma__PackageClassClient<$Result.GetResult<Prisma.$PackageClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PackageClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassCountArgs} args - Arguments to filter PackageClasses to count.
     * @example
     * // Count the number of PackageClasses
     * const count = await prisma.packageClass.count({
     *   where: {
     *     // ... the filter for the PackageClasses we want to count
     *   }
     * })
    **/
    count<T extends PackageClassCountArgs>(
      args?: Subset<T, PackageClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PackageClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PackageClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PackageClassAggregateArgs>(args: Subset<T, PackageClassAggregateArgs>): Prisma.PrismaPromise<GetPackageClassAggregateType<T>>

    /**
     * Group by PackageClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PackageClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PackageClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PackageClassGroupByArgs['orderBy'] }
        : { orderBy?: PackageClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PackageClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPackageClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PackageClass model
   */
  readonly fields: PackageClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PackageClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PackageClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    package<T extends PackageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PackageDefaultArgs<ExtArgs>>): Prisma__PackageClient<$Result.GetResult<Prisma.$PackagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PackageClass model
   */
  interface PackageClassFieldRefs {
    readonly packageClassId: FieldRef<"PackageClass", 'Int'>
    readonly classId: FieldRef<"PackageClass", 'Int'>
    readonly packageId: FieldRef<"PackageClass", 'Int'>
    readonly purchasedAt: FieldRef<"PackageClass", 'DateTime'>
    readonly startDate: FieldRef<"PackageClass", 'DateTime'>
    readonly endDate: FieldRef<"PackageClass", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PackageClass findUnique
   */
  export type PackageClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter, which PackageClass to fetch.
     */
    where: PackageClassWhereUniqueInput
  }

  /**
   * PackageClass findUniqueOrThrow
   */
  export type PackageClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter, which PackageClass to fetch.
     */
    where: PackageClassWhereUniqueInput
  }

  /**
   * PackageClass findFirst
   */
  export type PackageClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter, which PackageClass to fetch.
     */
    where?: PackageClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageClasses to fetch.
     */
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageClasses.
     */
    cursor?: PackageClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageClasses.
     */
    distinct?: PackageClassScalarFieldEnum | PackageClassScalarFieldEnum[]
  }

  /**
   * PackageClass findFirstOrThrow
   */
  export type PackageClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter, which PackageClass to fetch.
     */
    where?: PackageClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageClasses to fetch.
     */
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PackageClasses.
     */
    cursor?: PackageClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PackageClasses.
     */
    distinct?: PackageClassScalarFieldEnum | PackageClassScalarFieldEnum[]
  }

  /**
   * PackageClass findMany
   */
  export type PackageClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter, which PackageClasses to fetch.
     */
    where?: PackageClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PackageClasses to fetch.
     */
    orderBy?: PackageClassOrderByWithRelationInput | PackageClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PackageClasses.
     */
    cursor?: PackageClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PackageClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PackageClasses.
     */
    skip?: number
    distinct?: PackageClassScalarFieldEnum | PackageClassScalarFieldEnum[]
  }

  /**
   * PackageClass create
   */
  export type PackageClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * The data needed to create a PackageClass.
     */
    data: XOR<PackageClassCreateInput, PackageClassUncheckedCreateInput>
  }

  /**
   * PackageClass createMany
   */
  export type PackageClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PackageClasses.
     */
    data: PackageClassCreateManyInput | PackageClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PackageClass createManyAndReturn
   */
  export type PackageClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * The data used to create many PackageClasses.
     */
    data: PackageClassCreateManyInput | PackageClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageClass update
   */
  export type PackageClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * The data needed to update a PackageClass.
     */
    data: XOR<PackageClassUpdateInput, PackageClassUncheckedUpdateInput>
    /**
     * Choose, which PackageClass to update.
     */
    where: PackageClassWhereUniqueInput
  }

  /**
   * PackageClass updateMany
   */
  export type PackageClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PackageClasses.
     */
    data: XOR<PackageClassUpdateManyMutationInput, PackageClassUncheckedUpdateManyInput>
    /**
     * Filter which PackageClasses to update
     */
    where?: PackageClassWhereInput
    /**
     * Limit how many PackageClasses to update.
     */
    limit?: number
  }

  /**
   * PackageClass updateManyAndReturn
   */
  export type PackageClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * The data used to update PackageClasses.
     */
    data: XOR<PackageClassUpdateManyMutationInput, PackageClassUncheckedUpdateManyInput>
    /**
     * Filter which PackageClasses to update
     */
    where?: PackageClassWhereInput
    /**
     * Limit how many PackageClasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PackageClass upsert
   */
  export type PackageClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * The filter to search for the PackageClass to update in case it exists.
     */
    where: PackageClassWhereUniqueInput
    /**
     * In case the PackageClass found by the `where` argument doesn't exist, create a new PackageClass with this data.
     */
    create: XOR<PackageClassCreateInput, PackageClassUncheckedCreateInput>
    /**
     * In case the PackageClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PackageClassUpdateInput, PackageClassUncheckedUpdateInput>
  }

  /**
   * PackageClass delete
   */
  export type PackageClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
    /**
     * Filter which PackageClass to delete.
     */
    where: PackageClassWhereUniqueInput
  }

  /**
   * PackageClass deleteMany
   */
  export type PackageClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PackageClasses to delete
     */
    where?: PackageClassWhereInput
    /**
     * Limit how many PackageClasses to delete.
     */
    limit?: number
  }

  /**
   * PackageClass without action
   */
  export type PackageClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PackageClass
     */
    select?: PackageClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PackageClass
     */
    omit?: PackageClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PackageClassInclude<ExtArgs> | null
  }


  /**
   * Model Lab
   */

  export type AggregateLab = {
    _count: LabCountAggregateOutputType | null
    _avg: LabAvgAggregateOutputType | null
    _sum: LabSumAggregateOutputType | null
    _min: LabMinAggregateOutputType | null
    _max: LabMaxAggregateOutputType | null
  }

  export type LabAvgAggregateOutputType = {
    labId: number | null
    ownerUserId: number | null
    inSymVal: number | null
    outSymVal: number | null
    declareSymVal: number | null
    assignSymVal: number | null
    ifSymVal: number | null
    forSymVal: number | null
    whileSymVal: number | null
  }

  export type LabSumAggregateOutputType = {
    labId: number | null
    ownerUserId: number | null
    inSymVal: number | null
    outSymVal: number | null
    declareSymVal: number | null
    assignSymVal: number | null
    ifSymVal: number | null
    forSymVal: number | null
    whileSymVal: number | null
  }

  export type LabMinAggregateOutputType = {
    labId: number | null
    ownerUserId: number | null
    labname: string | null
    problemSolving: string | null
    inSymVal: number | null
    outSymVal: number | null
    declareSymVal: number | null
    assignSymVal: number | null
    ifSymVal: number | null
    forSymVal: number | null
    whileSymVal: number | null
    createAt: Date | null
    dueDate: Date | null
    status: string | null
  }

  export type LabMaxAggregateOutputType = {
    labId: number | null
    ownerUserId: number | null
    labname: string | null
    problemSolving: string | null
    inSymVal: number | null
    outSymVal: number | null
    declareSymVal: number | null
    assignSymVal: number | null
    ifSymVal: number | null
    forSymVal: number | null
    whileSymVal: number | null
    createAt: Date | null
    dueDate: Date | null
    status: string | null
  }

  export type LabCountAggregateOutputType = {
    labId: number
    ownerUserId: number
    labname: number
    problemSolving: number
    inSymVal: number
    outSymVal: number
    declareSymVal: number
    assignSymVal: number
    ifSymVal: number
    forSymVal: number
    whileSymVal: number
    createAt: number
    dueDate: number
    status: number
    _all: number
  }


  export type LabAvgAggregateInputType = {
    labId?: true
    ownerUserId?: true
    inSymVal?: true
    outSymVal?: true
    declareSymVal?: true
    assignSymVal?: true
    ifSymVal?: true
    forSymVal?: true
    whileSymVal?: true
  }

  export type LabSumAggregateInputType = {
    labId?: true
    ownerUserId?: true
    inSymVal?: true
    outSymVal?: true
    declareSymVal?: true
    assignSymVal?: true
    ifSymVal?: true
    forSymVal?: true
    whileSymVal?: true
  }

  export type LabMinAggregateInputType = {
    labId?: true
    ownerUserId?: true
    labname?: true
    problemSolving?: true
    inSymVal?: true
    outSymVal?: true
    declareSymVal?: true
    assignSymVal?: true
    ifSymVal?: true
    forSymVal?: true
    whileSymVal?: true
    createAt?: true
    dueDate?: true
    status?: true
  }

  export type LabMaxAggregateInputType = {
    labId?: true
    ownerUserId?: true
    labname?: true
    problemSolving?: true
    inSymVal?: true
    outSymVal?: true
    declareSymVal?: true
    assignSymVal?: true
    ifSymVal?: true
    forSymVal?: true
    whileSymVal?: true
    createAt?: true
    dueDate?: true
    status?: true
  }

  export type LabCountAggregateInputType = {
    labId?: true
    ownerUserId?: true
    labname?: true
    problemSolving?: true
    inSymVal?: true
    outSymVal?: true
    declareSymVal?: true
    assignSymVal?: true
    ifSymVal?: true
    forSymVal?: true
    whileSymVal?: true
    createAt?: true
    dueDate?: true
    status?: true
    _all?: true
  }

  export type LabAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lab to aggregate.
     */
    where?: LabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labs to fetch.
     */
    orderBy?: LabOrderByWithRelationInput | LabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Labs
    **/
    _count?: true | LabCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LabAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LabSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LabMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LabMaxAggregateInputType
  }

  export type GetLabAggregateType<T extends LabAggregateArgs> = {
        [P in keyof T & keyof AggregateLab]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLab[P]>
      : GetScalarType<T[P], AggregateLab[P]>
  }




  export type LabGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LabWhereInput
    orderBy?: LabOrderByWithAggregationInput | LabOrderByWithAggregationInput[]
    by: LabScalarFieldEnum[] | LabScalarFieldEnum
    having?: LabScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LabCountAggregateInputType | true
    _avg?: LabAvgAggregateInputType
    _sum?: LabSumAggregateInputType
    _min?: LabMinAggregateInputType
    _max?: LabMaxAggregateInputType
  }

  export type LabGroupByOutputType = {
    labId: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal: number
    outSymVal: number
    declareSymVal: number
    assignSymVal: number
    ifSymVal: number
    forSymVal: number
    whileSymVal: number
    createAt: Date
    dueDate: Date | null
    status: string
    _count: LabCountAggregateOutputType | null
    _avg: LabAvgAggregateOutputType | null
    _sum: LabSumAggregateOutputType | null
    _min: LabMinAggregateOutputType | null
    _max: LabMaxAggregateOutputType | null
  }

  type GetLabGroupByPayload<T extends LabGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LabGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LabGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LabGroupByOutputType[P]>
            : GetScalarType<T[P], LabGroupByOutputType[P]>
        }
      >
    >


  export type LabSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    labId?: boolean
    ownerUserId?: boolean
    labname?: boolean
    problemSolving?: boolean
    inSymVal?: boolean
    outSymVal?: boolean
    declareSymVal?: boolean
    assignSymVal?: boolean
    ifSymVal?: boolean
    forSymVal?: boolean
    whileSymVal?: boolean
    createAt?: boolean
    dueDate?: boolean
    status?: boolean
    classLabs?: boolean | Lab$classLabsArgs<ExtArgs>
    flowcharts?: boolean | Lab$flowchartsArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Lab$submissionsArgs<ExtArgs>
    testcases?: boolean | Lab$testcasesArgs<ExtArgs>
    _count?: boolean | LabCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lab"]>

  export type LabSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    labId?: boolean
    ownerUserId?: boolean
    labname?: boolean
    problemSolving?: boolean
    inSymVal?: boolean
    outSymVal?: boolean
    declareSymVal?: boolean
    assignSymVal?: boolean
    ifSymVal?: boolean
    forSymVal?: boolean
    whileSymVal?: boolean
    createAt?: boolean
    dueDate?: boolean
    status?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lab"]>

  export type LabSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    labId?: boolean
    ownerUserId?: boolean
    labname?: boolean
    problemSolving?: boolean
    inSymVal?: boolean
    outSymVal?: boolean
    declareSymVal?: boolean
    assignSymVal?: boolean
    ifSymVal?: boolean
    forSymVal?: boolean
    whileSymVal?: boolean
    createAt?: boolean
    dueDate?: boolean
    status?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lab"]>

  export type LabSelectScalar = {
    labId?: boolean
    ownerUserId?: boolean
    labname?: boolean
    problemSolving?: boolean
    inSymVal?: boolean
    outSymVal?: boolean
    declareSymVal?: boolean
    assignSymVal?: boolean
    ifSymVal?: boolean
    forSymVal?: boolean
    whileSymVal?: boolean
    createAt?: boolean
    dueDate?: boolean
    status?: boolean
  }

  export type LabOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"labId" | "ownerUserId" | "labname" | "problemSolving" | "inSymVal" | "outSymVal" | "declareSymVal" | "assignSymVal" | "ifSymVal" | "forSymVal" | "whileSymVal" | "createAt" | "dueDate" | "status", ExtArgs["result"]["lab"]>
  export type LabInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classLabs?: boolean | Lab$classLabsArgs<ExtArgs>
    flowcharts?: boolean | Lab$flowchartsArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    submissions?: boolean | Lab$submissionsArgs<ExtArgs>
    testcases?: boolean | Lab$testcasesArgs<ExtArgs>
    _count?: boolean | LabCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LabIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type LabIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LabPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lab"
    objects: {
      classLabs: Prisma.$ClassLabsPayload<ExtArgs>[]
      flowcharts: Prisma.$FlowchartPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      testcases: Prisma.$TestcasePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      labId: number
      ownerUserId: number
      labname: string
      problemSolving: string
      inSymVal: number
      outSymVal: number
      declareSymVal: number
      assignSymVal: number
      ifSymVal: number
      forSymVal: number
      whileSymVal: number
      createAt: Date
      dueDate: Date | null
      status: string
    }, ExtArgs["result"]["lab"]>
    composites: {}
  }

  type LabGetPayload<S extends boolean | null | undefined | LabDefaultArgs> = $Result.GetResult<Prisma.$LabPayload, S>

  type LabCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LabFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LabCountAggregateInputType | true
    }

  export interface LabDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lab'], meta: { name: 'Lab' } }
    /**
     * Find zero or one Lab that matches the filter.
     * @param {LabFindUniqueArgs} args - Arguments to find a Lab
     * @example
     * // Get one Lab
     * const lab = await prisma.lab.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LabFindUniqueArgs>(args: SelectSubset<T, LabFindUniqueArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lab that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LabFindUniqueOrThrowArgs} args - Arguments to find a Lab
     * @example
     * // Get one Lab
     * const lab = await prisma.lab.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LabFindUniqueOrThrowArgs>(args: SelectSubset<T, LabFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lab that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabFindFirstArgs} args - Arguments to find a Lab
     * @example
     * // Get one Lab
     * const lab = await prisma.lab.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LabFindFirstArgs>(args?: SelectSubset<T, LabFindFirstArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lab that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabFindFirstOrThrowArgs} args - Arguments to find a Lab
     * @example
     * // Get one Lab
     * const lab = await prisma.lab.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LabFindFirstOrThrowArgs>(args?: SelectSubset<T, LabFindFirstOrThrowArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Labs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Labs
     * const labs = await prisma.lab.findMany()
     * 
     * // Get first 10 Labs
     * const labs = await prisma.lab.findMany({ take: 10 })
     * 
     * // Only select the `labId`
     * const labWithLabIdOnly = await prisma.lab.findMany({ select: { labId: true } })
     * 
     */
    findMany<T extends LabFindManyArgs>(args?: SelectSubset<T, LabFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lab.
     * @param {LabCreateArgs} args - Arguments to create a Lab.
     * @example
     * // Create one Lab
     * const Lab = await prisma.lab.create({
     *   data: {
     *     // ... data to create a Lab
     *   }
     * })
     * 
     */
    create<T extends LabCreateArgs>(args: SelectSubset<T, LabCreateArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Labs.
     * @param {LabCreateManyArgs} args - Arguments to create many Labs.
     * @example
     * // Create many Labs
     * const lab = await prisma.lab.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LabCreateManyArgs>(args?: SelectSubset<T, LabCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Labs and returns the data saved in the database.
     * @param {LabCreateManyAndReturnArgs} args - Arguments to create many Labs.
     * @example
     * // Create many Labs
     * const lab = await prisma.lab.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Labs and only return the `labId`
     * const labWithLabIdOnly = await prisma.lab.createManyAndReturn({
     *   select: { labId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LabCreateManyAndReturnArgs>(args?: SelectSubset<T, LabCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lab.
     * @param {LabDeleteArgs} args - Arguments to delete one Lab.
     * @example
     * // Delete one Lab
     * const Lab = await prisma.lab.delete({
     *   where: {
     *     // ... filter to delete one Lab
     *   }
     * })
     * 
     */
    delete<T extends LabDeleteArgs>(args: SelectSubset<T, LabDeleteArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lab.
     * @param {LabUpdateArgs} args - Arguments to update one Lab.
     * @example
     * // Update one Lab
     * const lab = await prisma.lab.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LabUpdateArgs>(args: SelectSubset<T, LabUpdateArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Labs.
     * @param {LabDeleteManyArgs} args - Arguments to filter Labs to delete.
     * @example
     * // Delete a few Labs
     * const { count } = await prisma.lab.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LabDeleteManyArgs>(args?: SelectSubset<T, LabDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Labs
     * const lab = await prisma.lab.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LabUpdateManyArgs>(args: SelectSubset<T, LabUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Labs and returns the data updated in the database.
     * @param {LabUpdateManyAndReturnArgs} args - Arguments to update many Labs.
     * @example
     * // Update many Labs
     * const lab = await prisma.lab.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Labs and only return the `labId`
     * const labWithLabIdOnly = await prisma.lab.updateManyAndReturn({
     *   select: { labId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LabUpdateManyAndReturnArgs>(args: SelectSubset<T, LabUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lab.
     * @param {LabUpsertArgs} args - Arguments to update or create a Lab.
     * @example
     * // Update or create a Lab
     * const lab = await prisma.lab.upsert({
     *   create: {
     *     // ... data to create a Lab
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lab we want to update
     *   }
     * })
     */
    upsert<T extends LabUpsertArgs>(args: SelectSubset<T, LabUpsertArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Labs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabCountArgs} args - Arguments to filter Labs to count.
     * @example
     * // Count the number of Labs
     * const count = await prisma.lab.count({
     *   where: {
     *     // ... the filter for the Labs we want to count
     *   }
     * })
    **/
    count<T extends LabCountArgs>(
      args?: Subset<T, LabCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LabCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LabAggregateArgs>(args: Subset<T, LabAggregateArgs>): Prisma.PrismaPromise<GetLabAggregateType<T>>

    /**
     * Group by Lab.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LabGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LabGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LabGroupByArgs['orderBy'] }
        : { orderBy?: LabGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LabGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLabGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lab model
   */
  readonly fields: LabFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lab.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LabClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    classLabs<T extends Lab$classLabsArgs<ExtArgs> = {}>(args?: Subset<T, Lab$classLabsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    flowcharts<T extends Lab$flowchartsArgs<ExtArgs> = {}>(args?: Subset<T, Lab$flowchartsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submissions<T extends Lab$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Lab$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    testcases<T extends Lab$testcasesArgs<ExtArgs> = {}>(args?: Subset<T, Lab$testcasesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lab model
   */
  interface LabFieldRefs {
    readonly labId: FieldRef<"Lab", 'Int'>
    readonly ownerUserId: FieldRef<"Lab", 'Int'>
    readonly labname: FieldRef<"Lab", 'String'>
    readonly problemSolving: FieldRef<"Lab", 'String'>
    readonly inSymVal: FieldRef<"Lab", 'Int'>
    readonly outSymVal: FieldRef<"Lab", 'Int'>
    readonly declareSymVal: FieldRef<"Lab", 'Int'>
    readonly assignSymVal: FieldRef<"Lab", 'Int'>
    readonly ifSymVal: FieldRef<"Lab", 'Int'>
    readonly forSymVal: FieldRef<"Lab", 'Int'>
    readonly whileSymVal: FieldRef<"Lab", 'Int'>
    readonly createAt: FieldRef<"Lab", 'DateTime'>
    readonly dueDate: FieldRef<"Lab", 'DateTime'>
    readonly status: FieldRef<"Lab", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lab findUnique
   */
  export type LabFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter, which Lab to fetch.
     */
    where: LabWhereUniqueInput
  }

  /**
   * Lab findUniqueOrThrow
   */
  export type LabFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter, which Lab to fetch.
     */
    where: LabWhereUniqueInput
  }

  /**
   * Lab findFirst
   */
  export type LabFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter, which Lab to fetch.
     */
    where?: LabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labs to fetch.
     */
    orderBy?: LabOrderByWithRelationInput | LabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labs.
     */
    cursor?: LabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labs.
     */
    distinct?: LabScalarFieldEnum | LabScalarFieldEnum[]
  }

  /**
   * Lab findFirstOrThrow
   */
  export type LabFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter, which Lab to fetch.
     */
    where?: LabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labs to fetch.
     */
    orderBy?: LabOrderByWithRelationInput | LabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Labs.
     */
    cursor?: LabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Labs.
     */
    distinct?: LabScalarFieldEnum | LabScalarFieldEnum[]
  }

  /**
   * Lab findMany
   */
  export type LabFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter, which Labs to fetch.
     */
    where?: LabWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Labs to fetch.
     */
    orderBy?: LabOrderByWithRelationInput | LabOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Labs.
     */
    cursor?: LabWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Labs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Labs.
     */
    skip?: number
    distinct?: LabScalarFieldEnum | LabScalarFieldEnum[]
  }

  /**
   * Lab create
   */
  export type LabCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * The data needed to create a Lab.
     */
    data: XOR<LabCreateInput, LabUncheckedCreateInput>
  }

  /**
   * Lab createMany
   */
  export type LabCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Labs.
     */
    data: LabCreateManyInput | LabCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lab createManyAndReturn
   */
  export type LabCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * The data used to create many Labs.
     */
    data: LabCreateManyInput | LabCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lab update
   */
  export type LabUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * The data needed to update a Lab.
     */
    data: XOR<LabUpdateInput, LabUncheckedUpdateInput>
    /**
     * Choose, which Lab to update.
     */
    where: LabWhereUniqueInput
  }

  /**
   * Lab updateMany
   */
  export type LabUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Labs.
     */
    data: XOR<LabUpdateManyMutationInput, LabUncheckedUpdateManyInput>
    /**
     * Filter which Labs to update
     */
    where?: LabWhereInput
    /**
     * Limit how many Labs to update.
     */
    limit?: number
  }

  /**
   * Lab updateManyAndReturn
   */
  export type LabUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * The data used to update Labs.
     */
    data: XOR<LabUpdateManyMutationInput, LabUncheckedUpdateManyInput>
    /**
     * Filter which Labs to update
     */
    where?: LabWhereInput
    /**
     * Limit how many Labs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lab upsert
   */
  export type LabUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * The filter to search for the Lab to update in case it exists.
     */
    where: LabWhereUniqueInput
    /**
     * In case the Lab found by the `where` argument doesn't exist, create a new Lab with this data.
     */
    create: XOR<LabCreateInput, LabUncheckedCreateInput>
    /**
     * In case the Lab was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LabUpdateInput, LabUncheckedUpdateInput>
  }

  /**
   * Lab delete
   */
  export type LabDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
    /**
     * Filter which Lab to delete.
     */
    where: LabWhereUniqueInput
  }

  /**
   * Lab deleteMany
   */
  export type LabDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Labs to delete
     */
    where?: LabWhereInput
    /**
     * Limit how many Labs to delete.
     */
    limit?: number
  }

  /**
   * Lab.classLabs
   */
  export type Lab$classLabsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    where?: ClassLabsWhereInput
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    cursor?: ClassLabsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassLabsScalarFieldEnum | ClassLabsScalarFieldEnum[]
  }

  /**
   * Lab.flowcharts
   */
  export type Lab$flowchartsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    where?: FlowchartWhereInput
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    cursor?: FlowchartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FlowchartScalarFieldEnum | FlowchartScalarFieldEnum[]
  }

  /**
   * Lab.submissions
   */
  export type Lab$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Lab.testcases
   */
  export type Lab$testcasesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    where?: TestcaseWhereInput
    orderBy?: TestcaseOrderByWithRelationInput | TestcaseOrderByWithRelationInput[]
    cursor?: TestcaseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * Lab without action
   */
  export type LabDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lab
     */
    select?: LabSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lab
     */
    omit?: LabOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LabInclude<ExtArgs> | null
  }


  /**
   * Model ClassLabs
   */

  export type AggregateClassLabs = {
    _count: ClassLabsCountAggregateOutputType | null
    _avg: ClassLabsAvgAggregateOutputType | null
    _sum: ClassLabsSumAggregateOutputType | null
    _min: ClassLabsMinAggregateOutputType | null
    _max: ClassLabsMaxAggregateOutputType | null
  }

  export type ClassLabsAvgAggregateOutputType = {
    classId: number | null
    labId: number | null
  }

  export type ClassLabsSumAggregateOutputType = {
    classId: number | null
    labId: number | null
  }

  export type ClassLabsMinAggregateOutputType = {
    classId: number | null
    labId: number | null
  }

  export type ClassLabsMaxAggregateOutputType = {
    classId: number | null
    labId: number | null
  }

  export type ClassLabsCountAggregateOutputType = {
    classId: number
    labId: number
    _all: number
  }


  export type ClassLabsAvgAggregateInputType = {
    classId?: true
    labId?: true
  }

  export type ClassLabsSumAggregateInputType = {
    classId?: true
    labId?: true
  }

  export type ClassLabsMinAggregateInputType = {
    classId?: true
    labId?: true
  }

  export type ClassLabsMaxAggregateInputType = {
    classId?: true
    labId?: true
  }

  export type ClassLabsCountAggregateInputType = {
    classId?: true
    labId?: true
    _all?: true
  }

  export type ClassLabsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassLabs to aggregate.
     */
    where?: ClassLabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLabs to fetch.
     */
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassLabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassLabs
    **/
    _count?: true | ClassLabsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassLabsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassLabsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassLabsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassLabsMaxAggregateInputType
  }

  export type GetClassLabsAggregateType<T extends ClassLabsAggregateArgs> = {
        [P in keyof T & keyof AggregateClassLabs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassLabs[P]>
      : GetScalarType<T[P], AggregateClassLabs[P]>
  }




  export type ClassLabsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassLabsWhereInput
    orderBy?: ClassLabsOrderByWithAggregationInput | ClassLabsOrderByWithAggregationInput[]
    by: ClassLabsScalarFieldEnum[] | ClassLabsScalarFieldEnum
    having?: ClassLabsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassLabsCountAggregateInputType | true
    _avg?: ClassLabsAvgAggregateInputType
    _sum?: ClassLabsSumAggregateInputType
    _min?: ClassLabsMinAggregateInputType
    _max?: ClassLabsMaxAggregateInputType
  }

  export type ClassLabsGroupByOutputType = {
    classId: number
    labId: number
    _count: ClassLabsCountAggregateOutputType | null
    _avg: ClassLabsAvgAggregateOutputType | null
    _sum: ClassLabsSumAggregateOutputType | null
    _min: ClassLabsMinAggregateOutputType | null
    _max: ClassLabsMaxAggregateOutputType | null
  }

  type GetClassLabsGroupByPayload<T extends ClassLabsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassLabsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassLabsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassLabsGroupByOutputType[P]>
            : GetScalarType<T[P], ClassLabsGroupByOutputType[P]>
        }
      >
    >


  export type ClassLabsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    labId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLabs"]>

  export type ClassLabsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    labId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLabs"]>

  export type ClassLabsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    labId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classLabs"]>

  export type ClassLabsSelectScalar = {
    classId?: boolean
    labId?: boolean
  }

  export type ClassLabsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"classId" | "labId", ExtArgs["result"]["classLabs"]>
  export type ClassLabsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }
  export type ClassLabsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }
  export type ClassLabsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }

  export type $ClassLabsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassLabs"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      lab: Prisma.$LabPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      classId: number
      labId: number
    }, ExtArgs["result"]["classLabs"]>
    composites: {}
  }

  type ClassLabsGetPayload<S extends boolean | null | undefined | ClassLabsDefaultArgs> = $Result.GetResult<Prisma.$ClassLabsPayload, S>

  type ClassLabsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassLabsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassLabsCountAggregateInputType | true
    }

  export interface ClassLabsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassLabs'], meta: { name: 'ClassLabs' } }
    /**
     * Find zero or one ClassLabs that matches the filter.
     * @param {ClassLabsFindUniqueArgs} args - Arguments to find a ClassLabs
     * @example
     * // Get one ClassLabs
     * const classLabs = await prisma.classLabs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassLabsFindUniqueArgs>(args: SelectSubset<T, ClassLabsFindUniqueArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassLabs that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassLabsFindUniqueOrThrowArgs} args - Arguments to find a ClassLabs
     * @example
     * // Get one ClassLabs
     * const classLabs = await prisma.classLabs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassLabsFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassLabsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassLabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsFindFirstArgs} args - Arguments to find a ClassLabs
     * @example
     * // Get one ClassLabs
     * const classLabs = await prisma.classLabs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassLabsFindFirstArgs>(args?: SelectSubset<T, ClassLabsFindFirstArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassLabs that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsFindFirstOrThrowArgs} args - Arguments to find a ClassLabs
     * @example
     * // Get one ClassLabs
     * const classLabs = await prisma.classLabs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassLabsFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassLabsFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassLabs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassLabs
     * const classLabs = await prisma.classLabs.findMany()
     * 
     * // Get first 10 ClassLabs
     * const classLabs = await prisma.classLabs.findMany({ take: 10 })
     * 
     * // Only select the `classId`
     * const classLabsWithClassIdOnly = await prisma.classLabs.findMany({ select: { classId: true } })
     * 
     */
    findMany<T extends ClassLabsFindManyArgs>(args?: SelectSubset<T, ClassLabsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassLabs.
     * @param {ClassLabsCreateArgs} args - Arguments to create a ClassLabs.
     * @example
     * // Create one ClassLabs
     * const ClassLabs = await prisma.classLabs.create({
     *   data: {
     *     // ... data to create a ClassLabs
     *   }
     * })
     * 
     */
    create<T extends ClassLabsCreateArgs>(args: SelectSubset<T, ClassLabsCreateArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassLabs.
     * @param {ClassLabsCreateManyArgs} args - Arguments to create many ClassLabs.
     * @example
     * // Create many ClassLabs
     * const classLabs = await prisma.classLabs.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassLabsCreateManyArgs>(args?: SelectSubset<T, ClassLabsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassLabs and returns the data saved in the database.
     * @param {ClassLabsCreateManyAndReturnArgs} args - Arguments to create many ClassLabs.
     * @example
     * // Create many ClassLabs
     * const classLabs = await prisma.classLabs.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassLabs and only return the `classId`
     * const classLabsWithClassIdOnly = await prisma.classLabs.createManyAndReturn({
     *   select: { classId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassLabsCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassLabsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassLabs.
     * @param {ClassLabsDeleteArgs} args - Arguments to delete one ClassLabs.
     * @example
     * // Delete one ClassLabs
     * const ClassLabs = await prisma.classLabs.delete({
     *   where: {
     *     // ... filter to delete one ClassLabs
     *   }
     * })
     * 
     */
    delete<T extends ClassLabsDeleteArgs>(args: SelectSubset<T, ClassLabsDeleteArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassLabs.
     * @param {ClassLabsUpdateArgs} args - Arguments to update one ClassLabs.
     * @example
     * // Update one ClassLabs
     * const classLabs = await prisma.classLabs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassLabsUpdateArgs>(args: SelectSubset<T, ClassLabsUpdateArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassLabs.
     * @param {ClassLabsDeleteManyArgs} args - Arguments to filter ClassLabs to delete.
     * @example
     * // Delete a few ClassLabs
     * const { count } = await prisma.classLabs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassLabsDeleteManyArgs>(args?: SelectSubset<T, ClassLabsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassLabs
     * const classLabs = await prisma.classLabs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassLabsUpdateManyArgs>(args: SelectSubset<T, ClassLabsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassLabs and returns the data updated in the database.
     * @param {ClassLabsUpdateManyAndReturnArgs} args - Arguments to update many ClassLabs.
     * @example
     * // Update many ClassLabs
     * const classLabs = await prisma.classLabs.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassLabs and only return the `classId`
     * const classLabsWithClassIdOnly = await prisma.classLabs.updateManyAndReturn({
     *   select: { classId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassLabsUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassLabsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassLabs.
     * @param {ClassLabsUpsertArgs} args - Arguments to update or create a ClassLabs.
     * @example
     * // Update or create a ClassLabs
     * const classLabs = await prisma.classLabs.upsert({
     *   create: {
     *     // ... data to create a ClassLabs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassLabs we want to update
     *   }
     * })
     */
    upsert<T extends ClassLabsUpsertArgs>(args: SelectSubset<T, ClassLabsUpsertArgs<ExtArgs>>): Prisma__ClassLabsClient<$Result.GetResult<Prisma.$ClassLabsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsCountArgs} args - Arguments to filter ClassLabs to count.
     * @example
     * // Count the number of ClassLabs
     * const count = await prisma.classLabs.count({
     *   where: {
     *     // ... the filter for the ClassLabs we want to count
     *   }
     * })
    **/
    count<T extends ClassLabsCountArgs>(
      args?: Subset<T, ClassLabsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassLabsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassLabsAggregateArgs>(args: Subset<T, ClassLabsAggregateArgs>): Prisma.PrismaPromise<GetClassLabsAggregateType<T>>

    /**
     * Group by ClassLabs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassLabsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassLabsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassLabsGroupByArgs['orderBy'] }
        : { orderBy?: ClassLabsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassLabsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassLabsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassLabs model
   */
  readonly fields: ClassLabsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassLabs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassLabsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    lab<T extends LabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabDefaultArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassLabs model
   */
  interface ClassLabsFieldRefs {
    readonly classId: FieldRef<"ClassLabs", 'Int'>
    readonly labId: FieldRef<"ClassLabs", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClassLabs findUnique
   */
  export type ClassLabsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter, which ClassLabs to fetch.
     */
    where: ClassLabsWhereUniqueInput
  }

  /**
   * ClassLabs findUniqueOrThrow
   */
  export type ClassLabsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter, which ClassLabs to fetch.
     */
    where: ClassLabsWhereUniqueInput
  }

  /**
   * ClassLabs findFirst
   */
  export type ClassLabsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter, which ClassLabs to fetch.
     */
    where?: ClassLabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLabs to fetch.
     */
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassLabs.
     */
    cursor?: ClassLabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassLabs.
     */
    distinct?: ClassLabsScalarFieldEnum | ClassLabsScalarFieldEnum[]
  }

  /**
   * ClassLabs findFirstOrThrow
   */
  export type ClassLabsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter, which ClassLabs to fetch.
     */
    where?: ClassLabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLabs to fetch.
     */
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassLabs.
     */
    cursor?: ClassLabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLabs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassLabs.
     */
    distinct?: ClassLabsScalarFieldEnum | ClassLabsScalarFieldEnum[]
  }

  /**
   * ClassLabs findMany
   */
  export type ClassLabsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter, which ClassLabs to fetch.
     */
    where?: ClassLabsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassLabs to fetch.
     */
    orderBy?: ClassLabsOrderByWithRelationInput | ClassLabsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassLabs.
     */
    cursor?: ClassLabsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassLabs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassLabs.
     */
    skip?: number
    distinct?: ClassLabsScalarFieldEnum | ClassLabsScalarFieldEnum[]
  }

  /**
   * ClassLabs create
   */
  export type ClassLabsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassLabs.
     */
    data: XOR<ClassLabsCreateInput, ClassLabsUncheckedCreateInput>
  }

  /**
   * ClassLabs createMany
   */
  export type ClassLabsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassLabs.
     */
    data: ClassLabsCreateManyInput | ClassLabsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassLabs createManyAndReturn
   */
  export type ClassLabsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * The data used to create many ClassLabs.
     */
    data: ClassLabsCreateManyInput | ClassLabsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassLabs update
   */
  export type ClassLabsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassLabs.
     */
    data: XOR<ClassLabsUpdateInput, ClassLabsUncheckedUpdateInput>
    /**
     * Choose, which ClassLabs to update.
     */
    where: ClassLabsWhereUniqueInput
  }

  /**
   * ClassLabs updateMany
   */
  export type ClassLabsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassLabs.
     */
    data: XOR<ClassLabsUpdateManyMutationInput, ClassLabsUncheckedUpdateManyInput>
    /**
     * Filter which ClassLabs to update
     */
    where?: ClassLabsWhereInput
    /**
     * Limit how many ClassLabs to update.
     */
    limit?: number
  }

  /**
   * ClassLabs updateManyAndReturn
   */
  export type ClassLabsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * The data used to update ClassLabs.
     */
    data: XOR<ClassLabsUpdateManyMutationInput, ClassLabsUncheckedUpdateManyInput>
    /**
     * Filter which ClassLabs to update
     */
    where?: ClassLabsWhereInput
    /**
     * Limit how many ClassLabs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassLabs upsert
   */
  export type ClassLabsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassLabs to update in case it exists.
     */
    where: ClassLabsWhereUniqueInput
    /**
     * In case the ClassLabs found by the `where` argument doesn't exist, create a new ClassLabs with this data.
     */
    create: XOR<ClassLabsCreateInput, ClassLabsUncheckedCreateInput>
    /**
     * In case the ClassLabs was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassLabsUpdateInput, ClassLabsUncheckedUpdateInput>
  }

  /**
   * ClassLabs delete
   */
  export type ClassLabsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
    /**
     * Filter which ClassLabs to delete.
     */
    where: ClassLabsWhereUniqueInput
  }

  /**
   * ClassLabs deleteMany
   */
  export type ClassLabsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassLabs to delete
     */
    where?: ClassLabsWhereInput
    /**
     * Limit how many ClassLabs to delete.
     */
    limit?: number
  }

  /**
   * ClassLabs without action
   */
  export type ClassLabsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassLabs
     */
    select?: ClassLabsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassLabs
     */
    omit?: ClassLabsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassLabsInclude<ExtArgs> | null
  }


  /**
   * Model Testcase
   */

  export type AggregateTestcase = {
    _count: TestcaseCountAggregateOutputType | null
    _avg: TestcaseAvgAggregateOutputType | null
    _sum: TestcaseSumAggregateOutputType | null
    _min: TestcaseMinAggregateOutputType | null
    _max: TestcaseMaxAggregateOutputType | null
  }

  export type TestcaseAvgAggregateOutputType = {
    testcaseId: number | null
    labId: number | null
    score: number | null
  }

  export type TestcaseSumAggregateOutputType = {
    testcaseId: number | null
    labId: number | null
    score: number | null
  }

  export type TestcaseMinAggregateOutputType = {
    testcaseId: number | null
    labId: number | null
    inputVal: string | null
    outputVal: string | null
    inHiddenVal: string | null
    outHiddenVal: string | null
    score: number | null
  }

  export type TestcaseMaxAggregateOutputType = {
    testcaseId: number | null
    labId: number | null
    inputVal: string | null
    outputVal: string | null
    inHiddenVal: string | null
    outHiddenVal: string | null
    score: number | null
  }

  export type TestcaseCountAggregateOutputType = {
    testcaseId: number
    labId: number
    inputVal: number
    outputVal: number
    inHiddenVal: number
    outHiddenVal: number
    score: number
    _all: number
  }


  export type TestcaseAvgAggregateInputType = {
    testcaseId?: true
    labId?: true
    score?: true
  }

  export type TestcaseSumAggregateInputType = {
    testcaseId?: true
    labId?: true
    score?: true
  }

  export type TestcaseMinAggregateInputType = {
    testcaseId?: true
    labId?: true
    inputVal?: true
    outputVal?: true
    inHiddenVal?: true
    outHiddenVal?: true
    score?: true
  }

  export type TestcaseMaxAggregateInputType = {
    testcaseId?: true
    labId?: true
    inputVal?: true
    outputVal?: true
    inHiddenVal?: true
    outHiddenVal?: true
    score?: true
  }

  export type TestcaseCountAggregateInputType = {
    testcaseId?: true
    labId?: true
    inputVal?: true
    outputVal?: true
    inHiddenVal?: true
    outHiddenVal?: true
    score?: true
    _all?: true
  }

  export type TestcaseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Testcase to aggregate.
     */
    where?: TestcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testcases to fetch.
     */
    orderBy?: TestcaseOrderByWithRelationInput | TestcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TestcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Testcases
    **/
    _count?: true | TestcaseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TestcaseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TestcaseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TestcaseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TestcaseMaxAggregateInputType
  }

  export type GetTestcaseAggregateType<T extends TestcaseAggregateArgs> = {
        [P in keyof T & keyof AggregateTestcase]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTestcase[P]>
      : GetScalarType<T[P], AggregateTestcase[P]>
  }




  export type TestcaseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TestcaseWhereInput
    orderBy?: TestcaseOrderByWithAggregationInput | TestcaseOrderByWithAggregationInput[]
    by: TestcaseScalarFieldEnum[] | TestcaseScalarFieldEnum
    having?: TestcaseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TestcaseCountAggregateInputType | true
    _avg?: TestcaseAvgAggregateInputType
    _sum?: TestcaseSumAggregateInputType
    _min?: TestcaseMinAggregateInputType
    _max?: TestcaseMaxAggregateInputType
  }

  export type TestcaseGroupByOutputType = {
    testcaseId: number
    labId: number
    inputVal: string
    outputVal: string
    inHiddenVal: string | null
    outHiddenVal: string | null
    score: number
    _count: TestcaseCountAggregateOutputType | null
    _avg: TestcaseAvgAggregateOutputType | null
    _sum: TestcaseSumAggregateOutputType | null
    _min: TestcaseMinAggregateOutputType | null
    _max: TestcaseMaxAggregateOutputType | null
  }

  type GetTestcaseGroupByPayload<T extends TestcaseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TestcaseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TestcaseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TestcaseGroupByOutputType[P]>
            : GetScalarType<T[P], TestcaseGroupByOutputType[P]>
        }
      >
    >


  export type TestcaseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    testcaseId?: boolean
    labId?: boolean
    inputVal?: boolean
    outputVal?: boolean
    inHiddenVal?: boolean
    outHiddenVal?: boolean
    score?: boolean
    submissions?: boolean | Testcase$submissionsArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
    _count?: boolean | TestcaseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testcase"]>

  export type TestcaseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    testcaseId?: boolean
    labId?: boolean
    inputVal?: boolean
    outputVal?: boolean
    inHiddenVal?: boolean
    outHiddenVal?: boolean
    score?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testcase"]>

  export type TestcaseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    testcaseId?: boolean
    labId?: boolean
    inputVal?: boolean
    outputVal?: boolean
    inHiddenVal?: boolean
    outHiddenVal?: boolean
    score?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["testcase"]>

  export type TestcaseSelectScalar = {
    testcaseId?: boolean
    labId?: boolean
    inputVal?: boolean
    outputVal?: boolean
    inHiddenVal?: boolean
    outHiddenVal?: boolean
    score?: boolean
  }

  export type TestcaseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"testcaseId" | "labId" | "inputVal" | "outputVal" | "inHiddenVal" | "outHiddenVal" | "score", ExtArgs["result"]["testcase"]>
  export type TestcaseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    submissions?: boolean | Testcase$submissionsArgs<ExtArgs>
    lab?: boolean | LabDefaultArgs<ExtArgs>
    _count?: boolean | TestcaseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TestcaseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }
  export type TestcaseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
  }

  export type $TestcasePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Testcase"
    objects: {
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      lab: Prisma.$LabPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      testcaseId: number
      labId: number
      inputVal: string
      outputVal: string
      inHiddenVal: string | null
      outHiddenVal: string | null
      score: number
    }, ExtArgs["result"]["testcase"]>
    composites: {}
  }

  type TestcaseGetPayload<S extends boolean | null | undefined | TestcaseDefaultArgs> = $Result.GetResult<Prisma.$TestcasePayload, S>

  type TestcaseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TestcaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TestcaseCountAggregateInputType | true
    }

  export interface TestcaseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Testcase'], meta: { name: 'Testcase' } }
    /**
     * Find zero or one Testcase that matches the filter.
     * @param {TestcaseFindUniqueArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TestcaseFindUniqueArgs>(args: SelectSubset<T, TestcaseFindUniqueArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Testcase that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TestcaseFindUniqueOrThrowArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TestcaseFindUniqueOrThrowArgs>(args: SelectSubset<T, TestcaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcase that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseFindFirstArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TestcaseFindFirstArgs>(args?: SelectSubset<T, TestcaseFindFirstArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Testcase that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseFindFirstOrThrowArgs} args - Arguments to find a Testcase
     * @example
     * // Get one Testcase
     * const testcase = await prisma.testcase.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TestcaseFindFirstOrThrowArgs>(args?: SelectSubset<T, TestcaseFindFirstOrThrowArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Testcases that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Testcases
     * const testcases = await prisma.testcase.findMany()
     * 
     * // Get first 10 Testcases
     * const testcases = await prisma.testcase.findMany({ take: 10 })
     * 
     * // Only select the `testcaseId`
     * const testcaseWithTestcaseIdOnly = await prisma.testcase.findMany({ select: { testcaseId: true } })
     * 
     */
    findMany<T extends TestcaseFindManyArgs>(args?: SelectSubset<T, TestcaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Testcase.
     * @param {TestcaseCreateArgs} args - Arguments to create a Testcase.
     * @example
     * // Create one Testcase
     * const Testcase = await prisma.testcase.create({
     *   data: {
     *     // ... data to create a Testcase
     *   }
     * })
     * 
     */
    create<T extends TestcaseCreateArgs>(args: SelectSubset<T, TestcaseCreateArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Testcases.
     * @param {TestcaseCreateManyArgs} args - Arguments to create many Testcases.
     * @example
     * // Create many Testcases
     * const testcase = await prisma.testcase.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TestcaseCreateManyArgs>(args?: SelectSubset<T, TestcaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Testcases and returns the data saved in the database.
     * @param {TestcaseCreateManyAndReturnArgs} args - Arguments to create many Testcases.
     * @example
     * // Create many Testcases
     * const testcase = await prisma.testcase.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Testcases and only return the `testcaseId`
     * const testcaseWithTestcaseIdOnly = await prisma.testcase.createManyAndReturn({
     *   select: { testcaseId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TestcaseCreateManyAndReturnArgs>(args?: SelectSubset<T, TestcaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Testcase.
     * @param {TestcaseDeleteArgs} args - Arguments to delete one Testcase.
     * @example
     * // Delete one Testcase
     * const Testcase = await prisma.testcase.delete({
     *   where: {
     *     // ... filter to delete one Testcase
     *   }
     * })
     * 
     */
    delete<T extends TestcaseDeleteArgs>(args: SelectSubset<T, TestcaseDeleteArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Testcase.
     * @param {TestcaseUpdateArgs} args - Arguments to update one Testcase.
     * @example
     * // Update one Testcase
     * const testcase = await prisma.testcase.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TestcaseUpdateArgs>(args: SelectSubset<T, TestcaseUpdateArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Testcases.
     * @param {TestcaseDeleteManyArgs} args - Arguments to filter Testcases to delete.
     * @example
     * // Delete a few Testcases
     * const { count } = await prisma.testcase.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TestcaseDeleteManyArgs>(args?: SelectSubset<T, TestcaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Testcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Testcases
     * const testcase = await prisma.testcase.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TestcaseUpdateManyArgs>(args: SelectSubset<T, TestcaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Testcases and returns the data updated in the database.
     * @param {TestcaseUpdateManyAndReturnArgs} args - Arguments to update many Testcases.
     * @example
     * // Update many Testcases
     * const testcase = await prisma.testcase.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Testcases and only return the `testcaseId`
     * const testcaseWithTestcaseIdOnly = await prisma.testcase.updateManyAndReturn({
     *   select: { testcaseId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TestcaseUpdateManyAndReturnArgs>(args: SelectSubset<T, TestcaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Testcase.
     * @param {TestcaseUpsertArgs} args - Arguments to update or create a Testcase.
     * @example
     * // Update or create a Testcase
     * const testcase = await prisma.testcase.upsert({
     *   create: {
     *     // ... data to create a Testcase
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Testcase we want to update
     *   }
     * })
     */
    upsert<T extends TestcaseUpsertArgs>(args: SelectSubset<T, TestcaseUpsertArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Testcases.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseCountArgs} args - Arguments to filter Testcases to count.
     * @example
     * // Count the number of Testcases
     * const count = await prisma.testcase.count({
     *   where: {
     *     // ... the filter for the Testcases we want to count
     *   }
     * })
    **/
    count<T extends TestcaseCountArgs>(
      args?: Subset<T, TestcaseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TestcaseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Testcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TestcaseAggregateArgs>(args: Subset<T, TestcaseAggregateArgs>): Prisma.PrismaPromise<GetTestcaseAggregateType<T>>

    /**
     * Group by Testcase.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TestcaseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TestcaseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TestcaseGroupByArgs['orderBy'] }
        : { orderBy?: TestcaseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TestcaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTestcaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Testcase model
   */
  readonly fields: TestcaseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Testcase.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TestcaseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    submissions<T extends Testcase$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Testcase$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lab<T extends LabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabDefaultArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Testcase model
   */
  interface TestcaseFieldRefs {
    readonly testcaseId: FieldRef<"Testcase", 'Int'>
    readonly labId: FieldRef<"Testcase", 'Int'>
    readonly inputVal: FieldRef<"Testcase", 'String'>
    readonly outputVal: FieldRef<"Testcase", 'String'>
    readonly inHiddenVal: FieldRef<"Testcase", 'String'>
    readonly outHiddenVal: FieldRef<"Testcase", 'String'>
    readonly score: FieldRef<"Testcase", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Testcase findUnique
   */
  export type TestcaseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter, which Testcase to fetch.
     */
    where: TestcaseWhereUniqueInput
  }

  /**
   * Testcase findUniqueOrThrow
   */
  export type TestcaseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter, which Testcase to fetch.
     */
    where: TestcaseWhereUniqueInput
  }

  /**
   * Testcase findFirst
   */
  export type TestcaseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter, which Testcase to fetch.
     */
    where?: TestcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testcases to fetch.
     */
    orderBy?: TestcaseOrderByWithRelationInput | TestcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Testcases.
     */
    cursor?: TestcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Testcases.
     */
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * Testcase findFirstOrThrow
   */
  export type TestcaseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter, which Testcase to fetch.
     */
    where?: TestcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testcases to fetch.
     */
    orderBy?: TestcaseOrderByWithRelationInput | TestcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Testcases.
     */
    cursor?: TestcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testcases.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Testcases.
     */
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * Testcase findMany
   */
  export type TestcaseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter, which Testcases to fetch.
     */
    where?: TestcaseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Testcases to fetch.
     */
    orderBy?: TestcaseOrderByWithRelationInput | TestcaseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Testcases.
     */
    cursor?: TestcaseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Testcases from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Testcases.
     */
    skip?: number
    distinct?: TestcaseScalarFieldEnum | TestcaseScalarFieldEnum[]
  }

  /**
   * Testcase create
   */
  export type TestcaseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * The data needed to create a Testcase.
     */
    data: XOR<TestcaseCreateInput, TestcaseUncheckedCreateInput>
  }

  /**
   * Testcase createMany
   */
  export type TestcaseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Testcases.
     */
    data: TestcaseCreateManyInput | TestcaseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Testcase createManyAndReturn
   */
  export type TestcaseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * The data used to create many Testcases.
     */
    data: TestcaseCreateManyInput | TestcaseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Testcase update
   */
  export type TestcaseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * The data needed to update a Testcase.
     */
    data: XOR<TestcaseUpdateInput, TestcaseUncheckedUpdateInput>
    /**
     * Choose, which Testcase to update.
     */
    where: TestcaseWhereUniqueInput
  }

  /**
   * Testcase updateMany
   */
  export type TestcaseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Testcases.
     */
    data: XOR<TestcaseUpdateManyMutationInput, TestcaseUncheckedUpdateManyInput>
    /**
     * Filter which Testcases to update
     */
    where?: TestcaseWhereInput
    /**
     * Limit how many Testcases to update.
     */
    limit?: number
  }

  /**
   * Testcase updateManyAndReturn
   */
  export type TestcaseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * The data used to update Testcases.
     */
    data: XOR<TestcaseUpdateManyMutationInput, TestcaseUncheckedUpdateManyInput>
    /**
     * Filter which Testcases to update
     */
    where?: TestcaseWhereInput
    /**
     * Limit how many Testcases to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Testcase upsert
   */
  export type TestcaseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * The filter to search for the Testcase to update in case it exists.
     */
    where: TestcaseWhereUniqueInput
    /**
     * In case the Testcase found by the `where` argument doesn't exist, create a new Testcase with this data.
     */
    create: XOR<TestcaseCreateInput, TestcaseUncheckedCreateInput>
    /**
     * In case the Testcase was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TestcaseUpdateInput, TestcaseUncheckedUpdateInput>
  }

  /**
   * Testcase delete
   */
  export type TestcaseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
    /**
     * Filter which Testcase to delete.
     */
    where: TestcaseWhereUniqueInput
  }

  /**
   * Testcase deleteMany
   */
  export type TestcaseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Testcases to delete
     */
    where?: TestcaseWhereInput
    /**
     * Limit how many Testcases to delete.
     */
    limit?: number
  }

  /**
   * Testcase.submissions
   */
  export type Testcase$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Testcase without action
   */
  export type TestcaseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Testcase
     */
    select?: TestcaseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Testcase
     */
    omit?: TestcaseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TestcaseInclude<ExtArgs> | null
  }


  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    userId: number | null
    labId: number | null
    testcaseId: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    userId: number | null
    labId: number | null
    testcaseId: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    userId: number | null
    labId: number | null
    testcaseId: number | null
    status: string | null
    createAt: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    userId: number | null
    labId: number | null
    testcaseId: number | null
    status: string | null
    createAt: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    userId: number
    labId: number
    testcaseId: number
    status: number
    createAt: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    userId?: true
    labId?: true
    testcaseId?: true
  }

  export type SubmissionSumAggregateInputType = {
    userId?: true
    labId?: true
    testcaseId?: true
  }

  export type SubmissionMinAggregateInputType = {
    userId?: true
    labId?: true
    testcaseId?: true
    status?: true
    createAt?: true
  }

  export type SubmissionMaxAggregateInputType = {
    userId?: true
    labId?: true
    testcaseId?: true
    status?: true
    createAt?: true
  }

  export type SubmissionCountAggregateInputType = {
    userId?: true
    labId?: true
    testcaseId?: true
    status?: true
    createAt?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    userId: number
    labId: number
    testcaseId: number
    status: string
    createAt: Date
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    labId?: boolean
    testcaseId?: boolean
    status?: boolean
    createAt?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    labId?: boolean
    testcaseId?: boolean
    status?: boolean
    createAt?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    labId?: boolean
    testcaseId?: boolean
    status?: boolean
    createAt?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    userId?: boolean
    labId?: boolean
    testcaseId?: boolean
    status?: boolean
    createAt?: boolean
  }

  export type SubmissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "labId" | "testcaseId" | "status" | "createAt", ExtArgs["result"]["submission"]>
  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type SubmissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    testcase?: boolean | TestcaseDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      lab: Prisma.$LabPayload<ExtArgs>
      testcase: Prisma.$TestcasePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      labId: number
      testcaseId: number
      status: string
      createAt: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }

  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubmissionFindUniqueArgs>(args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Submission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubmissionFindFirstArgs>(args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const submissionWithUserIdOnly = await prisma.submission.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends SubmissionFindManyArgs>(args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
     */
    create<T extends SubmissionCreateArgs>(args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Submissions.
     * @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubmissionCreateManyArgs>(args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Submissions and returns the data saved in the database.
     * @param {SubmissionCreateManyAndReturnArgs} args - Arguments to create many Submissions.
     * @example
     * // Create many Submissions
     * const submission = await prisma.submission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Submissions and only return the `userId`
     * const submissionWithUserIdOnly = await prisma.submission.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubmissionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubmissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
     */
    delete<T extends SubmissionDeleteArgs>(args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubmissionUpdateArgs>(args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubmissionDeleteManyArgs>(args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubmissionUpdateManyArgs>(args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions and returns the data updated in the database.
     * @param {SubmissionUpdateManyAndReturnArgs} args - Arguments to update many Submissions.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Submissions and only return the `userId`
     * const submissionWithUserIdOnly = await prisma.submission.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SubmissionUpdateManyAndReturnArgs>(args: SelectSubset<T, SubmissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
     */
    upsert<T extends SubmissionUpsertArgs>(args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lab<T extends LabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabDefaultArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    testcase<T extends TestcaseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TestcaseDefaultArgs<ExtArgs>>): Prisma__TestcaseClient<$Result.GetResult<Prisma.$TestcasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Submission model
   */
  interface SubmissionFieldRefs {
    readonly userId: FieldRef<"Submission", 'Int'>
    readonly labId: FieldRef<"Submission", 'Int'>
    readonly testcaseId: FieldRef<"Submission", 'Int'>
    readonly status: FieldRef<"Submission", 'String'>
    readonly createAt: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }

  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }

  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Submission createManyAndReturn
   */
  export type SubmissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
  }

  /**
   * Submission updateManyAndReturn
   */
  export type SubmissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }

  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }

  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
    /**
     * Limit how many Submissions to delete.
     */
    limit?: number
  }

  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Submission
     */
    omit?: SubmissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubmissionInclude<ExtArgs> | null
  }


  /**
   * Model UserClass
   */

  export type AggregateUserClass = {
    _count: UserClassCountAggregateOutputType | null
    _avg: UserClassAvgAggregateOutputType | null
    _sum: UserClassSumAggregateOutputType | null
    _min: UserClassMinAggregateOutputType | null
    _max: UserClassMaxAggregateOutputType | null
  }

  export type UserClassAvgAggregateOutputType = {
    userId: number | null
    classId: number | null
    roleId: number | null
  }

  export type UserClassSumAggregateOutputType = {
    userId: number | null
    classId: number | null
    roleId: number | null
  }

  export type UserClassMinAggregateOutputType = {
    userId: number | null
    classId: number | null
    roleId: number | null
  }

  export type UserClassMaxAggregateOutputType = {
    userId: number | null
    classId: number | null
    roleId: number | null
  }

  export type UserClassCountAggregateOutputType = {
    userId: number
    classId: number
    roleId: number
    _all: number
  }


  export type UserClassAvgAggregateInputType = {
    userId?: true
    classId?: true
    roleId?: true
  }

  export type UserClassSumAggregateInputType = {
    userId?: true
    classId?: true
    roleId?: true
  }

  export type UserClassMinAggregateInputType = {
    userId?: true
    classId?: true
    roleId?: true
  }

  export type UserClassMaxAggregateInputType = {
    userId?: true
    classId?: true
    roleId?: true
  }

  export type UserClassCountAggregateInputType = {
    userId?: true
    classId?: true
    roleId?: true
    _all?: true
  }

  export type UserClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClass to aggregate.
     */
    where?: UserClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClasses to fetch.
     */
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserClasses
    **/
    _count?: true | UserClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserClassMaxAggregateInputType
  }

  export type GetUserClassAggregateType<T extends UserClassAggregateArgs> = {
        [P in keyof T & keyof AggregateUserClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserClass[P]>
      : GetScalarType<T[P], AggregateUserClass[P]>
  }




  export type UserClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserClassWhereInput
    orderBy?: UserClassOrderByWithAggregationInput | UserClassOrderByWithAggregationInput[]
    by: UserClassScalarFieldEnum[] | UserClassScalarFieldEnum
    having?: UserClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserClassCountAggregateInputType | true
    _avg?: UserClassAvgAggregateInputType
    _sum?: UserClassSumAggregateInputType
    _min?: UserClassMinAggregateInputType
    _max?: UserClassMaxAggregateInputType
  }

  export type UserClassGroupByOutputType = {
    userId: number
    classId: number
    roleId: number
    _count: UserClassCountAggregateOutputType | null
    _avg: UserClassAvgAggregateOutputType | null
    _sum: UserClassSumAggregateOutputType | null
    _min: UserClassMinAggregateOutputType | null
    _max: UserClassMaxAggregateOutputType | null
  }

  type GetUserClassGroupByPayload<T extends UserClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserClassGroupByOutputType[P]>
            : GetScalarType<T[P], UserClassGroupByOutputType[P]>
        }
      >
    >


  export type UserClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    classId?: boolean
    roleId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userClass"]>

  export type UserClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    classId?: boolean
    roleId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userClass"]>

  export type UserClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    classId?: boolean
    roleId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userClass"]>

  export type UserClassSelectScalar = {
    userId?: boolean
    classId?: boolean
    roleId?: boolean
  }

  export type UserClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "classId" | "roleId", ExtArgs["result"]["userClass"]>
  export type UserClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserClass"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      classId: number
      roleId: number
    }, ExtArgs["result"]["userClass"]>
    composites: {}
  }

  type UserClassGetPayload<S extends boolean | null | undefined | UserClassDefaultArgs> = $Result.GetResult<Prisma.$UserClassPayload, S>

  type UserClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserClassCountAggregateInputType | true
    }

  export interface UserClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserClass'], meta: { name: 'UserClass' } }
    /**
     * Find zero or one UserClass that matches the filter.
     * @param {UserClassFindUniqueArgs} args - Arguments to find a UserClass
     * @example
     * // Get one UserClass
     * const userClass = await prisma.userClass.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserClassFindUniqueArgs>(args: SelectSubset<T, UserClassFindUniqueArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserClass that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserClassFindUniqueOrThrowArgs} args - Arguments to find a UserClass
     * @example
     * // Get one UserClass
     * const userClass = await prisma.userClass.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserClassFindUniqueOrThrowArgs>(args: SelectSubset<T, UserClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserClass that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassFindFirstArgs} args - Arguments to find a UserClass
     * @example
     * // Get one UserClass
     * const userClass = await prisma.userClass.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserClassFindFirstArgs>(args?: SelectSubset<T, UserClassFindFirstArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserClass that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassFindFirstOrThrowArgs} args - Arguments to find a UserClass
     * @example
     * // Get one UserClass
     * const userClass = await prisma.userClass.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserClassFindFirstOrThrowArgs>(args?: SelectSubset<T, UserClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserClasses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserClasses
     * const userClasses = await prisma.userClass.findMany()
     * 
     * // Get first 10 UserClasses
     * const userClasses = await prisma.userClass.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userClassWithUserIdOnly = await prisma.userClass.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserClassFindManyArgs>(args?: SelectSubset<T, UserClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserClass.
     * @param {UserClassCreateArgs} args - Arguments to create a UserClass.
     * @example
     * // Create one UserClass
     * const UserClass = await prisma.userClass.create({
     *   data: {
     *     // ... data to create a UserClass
     *   }
     * })
     * 
     */
    create<T extends UserClassCreateArgs>(args: SelectSubset<T, UserClassCreateArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserClasses.
     * @param {UserClassCreateManyArgs} args - Arguments to create many UserClasses.
     * @example
     * // Create many UserClasses
     * const userClass = await prisma.userClass.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserClassCreateManyArgs>(args?: SelectSubset<T, UserClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserClasses and returns the data saved in the database.
     * @param {UserClassCreateManyAndReturnArgs} args - Arguments to create many UserClasses.
     * @example
     * // Create many UserClasses
     * const userClass = await prisma.userClass.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserClasses and only return the `userId`
     * const userClassWithUserIdOnly = await prisma.userClass.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserClassCreateManyAndReturnArgs>(args?: SelectSubset<T, UserClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserClass.
     * @param {UserClassDeleteArgs} args - Arguments to delete one UserClass.
     * @example
     * // Delete one UserClass
     * const UserClass = await prisma.userClass.delete({
     *   where: {
     *     // ... filter to delete one UserClass
     *   }
     * })
     * 
     */
    delete<T extends UserClassDeleteArgs>(args: SelectSubset<T, UserClassDeleteArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserClass.
     * @param {UserClassUpdateArgs} args - Arguments to update one UserClass.
     * @example
     * // Update one UserClass
     * const userClass = await prisma.userClass.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserClassUpdateArgs>(args: SelectSubset<T, UserClassUpdateArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserClasses.
     * @param {UserClassDeleteManyArgs} args - Arguments to filter UserClasses to delete.
     * @example
     * // Delete a few UserClasses
     * const { count } = await prisma.userClass.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserClassDeleteManyArgs>(args?: SelectSubset<T, UserClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserClasses
     * const userClass = await prisma.userClass.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserClassUpdateManyArgs>(args: SelectSubset<T, UserClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserClasses and returns the data updated in the database.
     * @param {UserClassUpdateManyAndReturnArgs} args - Arguments to update many UserClasses.
     * @example
     * // Update many UserClasses
     * const userClass = await prisma.userClass.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserClasses and only return the `userId`
     * const userClassWithUserIdOnly = await prisma.userClass.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserClassUpdateManyAndReturnArgs>(args: SelectSubset<T, UserClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserClass.
     * @param {UserClassUpsertArgs} args - Arguments to update or create a UserClass.
     * @example
     * // Update or create a UserClass
     * const userClass = await prisma.userClass.upsert({
     *   create: {
     *     // ... data to create a UserClass
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserClass we want to update
     *   }
     * })
     */
    upsert<T extends UserClassUpsertArgs>(args: SelectSubset<T, UserClassUpsertArgs<ExtArgs>>): Prisma__UserClassClient<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserClasses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassCountArgs} args - Arguments to filter UserClasses to count.
     * @example
     * // Count the number of UserClasses
     * const count = await prisma.userClass.count({
     *   where: {
     *     // ... the filter for the UserClasses we want to count
     *   }
     * })
    **/
    count<T extends UserClassCountArgs>(
      args?: Subset<T, UserClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserClassAggregateArgs>(args: Subset<T, UserClassAggregateArgs>): Prisma.PrismaPromise<GetUserClassAggregateType<T>>

    /**
     * Group by UserClass.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserClassGroupByArgs['orderBy'] }
        : { orderBy?: UserClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserClass model
   */
  readonly fields: UserClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserClass.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserClass model
   */
  interface UserClassFieldRefs {
    readonly userId: FieldRef<"UserClass", 'Int'>
    readonly classId: FieldRef<"UserClass", 'Int'>
    readonly roleId: FieldRef<"UserClass", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserClass findUnique
   */
  export type UserClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter, which UserClass to fetch.
     */
    where: UserClassWhereUniqueInput
  }

  /**
   * UserClass findUniqueOrThrow
   */
  export type UserClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter, which UserClass to fetch.
     */
    where: UserClassWhereUniqueInput
  }

  /**
   * UserClass findFirst
   */
  export type UserClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter, which UserClass to fetch.
     */
    where?: UserClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClasses to fetch.
     */
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClasses.
     */
    cursor?: UserClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClasses.
     */
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * UserClass findFirstOrThrow
   */
  export type UserClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter, which UserClass to fetch.
     */
    where?: UserClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClasses to fetch.
     */
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserClasses.
     */
    cursor?: UserClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClasses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserClasses.
     */
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * UserClass findMany
   */
  export type UserClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter, which UserClasses to fetch.
     */
    where?: UserClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserClasses to fetch.
     */
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserClasses.
     */
    cursor?: UserClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserClasses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserClasses.
     */
    skip?: number
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * UserClass create
   */
  export type UserClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * The data needed to create a UserClass.
     */
    data: XOR<UserClassCreateInput, UserClassUncheckedCreateInput>
  }

  /**
   * UserClass createMany
   */
  export type UserClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserClasses.
     */
    data: UserClassCreateManyInput | UserClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserClass createManyAndReturn
   */
  export type UserClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * The data used to create many UserClasses.
     */
    data: UserClassCreateManyInput | UserClassCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserClass update
   */
  export type UserClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * The data needed to update a UserClass.
     */
    data: XOR<UserClassUpdateInput, UserClassUncheckedUpdateInput>
    /**
     * Choose, which UserClass to update.
     */
    where: UserClassWhereUniqueInput
  }

  /**
   * UserClass updateMany
   */
  export type UserClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserClasses.
     */
    data: XOR<UserClassUpdateManyMutationInput, UserClassUncheckedUpdateManyInput>
    /**
     * Filter which UserClasses to update
     */
    where?: UserClassWhereInput
    /**
     * Limit how many UserClasses to update.
     */
    limit?: number
  }

  /**
   * UserClass updateManyAndReturn
   */
  export type UserClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * The data used to update UserClasses.
     */
    data: XOR<UserClassUpdateManyMutationInput, UserClassUncheckedUpdateManyInput>
    /**
     * Filter which UserClasses to update
     */
    where?: UserClassWhereInput
    /**
     * Limit how many UserClasses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserClass upsert
   */
  export type UserClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * The filter to search for the UserClass to update in case it exists.
     */
    where: UserClassWhereUniqueInput
    /**
     * In case the UserClass found by the `where` argument doesn't exist, create a new UserClass with this data.
     */
    create: XOR<UserClassCreateInput, UserClassUncheckedCreateInput>
    /**
     * In case the UserClass was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserClassUpdateInput, UserClassUncheckedUpdateInput>
  }

  /**
   * UserClass delete
   */
  export type UserClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    /**
     * Filter which UserClass to delete.
     */
    where: UserClassWhereUniqueInput
  }

  /**
   * UserClass deleteMany
   */
  export type UserClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserClasses to delete
     */
    where?: UserClassWhereInput
    /**
     * Limit how many UserClasses to delete.
     */
    limit?: number
  }

  /**
   * UserClass without action
   */
  export type UserClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    roleId: number | null
  }

  export type RoleSumAggregateOutputType = {
    roleId: number | null
  }

  export type RoleMinAggregateOutputType = {
    roleId: number | null
    roleName: string | null
  }

  export type RoleMaxAggregateOutputType = {
    roleId: number | null
    roleName: string | null
  }

  export type RoleCountAggregateOutputType = {
    roleId: number
    roleName: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    roleId?: true
  }

  export type RoleSumAggregateInputType = {
    roleId?: true
  }

  export type RoleMinAggregateInputType = {
    roleId?: true
    roleName?: true
  }

  export type RoleMaxAggregateInputType = {
    roleId?: true
    roleName?: true
  }

  export type RoleCountAggregateInputType = {
    roleId?: true
    roleName?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    roleId: number
    roleName: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    roleName?: boolean
    userClasses?: boolean | Role$userClassesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    roleName?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    roleName?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    roleId?: boolean
    roleName?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"roleId" | "roleName", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userClasses?: boolean | Role$userClassesArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      userClasses: Prisma.$UserClassPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: number
      roleName: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const roleWithRoleIdOnly = await prisma.role.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `roleId`
     * const roleWithRoleIdOnly = await prisma.role.createManyAndReturn({
     *   select: { roleId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `roleId`
     * const roleWithRoleIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { roleId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userClasses<T extends Role$userClassesArgs<ExtArgs> = {}>(args?: Subset<T, Role$userClassesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly roleId: FieldRef<"Role", 'Int'>
    readonly roleName: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.userClasses
   */
  export type Role$userClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserClass
     */
    select?: UserClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserClass
     */
    omit?: UserClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserClassInclude<ExtArgs> | null
    where?: UserClassWhereInput
    orderBy?: UserClassOrderByWithRelationInput | UserClassOrderByWithRelationInput[]
    cursor?: UserClassWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserClassScalarFieldEnum | UserClassScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    notiId: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    notiId: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    notiId: number | null
    userId: number | null
    message: string | null
    createAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    notiId: number | null
    userId: number | null
    message: string | null
    createAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    notiId: number
    userId: number
    message: number
    createAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    notiId?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    notiId?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    notiId?: true
    userId?: true
    message?: true
    createAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    notiId?: true
    userId?: true
    message?: true
    createAt?: true
  }

  export type NotificationCountAggregateInputType = {
    notiId?: true
    userId?: true
    message?: true
    createAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    notiId: number
    userId: number
    message: string
    createAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notiId?: boolean
    userId?: boolean
    message?: boolean
    createAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notiId?: boolean
    userId?: boolean
    message?: boolean
    createAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    notiId?: boolean
    userId?: boolean
    message?: boolean
    createAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    notiId?: boolean
    userId?: boolean
    message?: boolean
    createAt?: boolean
  }

  export type NotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"notiId" | "userId" | "message" | "createAt", ExtArgs["result"]["notification"]>
  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      notiId: number
      userId: number
      message: string
      createAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `notiId`
     * const notificationWithNotiIdOnly = await prisma.notification.findMany({ select: { notiId: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `notiId`
     * const notificationWithNotiIdOnly = await prisma.notification.createManyAndReturn({
     *   select: { notiId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications and returns the data updated in the database.
     * @param {NotificationUpdateManyAndReturnArgs} args - Arguments to update many Notifications.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notifications and only return the `notiId`
     * const notificationWithNotiIdOnly = await prisma.notification.updateManyAndReturn({
     *   select: { notiId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NotificationUpdateManyAndReturnArgs>(args: SelectSubset<T, NotificationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */
  interface NotificationFieldRefs {
    readonly notiId: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly createAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
  }

  /**
   * Notification updateManyAndReturn
   */
  export type NotificationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
    /**
     * Limit how many Notifications to delete.
     */
    limit?: number
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Notification
     */
    omit?: NotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model Flowchart
   */

  export type AggregateFlowchart = {
    _count: FlowchartCountAggregateOutputType | null
    _avg: FlowchartAvgAggregateOutputType | null
    _sum: FlowchartSumAggregateOutputType | null
    _min: FlowchartMinAggregateOutputType | null
    _max: FlowchartMaxAggregateOutputType | null
  }

  export type FlowchartAvgAggregateOutputType = {
    flowchartId: number | null
    userId: number | null
    labId: number | null
  }

  export type FlowchartSumAggregateOutputType = {
    flowchartId: number | null
    userId: number | null
    labId: number | null
  }

  export type FlowchartMinAggregateOutputType = {
    flowchartId: number | null
    userId: number | null
    labId: number | null
    createdAt: Date | null
  }

  export type FlowchartMaxAggregateOutputType = {
    flowchartId: number | null
    userId: number | null
    labId: number | null
    createdAt: Date | null
  }

  export type FlowchartCountAggregateOutputType = {
    flowchartId: number
    userId: number
    labId: number
    createdAt: number
    content: number
    _all: number
  }


  export type FlowchartAvgAggregateInputType = {
    flowchartId?: true
    userId?: true
    labId?: true
  }

  export type FlowchartSumAggregateInputType = {
    flowchartId?: true
    userId?: true
    labId?: true
  }

  export type FlowchartMinAggregateInputType = {
    flowchartId?: true
    userId?: true
    labId?: true
    createdAt?: true
  }

  export type FlowchartMaxAggregateInputType = {
    flowchartId?: true
    userId?: true
    labId?: true
    createdAt?: true
  }

  export type FlowchartCountAggregateInputType = {
    flowchartId?: true
    userId?: true
    labId?: true
    createdAt?: true
    content?: true
    _all?: true
  }

  export type FlowchartAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flowchart to aggregate.
     */
    where?: FlowchartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flowcharts to fetch.
     */
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FlowchartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flowcharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flowcharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Flowcharts
    **/
    _count?: true | FlowchartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FlowchartAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FlowchartSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FlowchartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FlowchartMaxAggregateInputType
  }

  export type GetFlowchartAggregateType<T extends FlowchartAggregateArgs> = {
        [P in keyof T & keyof AggregateFlowchart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFlowchart[P]>
      : GetScalarType<T[P], AggregateFlowchart[P]>
  }




  export type FlowchartGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FlowchartWhereInput
    orderBy?: FlowchartOrderByWithAggregationInput | FlowchartOrderByWithAggregationInput[]
    by: FlowchartScalarFieldEnum[] | FlowchartScalarFieldEnum
    having?: FlowchartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FlowchartCountAggregateInputType | true
    _avg?: FlowchartAvgAggregateInputType
    _sum?: FlowchartSumAggregateInputType
    _min?: FlowchartMinAggregateInputType
    _max?: FlowchartMaxAggregateInputType
  }

  export type FlowchartGroupByOutputType = {
    flowchartId: number
    userId: number
    labId: number
    createdAt: Date
    content: JsonValue
    _count: FlowchartCountAggregateOutputType | null
    _avg: FlowchartAvgAggregateOutputType | null
    _sum: FlowchartSumAggregateOutputType | null
    _min: FlowchartMinAggregateOutputType | null
    _max: FlowchartMaxAggregateOutputType | null
  }

  type GetFlowchartGroupByPayload<T extends FlowchartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FlowchartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FlowchartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FlowchartGroupByOutputType[P]>
            : GetScalarType<T[P], FlowchartGroupByOutputType[P]>
        }
      >
    >


  export type FlowchartSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    flowchartId?: boolean
    userId?: boolean
    labId?: boolean
    createdAt?: boolean
    content?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowchart"]>

  export type FlowchartSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    flowchartId?: boolean
    userId?: boolean
    labId?: boolean
    createdAt?: boolean
    content?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowchart"]>

  export type FlowchartSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    flowchartId?: boolean
    userId?: boolean
    labId?: boolean
    createdAt?: boolean
    content?: boolean
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["flowchart"]>

  export type FlowchartSelectScalar = {
    flowchartId?: boolean
    userId?: boolean
    labId?: boolean
    createdAt?: boolean
    content?: boolean
  }

  export type FlowchartOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"flowchartId" | "userId" | "labId" | "createdAt" | "content", ExtArgs["result"]["flowchart"]>
  export type FlowchartInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FlowchartIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FlowchartIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lab?: boolean | LabDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FlowchartPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Flowchart"
    objects: {
      lab: Prisma.$LabPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      flowchartId: number
      userId: number
      labId: number
      createdAt: Date
      content: Prisma.JsonValue
    }, ExtArgs["result"]["flowchart"]>
    composites: {}
  }

  type FlowchartGetPayload<S extends boolean | null | undefined | FlowchartDefaultArgs> = $Result.GetResult<Prisma.$FlowchartPayload, S>

  type FlowchartCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FlowchartFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FlowchartCountAggregateInputType | true
    }

  export interface FlowchartDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Flowchart'], meta: { name: 'Flowchart' } }
    /**
     * Find zero or one Flowchart that matches the filter.
     * @param {FlowchartFindUniqueArgs} args - Arguments to find a Flowchart
     * @example
     * // Get one Flowchart
     * const flowchart = await prisma.flowchart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FlowchartFindUniqueArgs>(args: SelectSubset<T, FlowchartFindUniqueArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Flowchart that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FlowchartFindUniqueOrThrowArgs} args - Arguments to find a Flowchart
     * @example
     * // Get one Flowchart
     * const flowchart = await prisma.flowchart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FlowchartFindUniqueOrThrowArgs>(args: SelectSubset<T, FlowchartFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flowchart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartFindFirstArgs} args - Arguments to find a Flowchart
     * @example
     * // Get one Flowchart
     * const flowchart = await prisma.flowchart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FlowchartFindFirstArgs>(args?: SelectSubset<T, FlowchartFindFirstArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Flowchart that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartFindFirstOrThrowArgs} args - Arguments to find a Flowchart
     * @example
     * // Get one Flowchart
     * const flowchart = await prisma.flowchart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FlowchartFindFirstOrThrowArgs>(args?: SelectSubset<T, FlowchartFindFirstOrThrowArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Flowcharts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Flowcharts
     * const flowcharts = await prisma.flowchart.findMany()
     * 
     * // Get first 10 Flowcharts
     * const flowcharts = await prisma.flowchart.findMany({ take: 10 })
     * 
     * // Only select the `flowchartId`
     * const flowchartWithFlowchartIdOnly = await prisma.flowchart.findMany({ select: { flowchartId: true } })
     * 
     */
    findMany<T extends FlowchartFindManyArgs>(args?: SelectSubset<T, FlowchartFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Flowchart.
     * @param {FlowchartCreateArgs} args - Arguments to create a Flowchart.
     * @example
     * // Create one Flowchart
     * const Flowchart = await prisma.flowchart.create({
     *   data: {
     *     // ... data to create a Flowchart
     *   }
     * })
     * 
     */
    create<T extends FlowchartCreateArgs>(args: SelectSubset<T, FlowchartCreateArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Flowcharts.
     * @param {FlowchartCreateManyArgs} args - Arguments to create many Flowcharts.
     * @example
     * // Create many Flowcharts
     * const flowchart = await prisma.flowchart.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FlowchartCreateManyArgs>(args?: SelectSubset<T, FlowchartCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Flowcharts and returns the data saved in the database.
     * @param {FlowchartCreateManyAndReturnArgs} args - Arguments to create many Flowcharts.
     * @example
     * // Create many Flowcharts
     * const flowchart = await prisma.flowchart.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Flowcharts and only return the `flowchartId`
     * const flowchartWithFlowchartIdOnly = await prisma.flowchart.createManyAndReturn({
     *   select: { flowchartId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FlowchartCreateManyAndReturnArgs>(args?: SelectSubset<T, FlowchartCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Flowchart.
     * @param {FlowchartDeleteArgs} args - Arguments to delete one Flowchart.
     * @example
     * // Delete one Flowchart
     * const Flowchart = await prisma.flowchart.delete({
     *   where: {
     *     // ... filter to delete one Flowchart
     *   }
     * })
     * 
     */
    delete<T extends FlowchartDeleteArgs>(args: SelectSubset<T, FlowchartDeleteArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Flowchart.
     * @param {FlowchartUpdateArgs} args - Arguments to update one Flowchart.
     * @example
     * // Update one Flowchart
     * const flowchart = await prisma.flowchart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FlowchartUpdateArgs>(args: SelectSubset<T, FlowchartUpdateArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Flowcharts.
     * @param {FlowchartDeleteManyArgs} args - Arguments to filter Flowcharts to delete.
     * @example
     * // Delete a few Flowcharts
     * const { count } = await prisma.flowchart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FlowchartDeleteManyArgs>(args?: SelectSubset<T, FlowchartDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flowcharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Flowcharts
     * const flowchart = await prisma.flowchart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FlowchartUpdateManyArgs>(args: SelectSubset<T, FlowchartUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Flowcharts and returns the data updated in the database.
     * @param {FlowchartUpdateManyAndReturnArgs} args - Arguments to update many Flowcharts.
     * @example
     * // Update many Flowcharts
     * const flowchart = await prisma.flowchart.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Flowcharts and only return the `flowchartId`
     * const flowchartWithFlowchartIdOnly = await prisma.flowchart.updateManyAndReturn({
     *   select: { flowchartId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FlowchartUpdateManyAndReturnArgs>(args: SelectSubset<T, FlowchartUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Flowchart.
     * @param {FlowchartUpsertArgs} args - Arguments to update or create a Flowchart.
     * @example
     * // Update or create a Flowchart
     * const flowchart = await prisma.flowchart.upsert({
     *   create: {
     *     // ... data to create a Flowchart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Flowchart we want to update
     *   }
     * })
     */
    upsert<T extends FlowchartUpsertArgs>(args: SelectSubset<T, FlowchartUpsertArgs<ExtArgs>>): Prisma__FlowchartClient<$Result.GetResult<Prisma.$FlowchartPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Flowcharts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartCountArgs} args - Arguments to filter Flowcharts to count.
     * @example
     * // Count the number of Flowcharts
     * const count = await prisma.flowchart.count({
     *   where: {
     *     // ... the filter for the Flowcharts we want to count
     *   }
     * })
    **/
    count<T extends FlowchartCountArgs>(
      args?: Subset<T, FlowchartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FlowchartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Flowchart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FlowchartAggregateArgs>(args: Subset<T, FlowchartAggregateArgs>): Prisma.PrismaPromise<GetFlowchartAggregateType<T>>

    /**
     * Group by Flowchart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FlowchartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FlowchartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FlowchartGroupByArgs['orderBy'] }
        : { orderBy?: FlowchartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FlowchartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFlowchartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Flowchart model
   */
  readonly fields: FlowchartFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Flowchart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FlowchartClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lab<T extends LabDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LabDefaultArgs<ExtArgs>>): Prisma__LabClient<$Result.GetResult<Prisma.$LabPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Flowchart model
   */
  interface FlowchartFieldRefs {
    readonly flowchartId: FieldRef<"Flowchart", 'Int'>
    readonly userId: FieldRef<"Flowchart", 'Int'>
    readonly labId: FieldRef<"Flowchart", 'Int'>
    readonly createdAt: FieldRef<"Flowchart", 'DateTime'>
    readonly content: FieldRef<"Flowchart", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Flowchart findUnique
   */
  export type FlowchartFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter, which Flowchart to fetch.
     */
    where: FlowchartWhereUniqueInput
  }

  /**
   * Flowchart findUniqueOrThrow
   */
  export type FlowchartFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter, which Flowchart to fetch.
     */
    where: FlowchartWhereUniqueInput
  }

  /**
   * Flowchart findFirst
   */
  export type FlowchartFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter, which Flowchart to fetch.
     */
    where?: FlowchartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flowcharts to fetch.
     */
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flowcharts.
     */
    cursor?: FlowchartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flowcharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flowcharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flowcharts.
     */
    distinct?: FlowchartScalarFieldEnum | FlowchartScalarFieldEnum[]
  }

  /**
   * Flowchart findFirstOrThrow
   */
  export type FlowchartFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter, which Flowchart to fetch.
     */
    where?: FlowchartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flowcharts to fetch.
     */
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Flowcharts.
     */
    cursor?: FlowchartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flowcharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flowcharts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Flowcharts.
     */
    distinct?: FlowchartScalarFieldEnum | FlowchartScalarFieldEnum[]
  }

  /**
   * Flowchart findMany
   */
  export type FlowchartFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter, which Flowcharts to fetch.
     */
    where?: FlowchartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Flowcharts to fetch.
     */
    orderBy?: FlowchartOrderByWithRelationInput | FlowchartOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Flowcharts.
     */
    cursor?: FlowchartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Flowcharts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Flowcharts.
     */
    skip?: number
    distinct?: FlowchartScalarFieldEnum | FlowchartScalarFieldEnum[]
  }

  /**
   * Flowchart create
   */
  export type FlowchartCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * The data needed to create a Flowchart.
     */
    data: XOR<FlowchartCreateInput, FlowchartUncheckedCreateInput>
  }

  /**
   * Flowchart createMany
   */
  export type FlowchartCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Flowcharts.
     */
    data: FlowchartCreateManyInput | FlowchartCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Flowchart createManyAndReturn
   */
  export type FlowchartCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * The data used to create many Flowcharts.
     */
    data: FlowchartCreateManyInput | FlowchartCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flowchart update
   */
  export type FlowchartUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * The data needed to update a Flowchart.
     */
    data: XOR<FlowchartUpdateInput, FlowchartUncheckedUpdateInput>
    /**
     * Choose, which Flowchart to update.
     */
    where: FlowchartWhereUniqueInput
  }

  /**
   * Flowchart updateMany
   */
  export type FlowchartUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Flowcharts.
     */
    data: XOR<FlowchartUpdateManyMutationInput, FlowchartUncheckedUpdateManyInput>
    /**
     * Filter which Flowcharts to update
     */
    where?: FlowchartWhereInput
    /**
     * Limit how many Flowcharts to update.
     */
    limit?: number
  }

  /**
   * Flowchart updateManyAndReturn
   */
  export type FlowchartUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * The data used to update Flowcharts.
     */
    data: XOR<FlowchartUpdateManyMutationInput, FlowchartUncheckedUpdateManyInput>
    /**
     * Filter which Flowcharts to update
     */
    where?: FlowchartWhereInput
    /**
     * Limit how many Flowcharts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Flowchart upsert
   */
  export type FlowchartUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * The filter to search for the Flowchart to update in case it exists.
     */
    where: FlowchartWhereUniqueInput
    /**
     * In case the Flowchart found by the `where` argument doesn't exist, create a new Flowchart with this data.
     */
    create: XOR<FlowchartCreateInput, FlowchartUncheckedCreateInput>
    /**
     * In case the Flowchart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FlowchartUpdateInput, FlowchartUncheckedUpdateInput>
  }

  /**
   * Flowchart delete
   */
  export type FlowchartDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
    /**
     * Filter which Flowchart to delete.
     */
    where: FlowchartWhereUniqueInput
  }

  /**
   * Flowchart deleteMany
   */
  export type FlowchartDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Flowcharts to delete
     */
    where?: FlowchartWhereInput
    /**
     * Limit how many Flowcharts to delete.
     */
    limit?: number
  }

  /**
   * Flowchart without action
   */
  export type FlowchartDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Flowchart
     */
    select?: FlowchartSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Flowchart
     */
    omit?: FlowchartOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FlowchartInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fname: 'fname',
    lname: 'lname',
    name: 'name',
    email: 'email',
    createdAt: 'createdAt',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    access_token: 'access_token',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    expires_at: 'expires_at'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const PackageScalarFieldEnum: {
    packageId: 'packageId',
    packageName: 'packageName',
    duration: 'duration',
    seats: 'seats',
    price: 'price'
  };

  export type PackageScalarFieldEnum = (typeof PackageScalarFieldEnum)[keyof typeof PackageScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    classId: 'classId',
    classname: 'classname',
    createAt: 'createAt'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const PackageClassScalarFieldEnum: {
    packageClassId: 'packageClassId',
    classId: 'classId',
    packageId: 'packageId',
    purchasedAt: 'purchasedAt',
    startDate: 'startDate',
    endDate: 'endDate'
  };

  export type PackageClassScalarFieldEnum = (typeof PackageClassScalarFieldEnum)[keyof typeof PackageClassScalarFieldEnum]


  export const LabScalarFieldEnum: {
    labId: 'labId',
    ownerUserId: 'ownerUserId',
    labname: 'labname',
    problemSolving: 'problemSolving',
    inSymVal: 'inSymVal',
    outSymVal: 'outSymVal',
    declareSymVal: 'declareSymVal',
    assignSymVal: 'assignSymVal',
    ifSymVal: 'ifSymVal',
    forSymVal: 'forSymVal',
    whileSymVal: 'whileSymVal',
    createAt: 'createAt',
    dueDate: 'dueDate',
    status: 'status'
  };

  export type LabScalarFieldEnum = (typeof LabScalarFieldEnum)[keyof typeof LabScalarFieldEnum]


  export const ClassLabsScalarFieldEnum: {
    classId: 'classId',
    labId: 'labId'
  };

  export type ClassLabsScalarFieldEnum = (typeof ClassLabsScalarFieldEnum)[keyof typeof ClassLabsScalarFieldEnum]


  export const TestcaseScalarFieldEnum: {
    testcaseId: 'testcaseId',
    labId: 'labId',
    inputVal: 'inputVal',
    outputVal: 'outputVal',
    inHiddenVal: 'inHiddenVal',
    outHiddenVal: 'outHiddenVal',
    score: 'score'
  };

  export type TestcaseScalarFieldEnum = (typeof TestcaseScalarFieldEnum)[keyof typeof TestcaseScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    userId: 'userId',
    labId: 'labId',
    testcaseId: 'testcaseId',
    status: 'status',
    createAt: 'createAt'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const UserClassScalarFieldEnum: {
    userId: 'userId',
    classId: 'classId',
    roleId: 'roleId'
  };

  export type UserClassScalarFieldEnum = (typeof UserClassScalarFieldEnum)[keyof typeof UserClassScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    roleId: 'roleId',
    roleName: 'roleName'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    notiId: 'notiId',
    userId: 'userId',
    message: 'message',
    createAt: 'createAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const FlowchartScalarFieldEnum: {
    flowchartId: 'flowchartId',
    userId: 'userId',
    labId: 'labId',
    createdAt: 'createdAt',
    content: 'content'
  };

  export type FlowchartScalarFieldEnum = (typeof FlowchartScalarFieldEnum)[keyof typeof FlowchartScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    fname?: StringNullableFilter<"User"> | string | null
    lname?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    email?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    flowcharts?: FlowchartListRelationFilter
    labs?: LabListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
    submissions?: SubmissionListRelationFilter
    userClasses?: UserClassListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fname?: SortOrderInput | SortOrder
    lname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    flowcharts?: FlowchartOrderByRelationAggregateInput
    labs?: LabOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    userClasses?: UserClassOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fname?: StringNullableFilter<"User"> | string | null
    lname?: StringNullableFilter<"User"> | string | null
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    image?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    flowcharts?: FlowchartListRelationFilter
    labs?: LabListRelationFilter
    notifications?: NotificationListRelationFilter
    sessions?: SessionListRelationFilter
    submissions?: SubmissionListRelationFilter
    userClasses?: UserClassListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fname?: SortOrderInput | SortOrder
    lname?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    image?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    fname?: StringNullableWithAggregatesFilter<"User"> | string | null
    lname?: StringNullableWithAggregatesFilter<"User"> | string | null
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    access_token?: StringNullableFilter<"Account"> | string | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    access_token?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    access_token?: StringNullableFilter<"Account"> | string | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    access_token?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    userId?: IntWithAggregatesFilter<"Account"> | number
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: IntFilter<"Session"> | number
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Session"> | number
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: IntWithAggregatesFilter<"Session"> | number
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type PackageWhereInput = {
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    packageId?: IntFilter<"Package"> | number
    packageName?: StringFilter<"Package"> | string
    duration?: IntFilter<"Package"> | number
    seats?: IntFilter<"Package"> | number
    price?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassListRelationFilter
  }

  export type PackageOrderByWithRelationInput = {
    packageId?: SortOrder
    packageName?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
    packageClasses?: PackageClassOrderByRelationAggregateInput
  }

  export type PackageWhereUniqueInput = Prisma.AtLeast<{
    packageId?: number
    AND?: PackageWhereInput | PackageWhereInput[]
    OR?: PackageWhereInput[]
    NOT?: PackageWhereInput | PackageWhereInput[]
    packageName?: StringFilter<"Package"> | string
    duration?: IntFilter<"Package"> | number
    seats?: IntFilter<"Package"> | number
    price?: DecimalFilter<"Package"> | Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassListRelationFilter
  }, "packageId">

  export type PackageOrderByWithAggregationInput = {
    packageId?: SortOrder
    packageName?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
    _count?: PackageCountOrderByAggregateInput
    _avg?: PackageAvgOrderByAggregateInput
    _max?: PackageMaxOrderByAggregateInput
    _min?: PackageMinOrderByAggregateInput
    _sum?: PackageSumOrderByAggregateInput
  }

  export type PackageScalarWhereWithAggregatesInput = {
    AND?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    OR?: PackageScalarWhereWithAggregatesInput[]
    NOT?: PackageScalarWhereWithAggregatesInput | PackageScalarWhereWithAggregatesInput[]
    packageId?: IntWithAggregatesFilter<"Package"> | number
    packageName?: StringWithAggregatesFilter<"Package"> | string
    duration?: IntWithAggregatesFilter<"Package"> | number
    seats?: IntWithAggregatesFilter<"Package"> | number
    price?: DecimalWithAggregatesFilter<"Package"> | Decimal | DecimalJsLike | number | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    classId?: IntFilter<"Class"> | number
    classname?: StringFilter<"Class"> | string
    createAt?: DateTimeFilter<"Class"> | Date | string
    classLabs?: ClassLabsListRelationFilter
    packageClasses?: PackageClassListRelationFilter
    userClasses?: UserClassListRelationFilter
  }

  export type ClassOrderByWithRelationInput = {
    classId?: SortOrder
    classname?: SortOrder
    createAt?: SortOrder
    classLabs?: ClassLabsOrderByRelationAggregateInput
    packageClasses?: PackageClassOrderByRelationAggregateInput
    userClasses?: UserClassOrderByRelationAggregateInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    classId?: number
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    classname?: StringFilter<"Class"> | string
    createAt?: DateTimeFilter<"Class"> | Date | string
    classLabs?: ClassLabsListRelationFilter
    packageClasses?: PackageClassListRelationFilter
    userClasses?: UserClassListRelationFilter
  }, "classId">

  export type ClassOrderByWithAggregationInput = {
    classId?: SortOrder
    classname?: SortOrder
    createAt?: SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    classId?: IntWithAggregatesFilter<"Class"> | number
    classname?: StringWithAggregatesFilter<"Class"> | string
    createAt?: DateTimeWithAggregatesFilter<"Class"> | Date | string
  }

  export type PackageClassWhereInput = {
    AND?: PackageClassWhereInput | PackageClassWhereInput[]
    OR?: PackageClassWhereInput[]
    NOT?: PackageClassWhereInput | PackageClassWhereInput[]
    packageClassId?: IntFilter<"PackageClass"> | number
    classId?: IntFilter<"PackageClass"> | number
    packageId?: IntFilter<"PackageClass"> | number
    purchasedAt?: DateTimeFilter<"PackageClass"> | Date | string
    startDate?: DateTimeFilter<"PackageClass"> | Date | string
    endDate?: DateTimeFilter<"PackageClass"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
  }

  export type PackageClassOrderByWithRelationInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
    purchasedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    class?: ClassOrderByWithRelationInput
    package?: PackageOrderByWithRelationInput
  }

  export type PackageClassWhereUniqueInput = Prisma.AtLeast<{
    packageClassId?: number
    AND?: PackageClassWhereInput | PackageClassWhereInput[]
    OR?: PackageClassWhereInput[]
    NOT?: PackageClassWhereInput | PackageClassWhereInput[]
    classId?: IntFilter<"PackageClass"> | number
    packageId?: IntFilter<"PackageClass"> | number
    purchasedAt?: DateTimeFilter<"PackageClass"> | Date | string
    startDate?: DateTimeFilter<"PackageClass"> | Date | string
    endDate?: DateTimeFilter<"PackageClass"> | Date | string
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    package?: XOR<PackageScalarRelationFilter, PackageWhereInput>
  }, "packageClassId">

  export type PackageClassOrderByWithAggregationInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
    purchasedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    _count?: PackageClassCountOrderByAggregateInput
    _avg?: PackageClassAvgOrderByAggregateInput
    _max?: PackageClassMaxOrderByAggregateInput
    _min?: PackageClassMinOrderByAggregateInput
    _sum?: PackageClassSumOrderByAggregateInput
  }

  export type PackageClassScalarWhereWithAggregatesInput = {
    AND?: PackageClassScalarWhereWithAggregatesInput | PackageClassScalarWhereWithAggregatesInput[]
    OR?: PackageClassScalarWhereWithAggregatesInput[]
    NOT?: PackageClassScalarWhereWithAggregatesInput | PackageClassScalarWhereWithAggregatesInput[]
    packageClassId?: IntWithAggregatesFilter<"PackageClass"> | number
    classId?: IntWithAggregatesFilter<"PackageClass"> | number
    packageId?: IntWithAggregatesFilter<"PackageClass"> | number
    purchasedAt?: DateTimeWithAggregatesFilter<"PackageClass"> | Date | string
    startDate?: DateTimeWithAggregatesFilter<"PackageClass"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"PackageClass"> | Date | string
  }

  export type LabWhereInput = {
    AND?: LabWhereInput | LabWhereInput[]
    OR?: LabWhereInput[]
    NOT?: LabWhereInput | LabWhereInput[]
    labId?: IntFilter<"Lab"> | number
    ownerUserId?: IntFilter<"Lab"> | number
    labname?: StringFilter<"Lab"> | string
    problemSolving?: StringFilter<"Lab"> | string
    inSymVal?: IntFilter<"Lab"> | number
    outSymVal?: IntFilter<"Lab"> | number
    declareSymVal?: IntFilter<"Lab"> | number
    assignSymVal?: IntFilter<"Lab"> | number
    ifSymVal?: IntFilter<"Lab"> | number
    forSymVal?: IntFilter<"Lab"> | number
    whileSymVal?: IntFilter<"Lab"> | number
    createAt?: DateTimeFilter<"Lab"> | Date | string
    dueDate?: DateTimeNullableFilter<"Lab"> | Date | string | null
    status?: StringFilter<"Lab"> | string
    classLabs?: ClassLabsListRelationFilter
    flowcharts?: FlowchartListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    submissions?: SubmissionListRelationFilter
    testcases?: TestcaseListRelationFilter
  }

  export type LabOrderByWithRelationInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    labname?: SortOrder
    problemSolving?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
    createAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrder
    classLabs?: ClassLabsOrderByRelationAggregateInput
    flowcharts?: FlowchartOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    submissions?: SubmissionOrderByRelationAggregateInput
    testcases?: TestcaseOrderByRelationAggregateInput
  }

  export type LabWhereUniqueInput = Prisma.AtLeast<{
    labId?: number
    AND?: LabWhereInput | LabWhereInput[]
    OR?: LabWhereInput[]
    NOT?: LabWhereInput | LabWhereInput[]
    ownerUserId?: IntFilter<"Lab"> | number
    labname?: StringFilter<"Lab"> | string
    problemSolving?: StringFilter<"Lab"> | string
    inSymVal?: IntFilter<"Lab"> | number
    outSymVal?: IntFilter<"Lab"> | number
    declareSymVal?: IntFilter<"Lab"> | number
    assignSymVal?: IntFilter<"Lab"> | number
    ifSymVal?: IntFilter<"Lab"> | number
    forSymVal?: IntFilter<"Lab"> | number
    whileSymVal?: IntFilter<"Lab"> | number
    createAt?: DateTimeFilter<"Lab"> | Date | string
    dueDate?: DateTimeNullableFilter<"Lab"> | Date | string | null
    status?: StringFilter<"Lab"> | string
    classLabs?: ClassLabsListRelationFilter
    flowcharts?: FlowchartListRelationFilter
    owner?: XOR<UserScalarRelationFilter, UserWhereInput>
    submissions?: SubmissionListRelationFilter
    testcases?: TestcaseListRelationFilter
  }, "labId">

  export type LabOrderByWithAggregationInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    labname?: SortOrder
    problemSolving?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
    createAt?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    status?: SortOrder
    _count?: LabCountOrderByAggregateInput
    _avg?: LabAvgOrderByAggregateInput
    _max?: LabMaxOrderByAggregateInput
    _min?: LabMinOrderByAggregateInput
    _sum?: LabSumOrderByAggregateInput
  }

  export type LabScalarWhereWithAggregatesInput = {
    AND?: LabScalarWhereWithAggregatesInput | LabScalarWhereWithAggregatesInput[]
    OR?: LabScalarWhereWithAggregatesInput[]
    NOT?: LabScalarWhereWithAggregatesInput | LabScalarWhereWithAggregatesInput[]
    labId?: IntWithAggregatesFilter<"Lab"> | number
    ownerUserId?: IntWithAggregatesFilter<"Lab"> | number
    labname?: StringWithAggregatesFilter<"Lab"> | string
    problemSolving?: StringWithAggregatesFilter<"Lab"> | string
    inSymVal?: IntWithAggregatesFilter<"Lab"> | number
    outSymVal?: IntWithAggregatesFilter<"Lab"> | number
    declareSymVal?: IntWithAggregatesFilter<"Lab"> | number
    assignSymVal?: IntWithAggregatesFilter<"Lab"> | number
    ifSymVal?: IntWithAggregatesFilter<"Lab"> | number
    forSymVal?: IntWithAggregatesFilter<"Lab"> | number
    whileSymVal?: IntWithAggregatesFilter<"Lab"> | number
    createAt?: DateTimeWithAggregatesFilter<"Lab"> | Date | string
    dueDate?: DateTimeNullableWithAggregatesFilter<"Lab"> | Date | string | null
    status?: StringWithAggregatesFilter<"Lab"> | string
  }

  export type ClassLabsWhereInput = {
    AND?: ClassLabsWhereInput | ClassLabsWhereInput[]
    OR?: ClassLabsWhereInput[]
    NOT?: ClassLabsWhereInput | ClassLabsWhereInput[]
    classId?: IntFilter<"ClassLabs"> | number
    labId?: IntFilter<"ClassLabs"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
  }

  export type ClassLabsOrderByWithRelationInput = {
    classId?: SortOrder
    labId?: SortOrder
    class?: ClassOrderByWithRelationInput
    lab?: LabOrderByWithRelationInput
  }

  export type ClassLabsWhereUniqueInput = Prisma.AtLeast<{
    classId_labId?: ClassLabsClassIdLabIdCompoundUniqueInput
    AND?: ClassLabsWhereInput | ClassLabsWhereInput[]
    OR?: ClassLabsWhereInput[]
    NOT?: ClassLabsWhereInput | ClassLabsWhereInput[]
    classId?: IntFilter<"ClassLabs"> | number
    labId?: IntFilter<"ClassLabs"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
  }, "classId_labId">

  export type ClassLabsOrderByWithAggregationInput = {
    classId?: SortOrder
    labId?: SortOrder
    _count?: ClassLabsCountOrderByAggregateInput
    _avg?: ClassLabsAvgOrderByAggregateInput
    _max?: ClassLabsMaxOrderByAggregateInput
    _min?: ClassLabsMinOrderByAggregateInput
    _sum?: ClassLabsSumOrderByAggregateInput
  }

  export type ClassLabsScalarWhereWithAggregatesInput = {
    AND?: ClassLabsScalarWhereWithAggregatesInput | ClassLabsScalarWhereWithAggregatesInput[]
    OR?: ClassLabsScalarWhereWithAggregatesInput[]
    NOT?: ClassLabsScalarWhereWithAggregatesInput | ClassLabsScalarWhereWithAggregatesInput[]
    classId?: IntWithAggregatesFilter<"ClassLabs"> | number
    labId?: IntWithAggregatesFilter<"ClassLabs"> | number
  }

  export type TestcaseWhereInput = {
    AND?: TestcaseWhereInput | TestcaseWhereInput[]
    OR?: TestcaseWhereInput[]
    NOT?: TestcaseWhereInput | TestcaseWhereInput[]
    testcaseId?: IntFilter<"Testcase"> | number
    labId?: IntFilter<"Testcase"> | number
    inputVal?: StringFilter<"Testcase"> | string
    outputVal?: StringFilter<"Testcase"> | string
    inHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    outHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    score?: IntFilter<"Testcase"> | number
    submissions?: SubmissionListRelationFilter
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
  }

  export type TestcaseOrderByWithRelationInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    inputVal?: SortOrder
    outputVal?: SortOrder
    inHiddenVal?: SortOrderInput | SortOrder
    outHiddenVal?: SortOrderInput | SortOrder
    score?: SortOrder
    submissions?: SubmissionOrderByRelationAggregateInput
    lab?: LabOrderByWithRelationInput
  }

  export type TestcaseWhereUniqueInput = Prisma.AtLeast<{
    testcaseId?: number
    AND?: TestcaseWhereInput | TestcaseWhereInput[]
    OR?: TestcaseWhereInput[]
    NOT?: TestcaseWhereInput | TestcaseWhereInput[]
    labId?: IntFilter<"Testcase"> | number
    inputVal?: StringFilter<"Testcase"> | string
    outputVal?: StringFilter<"Testcase"> | string
    inHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    outHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    score?: IntFilter<"Testcase"> | number
    submissions?: SubmissionListRelationFilter
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
  }, "testcaseId">

  export type TestcaseOrderByWithAggregationInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    inputVal?: SortOrder
    outputVal?: SortOrder
    inHiddenVal?: SortOrderInput | SortOrder
    outHiddenVal?: SortOrderInput | SortOrder
    score?: SortOrder
    _count?: TestcaseCountOrderByAggregateInput
    _avg?: TestcaseAvgOrderByAggregateInput
    _max?: TestcaseMaxOrderByAggregateInput
    _min?: TestcaseMinOrderByAggregateInput
    _sum?: TestcaseSumOrderByAggregateInput
  }

  export type TestcaseScalarWhereWithAggregatesInput = {
    AND?: TestcaseScalarWhereWithAggregatesInput | TestcaseScalarWhereWithAggregatesInput[]
    OR?: TestcaseScalarWhereWithAggregatesInput[]
    NOT?: TestcaseScalarWhereWithAggregatesInput | TestcaseScalarWhereWithAggregatesInput[]
    testcaseId?: IntWithAggregatesFilter<"Testcase"> | number
    labId?: IntWithAggregatesFilter<"Testcase"> | number
    inputVal?: StringWithAggregatesFilter<"Testcase"> | string
    outputVal?: StringWithAggregatesFilter<"Testcase"> | string
    inHiddenVal?: StringNullableWithAggregatesFilter<"Testcase"> | string | null
    outHiddenVal?: StringNullableWithAggregatesFilter<"Testcase"> | string | null
    score?: IntWithAggregatesFilter<"Testcase"> | number
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    userId?: IntFilter<"Submission"> | number
    labId?: IntFilter<"Submission"> | number
    testcaseId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    createAt?: DateTimeFilter<"Submission"> | Date | string
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
    testcase?: XOR<TestcaseScalarRelationFilter, TestcaseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    lab?: LabOrderByWithRelationInput
    testcase?: TestcaseOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    userId_labId_testcaseId?: SubmissionUserIdLabIdTestcaseIdCompoundUniqueInput
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    userId?: IntFilter<"Submission"> | number
    labId?: IntFilter<"Submission"> | number
    testcaseId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    createAt?: DateTimeFilter<"Submission"> | Date | string
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
    testcase?: XOR<TestcaseScalarRelationFilter, TestcaseWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId_labId_testcaseId">

  export type SubmissionOrderByWithAggregationInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Submission"> | number
    labId?: IntWithAggregatesFilter<"Submission"> | number
    testcaseId?: IntWithAggregatesFilter<"Submission"> | number
    status?: StringWithAggregatesFilter<"Submission"> | string
    createAt?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type UserClassWhereInput = {
    AND?: UserClassWhereInput | UserClassWhereInput[]
    OR?: UserClassWhereInput[]
    NOT?: UserClassWhereInput | UserClassWhereInput[]
    userId?: IntFilter<"UserClass"> | number
    classId?: IntFilter<"UserClass"> | number
    roleId?: IntFilter<"UserClass"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserClassOrderByWithRelationInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
    class?: ClassOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserClassWhereUniqueInput = Prisma.AtLeast<{
    userId_classId?: UserClassUserIdClassIdCompoundUniqueInput
    AND?: UserClassWhereInput | UserClassWhereInput[]
    OR?: UserClassWhereInput[]
    NOT?: UserClassWhereInput | UserClassWhereInput[]
    userId?: IntFilter<"UserClass"> | number
    classId?: IntFilter<"UserClass"> | number
    roleId?: IntFilter<"UserClass"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "userId_classId">

  export type UserClassOrderByWithAggregationInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
    _count?: UserClassCountOrderByAggregateInput
    _avg?: UserClassAvgOrderByAggregateInput
    _max?: UserClassMaxOrderByAggregateInput
    _min?: UserClassMinOrderByAggregateInput
    _sum?: UserClassSumOrderByAggregateInput
  }

  export type UserClassScalarWhereWithAggregatesInput = {
    AND?: UserClassScalarWhereWithAggregatesInput | UserClassScalarWhereWithAggregatesInput[]
    OR?: UserClassScalarWhereWithAggregatesInput[]
    NOT?: UserClassScalarWhereWithAggregatesInput | UserClassScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"UserClass"> | number
    classId?: IntWithAggregatesFilter<"UserClass"> | number
    roleId?: IntWithAggregatesFilter<"UserClass"> | number
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    roleId?: IntFilter<"Role"> | number
    roleName?: StringFilter<"Role"> | string
    userClasses?: UserClassListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    roleId?: SortOrder
    roleName?: SortOrder
    userClasses?: UserClassOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    roleId?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    roleName?: StringFilter<"Role"> | string
    userClasses?: UserClassListRelationFilter
  }, "roleId">

  export type RoleOrderByWithAggregationInput = {
    roleId?: SortOrder
    roleName?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    roleId?: IntWithAggregatesFilter<"Role"> | number
    roleName?: StringWithAggregatesFilter<"Role"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    notiId?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    notiId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    notiId?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createAt?: DateTimeFilter<"Notification"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "notiId">

  export type NotificationOrderByWithAggregationInput = {
    notiId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    notiId?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    message?: StringWithAggregatesFilter<"Notification"> | string
    createAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type FlowchartWhereInput = {
    AND?: FlowchartWhereInput | FlowchartWhereInput[]
    OR?: FlowchartWhereInput[]
    NOT?: FlowchartWhereInput | FlowchartWhereInput[]
    flowchartId?: IntFilter<"Flowchart"> | number
    userId?: IntFilter<"Flowchart"> | number
    labId?: IntFilter<"Flowchart"> | number
    createdAt?: DateTimeFilter<"Flowchart"> | Date | string
    content?: JsonFilter<"Flowchart">
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FlowchartOrderByWithRelationInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    lab?: LabOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FlowchartWhereUniqueInput = Prisma.AtLeast<{
    flowchartId?: number
    AND?: FlowchartWhereInput | FlowchartWhereInput[]
    OR?: FlowchartWhereInput[]
    NOT?: FlowchartWhereInput | FlowchartWhereInput[]
    userId?: IntFilter<"Flowchart"> | number
    labId?: IntFilter<"Flowchart"> | number
    createdAt?: DateTimeFilter<"Flowchart"> | Date | string
    content?: JsonFilter<"Flowchart">
    lab?: XOR<LabScalarRelationFilter, LabWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "flowchartId">

  export type FlowchartOrderByWithAggregationInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
    _count?: FlowchartCountOrderByAggregateInput
    _avg?: FlowchartAvgOrderByAggregateInput
    _max?: FlowchartMaxOrderByAggregateInput
    _min?: FlowchartMinOrderByAggregateInput
    _sum?: FlowchartSumOrderByAggregateInput
  }

  export type FlowchartScalarWhereWithAggregatesInput = {
    AND?: FlowchartScalarWhereWithAggregatesInput | FlowchartScalarWhereWithAggregatesInput[]
    OR?: FlowchartScalarWhereWithAggregatesInput[]
    NOT?: FlowchartScalarWhereWithAggregatesInput | FlowchartScalarWhereWithAggregatesInput[]
    flowchartId?: IntWithAggregatesFilter<"Flowchart"> | number
    userId?: IntWithAggregatesFilter<"Flowchart"> | number
    labId?: IntWithAggregatesFilter<"Flowchart"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Flowchart"> | Date | string
    content?: JsonWithAggregatesFilter<"Flowchart">
  }

  export type UserCreateInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountCreateInput = {
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    userId: number
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
  }

  export type AccountUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateManyInput = {
    id?: number
    userId: number
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateInput = {
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    sessionToken: string
    userId: number
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageCreateInput = {
    packageName: string
    duration: number
    seats: number
    price: Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassCreateNestedManyWithoutPackageInput
  }

  export type PackageUncheckedCreateInput = {
    packageId?: number
    packageName: string
    duration: number
    seats: number
    price: Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassUncheckedCreateNestedManyWithoutPackageInput
  }

  export type PackageUpdateInput = {
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassUpdateManyWithoutPackageNestedInput
  }

  export type PackageUncheckedUpdateInput = {
    packageId?: IntFieldUpdateOperationsInput | number
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    packageClasses?: PackageClassUncheckedUpdateManyWithoutPackageNestedInput
  }

  export type PackageCreateManyInput = {
    packageId?: number
    packageName: string
    duration: number
    seats: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type PackageUpdateManyMutationInput = {
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PackageUncheckedUpdateManyInput = {
    packageId?: IntFieldUpdateOperationsInput | number
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ClassCreateInput = {
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsCreateNestedManyWithoutClassInput
    packageClasses?: PackageClassCreateNestedManyWithoutClassInput
    userClasses?: UserClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    classId?: number
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutClassInput
    packageClasses?: PackageClassUncheckedCreateNestedManyWithoutClassInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassUpdateInput = {
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUpdateManyWithoutClassNestedInput
    packageClasses?: PackageClassUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    classId?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutClassNestedInput
    packageClasses?: PackageClassUncheckedUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    classId?: number
    classname: string
    createAt?: Date | string
  }

  export type ClassUpdateManyMutationInput = {
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassUncheckedUpdateManyInput = {
    classId?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageClassCreateInput = {
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
    class: ClassCreateNestedOneWithoutPackageClassesInput
    package: PackageCreateNestedOneWithoutPackageClassesInput
  }

  export type PackageClassUncheckedCreateInput = {
    packageClassId?: number
    classId: number
    packageId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type PackageClassUpdateInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutPackageClassesNestedInput
    package?: PackageUpdateOneRequiredWithoutPackageClassesNestedInput
  }

  export type PackageClassUncheckedUpdateInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageClassCreateManyInput = {
    packageClassId?: number
    classId: number
    packageId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type PackageClassUpdateManyMutationInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageClassUncheckedUpdateManyInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LabCreateInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartCreateNestedManyWithoutLabInput
    owner: UserCreateNestedOneWithoutLabsInput
    submissions?: SubmissionCreateNestedManyWithoutLabInput
    testcases?: TestcaseCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutLabInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabInput
    testcases?: TestcaseUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabUpdateInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUpdateManyWithoutLabNestedInput
    owner?: UserUpdateOneRequiredWithoutLabsNestedInput
    submissions?: SubmissionUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUncheckedUpdateManyWithoutLabNestedInput
  }

  export type LabCreateManyInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
  }

  export type LabUpdateManyMutationInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type LabUncheckedUpdateManyInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ClassLabsCreateInput = {
    class: ClassCreateNestedOneWithoutClassLabsInput
    lab: LabCreateNestedOneWithoutClassLabsInput
  }

  export type ClassLabsUncheckedCreateInput = {
    classId: number
    labId: number
  }

  export type ClassLabsUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutClassLabsNestedInput
    lab?: LabUpdateOneRequiredWithoutClassLabsNestedInput
  }

  export type ClassLabsUncheckedUpdateInput = {
    classId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassLabsCreateManyInput = {
    classId: number
    labId: number
  }

  export type ClassLabsUpdateManyMutationInput = {

  }

  export type ClassLabsUncheckedUpdateManyInput = {
    classId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
  }

  export type TestcaseCreateInput = {
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
    submissions?: SubmissionCreateNestedManyWithoutTestcaseInput
    lab: LabCreateNestedOneWithoutTestcasesInput
  }

  export type TestcaseUncheckedCreateInput = {
    testcaseId?: number
    labId: number
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestcaseInput
  }

  export type TestcaseUpdateInput = {
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    submissions?: SubmissionUpdateManyWithoutTestcaseNestedInput
    lab?: LabUpdateOneRequiredWithoutTestcasesNestedInput
  }

  export type TestcaseUncheckedUpdateInput = {
    testcaseId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    submissions?: SubmissionUncheckedUpdateManyWithoutTestcaseNestedInput
  }

  export type TestcaseCreateManyInput = {
    testcaseId?: number
    labId: number
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
  }

  export type TestcaseUpdateManyMutationInput = {
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
  }

  export type TestcaseUncheckedUpdateManyInput = {
    testcaseId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
  }

  export type SubmissionCreateInput = {
    status: string
    createAt?: Date | string
    lab: LabCreateNestedOneWithoutSubmissionsInput
    testcase: TestcaseCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    userId: number
    labId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lab?: LabUpdateOneRequiredWithoutSubmissionsNestedInput
    testcase?: TestcaseUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionCreateManyInput = {
    userId: number
    labId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClassCreateInput = {
    class: ClassCreateNestedOneWithoutUserClassesInput
    role: RoleCreateNestedOneWithoutUserClassesInput
    user: UserCreateNestedOneWithoutUserClassesInput
  }

  export type UserClassUncheckedCreateInput = {
    userId: number
    classId: number
    roleId: number
  }

  export type UserClassUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutUserClassesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserClassesNestedInput
    user?: UserUpdateOneRequiredWithoutUserClassesNestedInput
  }

  export type UserClassUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserClassCreateManyInput = {
    userId: number
    classId: number
    roleId: number
  }

  export type UserClassUpdateManyMutationInput = {

  }

  export type UserClassUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type RoleCreateInput = {
    roleName: string
    userClasses?: UserClassCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    roleId?: number
    roleName: string
    userClasses?: UserClassUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    roleName?: StringFieldUpdateOperationsInput | string
    userClasses?: UserClassUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
    userClasses?: UserClassUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    roleId?: number
    roleName: string
  }

  export type RoleUpdateManyMutationInput = {
    roleName?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    message: string
    createAt?: Date | string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    notiId?: number
    userId: number
    message: string
    createAt?: Date | string
  }

  export type NotificationUpdateInput = {
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    notiId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    notiId?: number
    userId: number
    message: string
    createAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    notiId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FlowchartCreateInput = {
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
    lab: LabCreateNestedOneWithoutFlowchartsInput
    user: UserCreateNestedOneWithoutFlowchartsInput
  }

  export type FlowchartUncheckedCreateInput = {
    flowchartId?: number
    userId: number
    labId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
    lab?: LabUpdateOneRequiredWithoutFlowchartsNestedInput
    user?: UserUpdateOneRequiredWithoutFlowchartsNestedInput
  }

  export type FlowchartUncheckedUpdateInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartCreateManyInput = {
    flowchartId?: number
    userId: number
    labId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartUncheckedUpdateManyInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type FlowchartListRelationFilter = {
    every?: FlowchartWhereInput
    some?: FlowchartWhereInput
    none?: FlowchartWhereInput
  }

  export type LabListRelationFilter = {
    every?: LabWhereInput
    some?: LabWhereInput
    none?: LabWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type UserClassListRelationFilter = {
    every?: UserClassWhereInput
    some?: UserClassWhereInput
    none?: UserClassWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FlowchartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fname?: SortOrder
    lname?: SortOrder
    name?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    image?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    access_token?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    access_token?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    access_token?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    expires_at?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    expires_at?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type PackageClassListRelationFilter = {
    every?: PackageClassWhereInput
    some?: PackageClassWhereInput
    none?: PackageClassWhereInput
  }

  export type PackageClassOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PackageCountOrderByAggregateInput = {
    packageId?: SortOrder
    packageName?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
  }

  export type PackageAvgOrderByAggregateInput = {
    packageId?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
  }

  export type PackageMaxOrderByAggregateInput = {
    packageId?: SortOrder
    packageName?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
  }

  export type PackageMinOrderByAggregateInput = {
    packageId?: SortOrder
    packageName?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
  }

  export type PackageSumOrderByAggregateInput = {
    packageId?: SortOrder
    duration?: SortOrder
    seats?: SortOrder
    price?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type ClassLabsListRelationFilter = {
    every?: ClassLabsWhereInput
    some?: ClassLabsWhereInput
    none?: ClassLabsWhereInput
  }

  export type ClassLabsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    classId?: SortOrder
    classname?: SortOrder
    createAt?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    classId?: SortOrder
    classname?: SortOrder
    createAt?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    classId?: SortOrder
    classname?: SortOrder
    createAt?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    classId?: SortOrder
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type PackageScalarRelationFilter = {
    is?: PackageWhereInput
    isNot?: PackageWhereInput
  }

  export type PackageClassCountOrderByAggregateInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
    purchasedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type PackageClassAvgOrderByAggregateInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
  }

  export type PackageClassMaxOrderByAggregateInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
    purchasedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type PackageClassMinOrderByAggregateInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
    purchasedAt?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
  }

  export type PackageClassSumOrderByAggregateInput = {
    packageClassId?: SortOrder
    classId?: SortOrder
    packageId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type TestcaseListRelationFilter = {
    every?: TestcaseWhereInput
    some?: TestcaseWhereInput
    none?: TestcaseWhereInput
  }

  export type TestcaseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LabCountOrderByAggregateInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    labname?: SortOrder
    problemSolving?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
    createAt?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type LabAvgOrderByAggregateInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
  }

  export type LabMaxOrderByAggregateInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    labname?: SortOrder
    problemSolving?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
    createAt?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type LabMinOrderByAggregateInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    labname?: SortOrder
    problemSolving?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
    createAt?: SortOrder
    dueDate?: SortOrder
    status?: SortOrder
  }

  export type LabSumOrderByAggregateInput = {
    labId?: SortOrder
    ownerUserId?: SortOrder
    inSymVal?: SortOrder
    outSymVal?: SortOrder
    declareSymVal?: SortOrder
    assignSymVal?: SortOrder
    ifSymVal?: SortOrder
    forSymVal?: SortOrder
    whileSymVal?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type LabScalarRelationFilter = {
    is?: LabWhereInput
    isNot?: LabWhereInput
  }

  export type ClassLabsClassIdLabIdCompoundUniqueInput = {
    classId: number
    labId: number
  }

  export type ClassLabsCountOrderByAggregateInput = {
    classId?: SortOrder
    labId?: SortOrder
  }

  export type ClassLabsAvgOrderByAggregateInput = {
    classId?: SortOrder
    labId?: SortOrder
  }

  export type ClassLabsMaxOrderByAggregateInput = {
    classId?: SortOrder
    labId?: SortOrder
  }

  export type ClassLabsMinOrderByAggregateInput = {
    classId?: SortOrder
    labId?: SortOrder
  }

  export type ClassLabsSumOrderByAggregateInput = {
    classId?: SortOrder
    labId?: SortOrder
  }

  export type TestcaseCountOrderByAggregateInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    inputVal?: SortOrder
    outputVal?: SortOrder
    inHiddenVal?: SortOrder
    outHiddenVal?: SortOrder
    score?: SortOrder
  }

  export type TestcaseAvgOrderByAggregateInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    score?: SortOrder
  }

  export type TestcaseMaxOrderByAggregateInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    inputVal?: SortOrder
    outputVal?: SortOrder
    inHiddenVal?: SortOrder
    outHiddenVal?: SortOrder
    score?: SortOrder
  }

  export type TestcaseMinOrderByAggregateInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    inputVal?: SortOrder
    outputVal?: SortOrder
    inHiddenVal?: SortOrder
    outHiddenVal?: SortOrder
    score?: SortOrder
  }

  export type TestcaseSumOrderByAggregateInput = {
    testcaseId?: SortOrder
    labId?: SortOrder
    score?: SortOrder
  }

  export type TestcaseScalarRelationFilter = {
    is?: TestcaseWhereInput
    isNot?: TestcaseWhereInput
  }

  export type SubmissionUserIdLabIdTestcaseIdCompoundUniqueInput = {
    userId: number
    labId: number
    testcaseId: number
  }

  export type SubmissionCountOrderByAggregateInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
    status?: SortOrder
    createAt?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    userId?: SortOrder
    labId?: SortOrder
    testcaseId?: SortOrder
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserClassUserIdClassIdCompoundUniqueInput = {
    userId: number
    classId: number
  }

  export type UserClassCountOrderByAggregateInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
  }

  export type UserClassAvgOrderByAggregateInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
  }

  export type UserClassMaxOrderByAggregateInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
  }

  export type UserClassMinOrderByAggregateInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
  }

  export type UserClassSumOrderByAggregateInput = {
    userId?: SortOrder
    classId?: SortOrder
    roleId?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    roleId?: SortOrder
    roleName?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    roleId?: SortOrder
    roleName?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    roleId?: SortOrder
    roleName?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    roleId?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    notiId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    notiId?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    notiId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    notiId?: SortOrder
    userId?: SortOrder
    message?: SortOrder
    createAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    notiId?: SortOrder
    userId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type FlowchartCountOrderByAggregateInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
    createdAt?: SortOrder
    content?: SortOrder
  }

  export type FlowchartAvgOrderByAggregateInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
  }

  export type FlowchartMaxOrderByAggregateInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
    createdAt?: SortOrder
  }

  export type FlowchartMinOrderByAggregateInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
    createdAt?: SortOrder
  }

  export type FlowchartSumOrderByAggregateInput = {
    flowchartId?: SortOrder
    userId?: SortOrder
    labId?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type FlowchartCreateNestedManyWithoutUserInput = {
    create?: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput> | FlowchartCreateWithoutUserInput[] | FlowchartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutUserInput | FlowchartCreateOrConnectWithoutUserInput[]
    createMany?: FlowchartCreateManyUserInputEnvelope
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
  }

  export type LabCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput> | LabCreateWithoutOwnerInput[] | LabUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LabCreateOrConnectWithoutOwnerInput | LabCreateOrConnectWithoutOwnerInput[]
    createMany?: LabCreateManyOwnerInputEnvelope
    connect?: LabWhereUniqueInput | LabWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type UserClassCreateNestedManyWithoutUserInput = {
    create?: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput> | UserClassCreateWithoutUserInput[] | UserClassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutUserInput | UserClassCreateOrConnectWithoutUserInput[]
    createMany?: UserClassCreateManyUserInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type FlowchartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput> | FlowchartCreateWithoutUserInput[] | FlowchartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutUserInput | FlowchartCreateOrConnectWithoutUserInput[]
    createMany?: FlowchartCreateManyUserInputEnvelope
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
  }

  export type LabUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput> | LabCreateWithoutOwnerInput[] | LabUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LabCreateOrConnectWithoutOwnerInput | LabCreateOrConnectWithoutOwnerInput[]
    createMany?: LabCreateManyOwnerInputEnvelope
    connect?: LabWhereUniqueInput | LabWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type UserClassUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput> | UserClassCreateWithoutUserInput[] | UserClassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutUserInput | UserClassCreateOrConnectWithoutUserInput[]
    createMany?: UserClassCreateManyUserInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type FlowchartUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput> | FlowchartCreateWithoutUserInput[] | FlowchartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutUserInput | FlowchartCreateOrConnectWithoutUserInput[]
    upsert?: FlowchartUpsertWithWhereUniqueWithoutUserInput | FlowchartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlowchartCreateManyUserInputEnvelope
    set?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    disconnect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    delete?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    update?: FlowchartUpdateWithWhereUniqueWithoutUserInput | FlowchartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlowchartUpdateManyWithWhereWithoutUserInput | FlowchartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
  }

  export type LabUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput> | LabCreateWithoutOwnerInput[] | LabUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LabCreateOrConnectWithoutOwnerInput | LabCreateOrConnectWithoutOwnerInput[]
    upsert?: LabUpsertWithWhereUniqueWithoutOwnerInput | LabUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LabCreateManyOwnerInputEnvelope
    set?: LabWhereUniqueInput | LabWhereUniqueInput[]
    disconnect?: LabWhereUniqueInput | LabWhereUniqueInput[]
    delete?: LabWhereUniqueInput | LabWhereUniqueInput[]
    connect?: LabWhereUniqueInput | LabWhereUniqueInput[]
    update?: LabUpdateWithWhereUniqueWithoutOwnerInput | LabUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LabUpdateManyWithWhereWithoutOwnerInput | LabUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LabScalarWhereInput | LabScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type UserClassUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput> | UserClassCreateWithoutUserInput[] | UserClassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutUserInput | UserClassCreateOrConnectWithoutUserInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutUserInput | UserClassUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserClassCreateManyUserInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutUserInput | UserClassUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutUserInput | UserClassUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type FlowchartUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput> | FlowchartCreateWithoutUserInput[] | FlowchartUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutUserInput | FlowchartCreateOrConnectWithoutUserInput[]
    upsert?: FlowchartUpsertWithWhereUniqueWithoutUserInput | FlowchartUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FlowchartCreateManyUserInputEnvelope
    set?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    disconnect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    delete?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    update?: FlowchartUpdateWithWhereUniqueWithoutUserInput | FlowchartUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FlowchartUpdateManyWithWhereWithoutUserInput | FlowchartUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
  }

  export type LabUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput> | LabCreateWithoutOwnerInput[] | LabUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: LabCreateOrConnectWithoutOwnerInput | LabCreateOrConnectWithoutOwnerInput[]
    upsert?: LabUpsertWithWhereUniqueWithoutOwnerInput | LabUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: LabCreateManyOwnerInputEnvelope
    set?: LabWhereUniqueInput | LabWhereUniqueInput[]
    disconnect?: LabWhereUniqueInput | LabWhereUniqueInput[]
    delete?: LabWhereUniqueInput | LabWhereUniqueInput[]
    connect?: LabWhereUniqueInput | LabWhereUniqueInput[]
    update?: LabUpdateWithWhereUniqueWithoutOwnerInput | LabUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: LabUpdateManyWithWhereWithoutOwnerInput | LabUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: LabScalarWhereInput | LabScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type UserClassUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput> | UserClassCreateWithoutUserInput[] | UserClassUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutUserInput | UserClassCreateOrConnectWithoutUserInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutUserInput | UserClassUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserClassCreateManyUserInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutUserInput | UserClassUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutUserInput | UserClassUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type PackageClassCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput> | PackageClassCreateWithoutPackageInput[] | PackageClassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutPackageInput | PackageClassCreateOrConnectWithoutPackageInput[]
    createMany?: PackageClassCreateManyPackageInputEnvelope
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
  }

  export type PackageClassUncheckedCreateNestedManyWithoutPackageInput = {
    create?: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput> | PackageClassCreateWithoutPackageInput[] | PackageClassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutPackageInput | PackageClassCreateOrConnectWithoutPackageInput[]
    createMany?: PackageClassCreateManyPackageInputEnvelope
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type PackageClassUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput> | PackageClassCreateWithoutPackageInput[] | PackageClassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutPackageInput | PackageClassCreateOrConnectWithoutPackageInput[]
    upsert?: PackageClassUpsertWithWhereUniqueWithoutPackageInput | PackageClassUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageClassCreateManyPackageInputEnvelope
    set?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    disconnect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    delete?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    update?: PackageClassUpdateWithWhereUniqueWithoutPackageInput | PackageClassUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageClassUpdateManyWithWhereWithoutPackageInput | PackageClassUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
  }

  export type PackageClassUncheckedUpdateManyWithoutPackageNestedInput = {
    create?: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput> | PackageClassCreateWithoutPackageInput[] | PackageClassUncheckedCreateWithoutPackageInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutPackageInput | PackageClassCreateOrConnectWithoutPackageInput[]
    upsert?: PackageClassUpsertWithWhereUniqueWithoutPackageInput | PackageClassUpsertWithWhereUniqueWithoutPackageInput[]
    createMany?: PackageClassCreateManyPackageInputEnvelope
    set?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    disconnect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    delete?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    update?: PackageClassUpdateWithWhereUniqueWithoutPackageInput | PackageClassUpdateWithWhereUniqueWithoutPackageInput[]
    updateMany?: PackageClassUpdateManyWithWhereWithoutPackageInput | PackageClassUpdateManyWithWhereWithoutPackageInput[]
    deleteMany?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
  }

  export type ClassLabsCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput> | ClassLabsCreateWithoutClassInput[] | ClassLabsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutClassInput | ClassLabsCreateOrConnectWithoutClassInput[]
    createMany?: ClassLabsCreateManyClassInputEnvelope
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
  }

  export type PackageClassCreateNestedManyWithoutClassInput = {
    create?: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput> | PackageClassCreateWithoutClassInput[] | PackageClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutClassInput | PackageClassCreateOrConnectWithoutClassInput[]
    createMany?: PackageClassCreateManyClassInputEnvelope
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
  }

  export type UserClassCreateNestedManyWithoutClassInput = {
    create?: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput> | UserClassCreateWithoutClassInput[] | UserClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutClassInput | UserClassCreateOrConnectWithoutClassInput[]
    createMany?: UserClassCreateManyClassInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type ClassLabsUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput> | ClassLabsCreateWithoutClassInput[] | ClassLabsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutClassInput | ClassLabsCreateOrConnectWithoutClassInput[]
    createMany?: ClassLabsCreateManyClassInputEnvelope
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
  }

  export type PackageClassUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput> | PackageClassCreateWithoutClassInput[] | PackageClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutClassInput | PackageClassCreateOrConnectWithoutClassInput[]
    createMany?: PackageClassCreateManyClassInputEnvelope
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
  }

  export type UserClassUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput> | UserClassCreateWithoutClassInput[] | UserClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutClassInput | UserClassCreateOrConnectWithoutClassInput[]
    createMany?: UserClassCreateManyClassInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type ClassLabsUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput> | ClassLabsCreateWithoutClassInput[] | ClassLabsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutClassInput | ClassLabsCreateOrConnectWithoutClassInput[]
    upsert?: ClassLabsUpsertWithWhereUniqueWithoutClassInput | ClassLabsUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassLabsCreateManyClassInputEnvelope
    set?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    disconnect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    delete?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    update?: ClassLabsUpdateWithWhereUniqueWithoutClassInput | ClassLabsUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassLabsUpdateManyWithWhereWithoutClassInput | ClassLabsUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
  }

  export type PackageClassUpdateManyWithoutClassNestedInput = {
    create?: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput> | PackageClassCreateWithoutClassInput[] | PackageClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutClassInput | PackageClassCreateOrConnectWithoutClassInput[]
    upsert?: PackageClassUpsertWithWhereUniqueWithoutClassInput | PackageClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: PackageClassCreateManyClassInputEnvelope
    set?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    disconnect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    delete?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    update?: PackageClassUpdateWithWhereUniqueWithoutClassInput | PackageClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: PackageClassUpdateManyWithWhereWithoutClassInput | PackageClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
  }

  export type UserClassUpdateManyWithoutClassNestedInput = {
    create?: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput> | UserClassCreateWithoutClassInput[] | UserClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutClassInput | UserClassCreateOrConnectWithoutClassInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutClassInput | UserClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: UserClassCreateManyClassInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutClassInput | UserClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutClassInput | UserClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type ClassLabsUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput> | ClassLabsCreateWithoutClassInput[] | ClassLabsUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutClassInput | ClassLabsCreateOrConnectWithoutClassInput[]
    upsert?: ClassLabsUpsertWithWhereUniqueWithoutClassInput | ClassLabsUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassLabsCreateManyClassInputEnvelope
    set?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    disconnect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    delete?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    update?: ClassLabsUpdateWithWhereUniqueWithoutClassInput | ClassLabsUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassLabsUpdateManyWithWhereWithoutClassInput | ClassLabsUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
  }

  export type PackageClassUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput> | PackageClassCreateWithoutClassInput[] | PackageClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PackageClassCreateOrConnectWithoutClassInput | PackageClassCreateOrConnectWithoutClassInput[]
    upsert?: PackageClassUpsertWithWhereUniqueWithoutClassInput | PackageClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: PackageClassCreateManyClassInputEnvelope
    set?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    disconnect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    delete?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    connect?: PackageClassWhereUniqueInput | PackageClassWhereUniqueInput[]
    update?: PackageClassUpdateWithWhereUniqueWithoutClassInput | PackageClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: PackageClassUpdateManyWithWhereWithoutClassInput | PackageClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
  }

  export type UserClassUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput> | UserClassCreateWithoutClassInput[] | UserClassUncheckedCreateWithoutClassInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutClassInput | UserClassCreateOrConnectWithoutClassInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutClassInput | UserClassUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: UserClassCreateManyClassInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutClassInput | UserClassUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutClassInput | UserClassUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutPackageClassesInput = {
    create?: XOR<ClassCreateWithoutPackageClassesInput, ClassUncheckedCreateWithoutPackageClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutPackageClassesInput
    connect?: ClassWhereUniqueInput
  }

  export type PackageCreateNestedOneWithoutPackageClassesInput = {
    create?: XOR<PackageCreateWithoutPackageClassesInput, PackageUncheckedCreateWithoutPackageClassesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPackageClassesInput
    connect?: PackageWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutPackageClassesNestedInput = {
    create?: XOR<ClassCreateWithoutPackageClassesInput, ClassUncheckedCreateWithoutPackageClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutPackageClassesInput
    upsert?: ClassUpsertWithoutPackageClassesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutPackageClassesInput, ClassUpdateWithoutPackageClassesInput>, ClassUncheckedUpdateWithoutPackageClassesInput>
  }

  export type PackageUpdateOneRequiredWithoutPackageClassesNestedInput = {
    create?: XOR<PackageCreateWithoutPackageClassesInput, PackageUncheckedCreateWithoutPackageClassesInput>
    connectOrCreate?: PackageCreateOrConnectWithoutPackageClassesInput
    upsert?: PackageUpsertWithoutPackageClassesInput
    connect?: PackageWhereUniqueInput
    update?: XOR<XOR<PackageUpdateToOneWithWhereWithoutPackageClassesInput, PackageUpdateWithoutPackageClassesInput>, PackageUncheckedUpdateWithoutPackageClassesInput>
  }

  export type ClassLabsCreateNestedManyWithoutLabInput = {
    create?: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput> | ClassLabsCreateWithoutLabInput[] | ClassLabsUncheckedCreateWithoutLabInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutLabInput | ClassLabsCreateOrConnectWithoutLabInput[]
    createMany?: ClassLabsCreateManyLabInputEnvelope
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
  }

  export type FlowchartCreateNestedManyWithoutLabInput = {
    create?: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput> | FlowchartCreateWithoutLabInput[] | FlowchartUncheckedCreateWithoutLabInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutLabInput | FlowchartCreateOrConnectWithoutLabInput[]
    createMany?: FlowchartCreateManyLabInputEnvelope
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutLabsInput = {
    create?: XOR<UserCreateWithoutLabsInput, UserUncheckedCreateWithoutLabsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLabsInput
    connect?: UserWhereUniqueInput
  }

  export type SubmissionCreateNestedManyWithoutLabInput = {
    create?: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput> | SubmissionCreateWithoutLabInput[] | SubmissionUncheckedCreateWithoutLabInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabInput | SubmissionCreateOrConnectWithoutLabInput[]
    createMany?: SubmissionCreateManyLabInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type TestcaseCreateNestedManyWithoutLabInput = {
    create?: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput> | TestcaseCreateWithoutLabInput[] | TestcaseUncheckedCreateWithoutLabInput[]
    connectOrCreate?: TestcaseCreateOrConnectWithoutLabInput | TestcaseCreateOrConnectWithoutLabInput[]
    createMany?: TestcaseCreateManyLabInputEnvelope
    connect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
  }

  export type ClassLabsUncheckedCreateNestedManyWithoutLabInput = {
    create?: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput> | ClassLabsCreateWithoutLabInput[] | ClassLabsUncheckedCreateWithoutLabInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutLabInput | ClassLabsCreateOrConnectWithoutLabInput[]
    createMany?: ClassLabsCreateManyLabInputEnvelope
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
  }

  export type FlowchartUncheckedCreateNestedManyWithoutLabInput = {
    create?: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput> | FlowchartCreateWithoutLabInput[] | FlowchartUncheckedCreateWithoutLabInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutLabInput | FlowchartCreateOrConnectWithoutLabInput[]
    createMany?: FlowchartCreateManyLabInputEnvelope
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutLabInput = {
    create?: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput> | SubmissionCreateWithoutLabInput[] | SubmissionUncheckedCreateWithoutLabInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabInput | SubmissionCreateOrConnectWithoutLabInput[]
    createMany?: SubmissionCreateManyLabInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type TestcaseUncheckedCreateNestedManyWithoutLabInput = {
    create?: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput> | TestcaseCreateWithoutLabInput[] | TestcaseUncheckedCreateWithoutLabInput[]
    connectOrCreate?: TestcaseCreateOrConnectWithoutLabInput | TestcaseCreateOrConnectWithoutLabInput[]
    createMany?: TestcaseCreateManyLabInputEnvelope
    connect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ClassLabsUpdateManyWithoutLabNestedInput = {
    create?: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput> | ClassLabsCreateWithoutLabInput[] | ClassLabsUncheckedCreateWithoutLabInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutLabInput | ClassLabsCreateOrConnectWithoutLabInput[]
    upsert?: ClassLabsUpsertWithWhereUniqueWithoutLabInput | ClassLabsUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: ClassLabsCreateManyLabInputEnvelope
    set?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    disconnect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    delete?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    update?: ClassLabsUpdateWithWhereUniqueWithoutLabInput | ClassLabsUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: ClassLabsUpdateManyWithWhereWithoutLabInput | ClassLabsUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
  }

  export type FlowchartUpdateManyWithoutLabNestedInput = {
    create?: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput> | FlowchartCreateWithoutLabInput[] | FlowchartUncheckedCreateWithoutLabInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutLabInput | FlowchartCreateOrConnectWithoutLabInput[]
    upsert?: FlowchartUpsertWithWhereUniqueWithoutLabInput | FlowchartUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: FlowchartCreateManyLabInputEnvelope
    set?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    disconnect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    delete?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    update?: FlowchartUpdateWithWhereUniqueWithoutLabInput | FlowchartUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: FlowchartUpdateManyWithWhereWithoutLabInput | FlowchartUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutLabsNestedInput = {
    create?: XOR<UserCreateWithoutLabsInput, UserUncheckedCreateWithoutLabsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLabsInput
    upsert?: UserUpsertWithoutLabsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLabsInput, UserUpdateWithoutLabsInput>, UserUncheckedUpdateWithoutLabsInput>
  }

  export type SubmissionUpdateManyWithoutLabNestedInput = {
    create?: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput> | SubmissionCreateWithoutLabInput[] | SubmissionUncheckedCreateWithoutLabInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabInput | SubmissionCreateOrConnectWithoutLabInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutLabInput | SubmissionUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: SubmissionCreateManyLabInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutLabInput | SubmissionUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutLabInput | SubmissionUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type TestcaseUpdateManyWithoutLabNestedInput = {
    create?: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput> | TestcaseCreateWithoutLabInput[] | TestcaseUncheckedCreateWithoutLabInput[]
    connectOrCreate?: TestcaseCreateOrConnectWithoutLabInput | TestcaseCreateOrConnectWithoutLabInput[]
    upsert?: TestcaseUpsertWithWhereUniqueWithoutLabInput | TestcaseUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: TestcaseCreateManyLabInputEnvelope
    set?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    disconnect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    delete?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    connect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    update?: TestcaseUpdateWithWhereUniqueWithoutLabInput | TestcaseUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: TestcaseUpdateManyWithWhereWithoutLabInput | TestcaseUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: TestcaseScalarWhereInput | TestcaseScalarWhereInput[]
  }

  export type ClassLabsUncheckedUpdateManyWithoutLabNestedInput = {
    create?: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput> | ClassLabsCreateWithoutLabInput[] | ClassLabsUncheckedCreateWithoutLabInput[]
    connectOrCreate?: ClassLabsCreateOrConnectWithoutLabInput | ClassLabsCreateOrConnectWithoutLabInput[]
    upsert?: ClassLabsUpsertWithWhereUniqueWithoutLabInput | ClassLabsUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: ClassLabsCreateManyLabInputEnvelope
    set?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    disconnect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    delete?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    connect?: ClassLabsWhereUniqueInput | ClassLabsWhereUniqueInput[]
    update?: ClassLabsUpdateWithWhereUniqueWithoutLabInput | ClassLabsUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: ClassLabsUpdateManyWithWhereWithoutLabInput | ClassLabsUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
  }

  export type FlowchartUncheckedUpdateManyWithoutLabNestedInput = {
    create?: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput> | FlowchartCreateWithoutLabInput[] | FlowchartUncheckedCreateWithoutLabInput[]
    connectOrCreate?: FlowchartCreateOrConnectWithoutLabInput | FlowchartCreateOrConnectWithoutLabInput[]
    upsert?: FlowchartUpsertWithWhereUniqueWithoutLabInput | FlowchartUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: FlowchartCreateManyLabInputEnvelope
    set?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    disconnect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    delete?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    connect?: FlowchartWhereUniqueInput | FlowchartWhereUniqueInput[]
    update?: FlowchartUpdateWithWhereUniqueWithoutLabInput | FlowchartUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: FlowchartUpdateManyWithWhereWithoutLabInput | FlowchartUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutLabNestedInput = {
    create?: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput> | SubmissionCreateWithoutLabInput[] | SubmissionUncheckedCreateWithoutLabInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutLabInput | SubmissionCreateOrConnectWithoutLabInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutLabInput | SubmissionUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: SubmissionCreateManyLabInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutLabInput | SubmissionUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutLabInput | SubmissionUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type TestcaseUncheckedUpdateManyWithoutLabNestedInput = {
    create?: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput> | TestcaseCreateWithoutLabInput[] | TestcaseUncheckedCreateWithoutLabInput[]
    connectOrCreate?: TestcaseCreateOrConnectWithoutLabInput | TestcaseCreateOrConnectWithoutLabInput[]
    upsert?: TestcaseUpsertWithWhereUniqueWithoutLabInput | TestcaseUpsertWithWhereUniqueWithoutLabInput[]
    createMany?: TestcaseCreateManyLabInputEnvelope
    set?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    disconnect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    delete?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    connect?: TestcaseWhereUniqueInput | TestcaseWhereUniqueInput[]
    update?: TestcaseUpdateWithWhereUniqueWithoutLabInput | TestcaseUpdateWithWhereUniqueWithoutLabInput[]
    updateMany?: TestcaseUpdateManyWithWhereWithoutLabInput | TestcaseUpdateManyWithWhereWithoutLabInput[]
    deleteMany?: TestcaseScalarWhereInput | TestcaseScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutClassLabsInput = {
    create?: XOR<ClassCreateWithoutClassLabsInput, ClassUncheckedCreateWithoutClassLabsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassLabsInput
    connect?: ClassWhereUniqueInput
  }

  export type LabCreateNestedOneWithoutClassLabsInput = {
    create?: XOR<LabCreateWithoutClassLabsInput, LabUncheckedCreateWithoutClassLabsInput>
    connectOrCreate?: LabCreateOrConnectWithoutClassLabsInput
    connect?: LabWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutClassLabsNestedInput = {
    create?: XOR<ClassCreateWithoutClassLabsInput, ClassUncheckedCreateWithoutClassLabsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutClassLabsInput
    upsert?: ClassUpsertWithoutClassLabsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutClassLabsInput, ClassUpdateWithoutClassLabsInput>, ClassUncheckedUpdateWithoutClassLabsInput>
  }

  export type LabUpdateOneRequiredWithoutClassLabsNestedInput = {
    create?: XOR<LabCreateWithoutClassLabsInput, LabUncheckedCreateWithoutClassLabsInput>
    connectOrCreate?: LabCreateOrConnectWithoutClassLabsInput
    upsert?: LabUpsertWithoutClassLabsInput
    connect?: LabWhereUniqueInput
    update?: XOR<XOR<LabUpdateToOneWithWhereWithoutClassLabsInput, LabUpdateWithoutClassLabsInput>, LabUncheckedUpdateWithoutClassLabsInput>
  }

  export type SubmissionCreateNestedManyWithoutTestcaseInput = {
    create?: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput> | SubmissionCreateWithoutTestcaseInput[] | SubmissionUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestcaseInput | SubmissionCreateOrConnectWithoutTestcaseInput[]
    createMany?: SubmissionCreateManyTestcaseInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type LabCreateNestedOneWithoutTestcasesInput = {
    create?: XOR<LabCreateWithoutTestcasesInput, LabUncheckedCreateWithoutTestcasesInput>
    connectOrCreate?: LabCreateOrConnectWithoutTestcasesInput
    connect?: LabWhereUniqueInput
  }

  export type SubmissionUncheckedCreateNestedManyWithoutTestcaseInput = {
    create?: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput> | SubmissionCreateWithoutTestcaseInput[] | SubmissionUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestcaseInput | SubmissionCreateOrConnectWithoutTestcaseInput[]
    createMany?: SubmissionCreateManyTestcaseInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type SubmissionUpdateManyWithoutTestcaseNestedInput = {
    create?: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput> | SubmissionCreateWithoutTestcaseInput[] | SubmissionUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestcaseInput | SubmissionCreateOrConnectWithoutTestcaseInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutTestcaseInput | SubmissionUpsertWithWhereUniqueWithoutTestcaseInput[]
    createMany?: SubmissionCreateManyTestcaseInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutTestcaseInput | SubmissionUpdateWithWhereUniqueWithoutTestcaseInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutTestcaseInput | SubmissionUpdateManyWithWhereWithoutTestcaseInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type LabUpdateOneRequiredWithoutTestcasesNestedInput = {
    create?: XOR<LabCreateWithoutTestcasesInput, LabUncheckedCreateWithoutTestcasesInput>
    connectOrCreate?: LabCreateOrConnectWithoutTestcasesInput
    upsert?: LabUpsertWithoutTestcasesInput
    connect?: LabWhereUniqueInput
    update?: XOR<XOR<LabUpdateToOneWithWhereWithoutTestcasesInput, LabUpdateWithoutTestcasesInput>, LabUncheckedUpdateWithoutTestcasesInput>
  }

  export type SubmissionUncheckedUpdateManyWithoutTestcaseNestedInput = {
    create?: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput> | SubmissionCreateWithoutTestcaseInput[] | SubmissionUncheckedCreateWithoutTestcaseInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutTestcaseInput | SubmissionCreateOrConnectWithoutTestcaseInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutTestcaseInput | SubmissionUpsertWithWhereUniqueWithoutTestcaseInput[]
    createMany?: SubmissionCreateManyTestcaseInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutTestcaseInput | SubmissionUpdateWithWhereUniqueWithoutTestcaseInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutTestcaseInput | SubmissionUpdateManyWithWhereWithoutTestcaseInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type LabCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<LabCreateWithoutSubmissionsInput, LabUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: LabCreateOrConnectWithoutSubmissionsInput
    connect?: LabWhereUniqueInput
  }

  export type TestcaseCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<TestcaseCreateWithoutSubmissionsInput, TestcaseUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TestcaseCreateOrConnectWithoutSubmissionsInput
    connect?: TestcaseWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type LabUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<LabCreateWithoutSubmissionsInput, LabUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: LabCreateOrConnectWithoutSubmissionsInput
    upsert?: LabUpsertWithoutSubmissionsInput
    connect?: LabWhereUniqueInput
    update?: XOR<XOR<LabUpdateToOneWithWhereWithoutSubmissionsInput, LabUpdateWithoutSubmissionsInput>, LabUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TestcaseUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<TestcaseCreateWithoutSubmissionsInput, TestcaseUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: TestcaseCreateOrConnectWithoutSubmissionsInput
    upsert?: TestcaseUpsertWithoutSubmissionsInput
    connect?: TestcaseWhereUniqueInput
    update?: XOR<XOR<TestcaseUpdateToOneWithWhereWithoutSubmissionsInput, TestcaseUpdateWithoutSubmissionsInput>, TestcaseUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    upsert?: UserUpsertWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionsInput, UserUpdateWithoutSubmissionsInput>, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ClassCreateNestedOneWithoutUserClassesInput = {
    create?: XOR<ClassCreateWithoutUserClassesInput, ClassUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutUserClassesInput
    connect?: ClassWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUserClassesInput = {
    create?: XOR<RoleCreateWithoutUserClassesInput, RoleUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserClassesInput
    connect?: RoleWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUserClassesInput = {
    create?: XOR<UserCreateWithoutUserClassesInput, UserUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserClassesInput
    connect?: UserWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutUserClassesNestedInput = {
    create?: XOR<ClassCreateWithoutUserClassesInput, ClassUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutUserClassesInput
    upsert?: ClassUpsertWithoutUserClassesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutUserClassesInput, ClassUpdateWithoutUserClassesInput>, ClassUncheckedUpdateWithoutUserClassesInput>
  }

  export type RoleUpdateOneRequiredWithoutUserClassesNestedInput = {
    create?: XOR<RoleCreateWithoutUserClassesInput, RoleUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUserClassesInput
    upsert?: RoleUpsertWithoutUserClassesInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUserClassesInput, RoleUpdateWithoutUserClassesInput>, RoleUncheckedUpdateWithoutUserClassesInput>
  }

  export type UserUpdateOneRequiredWithoutUserClassesNestedInput = {
    create?: XOR<UserCreateWithoutUserClassesInput, UserUncheckedCreateWithoutUserClassesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserClassesInput
    upsert?: UserUpsertWithoutUserClassesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserClassesInput, UserUpdateWithoutUserClassesInput>, UserUncheckedUpdateWithoutUserClassesInput>
  }

  export type UserClassCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput> | UserClassCreateWithoutRoleInput[] | UserClassUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutRoleInput | UserClassCreateOrConnectWithoutRoleInput[]
    createMany?: UserClassCreateManyRoleInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type UserClassUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput> | UserClassCreateWithoutRoleInput[] | UserClassUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutRoleInput | UserClassCreateOrConnectWithoutRoleInput[]
    createMany?: UserClassCreateManyRoleInputEnvelope
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
  }

  export type UserClassUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput> | UserClassCreateWithoutRoleInput[] | UserClassUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutRoleInput | UserClassCreateOrConnectWithoutRoleInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutRoleInput | UserClassUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserClassCreateManyRoleInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutRoleInput | UserClassUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutRoleInput | UserClassUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type UserClassUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput> | UserClassCreateWithoutRoleInput[] | UserClassUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserClassCreateOrConnectWithoutRoleInput | UserClassCreateOrConnectWithoutRoleInput[]
    upsert?: UserClassUpsertWithWhereUniqueWithoutRoleInput | UserClassUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserClassCreateManyRoleInputEnvelope
    set?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    disconnect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    delete?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    connect?: UserClassWhereUniqueInput | UserClassWhereUniqueInput[]
    update?: UserClassUpdateWithWhereUniqueWithoutRoleInput | UserClassUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserClassUpdateManyWithWhereWithoutRoleInput | UserClassUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type LabCreateNestedOneWithoutFlowchartsInput = {
    create?: XOR<LabCreateWithoutFlowchartsInput, LabUncheckedCreateWithoutFlowchartsInput>
    connectOrCreate?: LabCreateOrConnectWithoutFlowchartsInput
    connect?: LabWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFlowchartsInput = {
    create?: XOR<UserCreateWithoutFlowchartsInput, UserUncheckedCreateWithoutFlowchartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFlowchartsInput
    connect?: UserWhereUniqueInput
  }

  export type LabUpdateOneRequiredWithoutFlowchartsNestedInput = {
    create?: XOR<LabCreateWithoutFlowchartsInput, LabUncheckedCreateWithoutFlowchartsInput>
    connectOrCreate?: LabCreateOrConnectWithoutFlowchartsInput
    upsert?: LabUpsertWithoutFlowchartsInput
    connect?: LabWhereUniqueInput
    update?: XOR<XOR<LabUpdateToOneWithWhereWithoutFlowchartsInput, LabUpdateWithoutFlowchartsInput>, LabUncheckedUpdateWithoutFlowchartsInput>
  }

  export type UserUpdateOneRequiredWithoutFlowchartsNestedInput = {
    create?: XOR<UserCreateWithoutFlowchartsInput, UserUncheckedCreateWithoutFlowchartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFlowchartsInput
    upsert?: UserUpsertWithoutFlowchartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFlowchartsInput, UserUpdateWithoutFlowchartsInput>, UserUncheckedUpdateWithoutFlowchartsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type AccountCreateWithoutUserInput = {
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FlowchartCreateWithoutUserInput = {
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
    lab: LabCreateNestedOneWithoutFlowchartsInput
  }

  export type FlowchartUncheckedCreateWithoutUserInput = {
    flowchartId?: number
    labId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartCreateOrConnectWithoutUserInput = {
    where: FlowchartWhereUniqueInput
    create: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput>
  }

  export type FlowchartCreateManyUserInputEnvelope = {
    data: FlowchartCreateManyUserInput | FlowchartCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LabCreateWithoutOwnerInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartCreateNestedManyWithoutLabInput
    submissions?: SubmissionCreateNestedManyWithoutLabInput
    testcases?: TestcaseCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateWithoutOwnerInput = {
    labId?: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutLabInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabInput
    testcases?: TestcaseUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabCreateOrConnectWithoutOwnerInput = {
    where: LabWhereUniqueInput
    create: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput>
  }

  export type LabCreateManyOwnerInputEnvelope = {
    data: LabCreateManyOwnerInput | LabCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    message: string
    createAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    notiId?: number
    message: string
    createAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutUserInput = {
    status: string
    createAt?: Date | string
    lab: LabCreateNestedOneWithoutSubmissionsInput
    testcase: TestcaseCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutUserInput = {
    labId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCreateManyUserInputEnvelope = {
    data: SubmissionCreateManyUserInput | SubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserClassCreateWithoutUserInput = {
    class: ClassCreateNestedOneWithoutUserClassesInput
    role: RoleCreateNestedOneWithoutUserClassesInput
  }

  export type UserClassUncheckedCreateWithoutUserInput = {
    classId: number
    roleId: number
  }

  export type UserClassCreateOrConnectWithoutUserInput = {
    where: UserClassWhereUniqueInput
    create: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput>
  }

  export type UserClassCreateManyUserInputEnvelope = {
    data: UserClassCreateManyUserInput | UserClassCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: IntFilter<"Account"> | number
    userId?: IntFilter<"Account"> | number
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    access_token?: StringNullableFilter<"Account"> | string | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
  }

  export type FlowchartUpsertWithWhereUniqueWithoutUserInput = {
    where: FlowchartWhereUniqueInput
    update: XOR<FlowchartUpdateWithoutUserInput, FlowchartUncheckedUpdateWithoutUserInput>
    create: XOR<FlowchartCreateWithoutUserInput, FlowchartUncheckedCreateWithoutUserInput>
  }

  export type FlowchartUpdateWithWhereUniqueWithoutUserInput = {
    where: FlowchartWhereUniqueInput
    data: XOR<FlowchartUpdateWithoutUserInput, FlowchartUncheckedUpdateWithoutUserInput>
  }

  export type FlowchartUpdateManyWithWhereWithoutUserInput = {
    where: FlowchartScalarWhereInput
    data: XOR<FlowchartUpdateManyMutationInput, FlowchartUncheckedUpdateManyWithoutUserInput>
  }

  export type FlowchartScalarWhereInput = {
    AND?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
    OR?: FlowchartScalarWhereInput[]
    NOT?: FlowchartScalarWhereInput | FlowchartScalarWhereInput[]
    flowchartId?: IntFilter<"Flowchart"> | number
    userId?: IntFilter<"Flowchart"> | number
    labId?: IntFilter<"Flowchart"> | number
    createdAt?: DateTimeFilter<"Flowchart"> | Date | string
    content?: JsonFilter<"Flowchart">
  }

  export type LabUpsertWithWhereUniqueWithoutOwnerInput = {
    where: LabWhereUniqueInput
    update: XOR<LabUpdateWithoutOwnerInput, LabUncheckedUpdateWithoutOwnerInput>
    create: XOR<LabCreateWithoutOwnerInput, LabUncheckedCreateWithoutOwnerInput>
  }

  export type LabUpdateWithWhereUniqueWithoutOwnerInput = {
    where: LabWhereUniqueInput
    data: XOR<LabUpdateWithoutOwnerInput, LabUncheckedUpdateWithoutOwnerInput>
  }

  export type LabUpdateManyWithWhereWithoutOwnerInput = {
    where: LabScalarWhereInput
    data: XOR<LabUpdateManyMutationInput, LabUncheckedUpdateManyWithoutOwnerInput>
  }

  export type LabScalarWhereInput = {
    AND?: LabScalarWhereInput | LabScalarWhereInput[]
    OR?: LabScalarWhereInput[]
    NOT?: LabScalarWhereInput | LabScalarWhereInput[]
    labId?: IntFilter<"Lab"> | number
    ownerUserId?: IntFilter<"Lab"> | number
    labname?: StringFilter<"Lab"> | string
    problemSolving?: StringFilter<"Lab"> | string
    inSymVal?: IntFilter<"Lab"> | number
    outSymVal?: IntFilter<"Lab"> | number
    declareSymVal?: IntFilter<"Lab"> | number
    assignSymVal?: IntFilter<"Lab"> | number
    ifSymVal?: IntFilter<"Lab"> | number
    forSymVal?: IntFilter<"Lab"> | number
    whileSymVal?: IntFilter<"Lab"> | number
    createAt?: DateTimeFilter<"Lab"> | Date | string
    dueDate?: DateTimeNullableFilter<"Lab"> | Date | string | null
    status?: StringFilter<"Lab"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    notiId?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    message?: StringFilter<"Notification"> | string
    createAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: IntFilter<"Session"> | number
    sessionToken?: StringFilter<"Session"> | string
    userId?: IntFilter<"Session"> | number
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type SubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    userId?: IntFilter<"Submission"> | number
    labId?: IntFilter<"Submission"> | number
    testcaseId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    createAt?: DateTimeFilter<"Submission"> | Date | string
  }

  export type UserClassUpsertWithWhereUniqueWithoutUserInput = {
    where: UserClassWhereUniqueInput
    update: XOR<UserClassUpdateWithoutUserInput, UserClassUncheckedUpdateWithoutUserInput>
    create: XOR<UserClassCreateWithoutUserInput, UserClassUncheckedCreateWithoutUserInput>
  }

  export type UserClassUpdateWithWhereUniqueWithoutUserInput = {
    where: UserClassWhereUniqueInput
    data: XOR<UserClassUpdateWithoutUserInput, UserClassUncheckedUpdateWithoutUserInput>
  }

  export type UserClassUpdateManyWithWhereWithoutUserInput = {
    where: UserClassScalarWhereInput
    data: XOR<UserClassUpdateManyMutationInput, UserClassUncheckedUpdateManyWithoutUserInput>
  }

  export type UserClassScalarWhereInput = {
    AND?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
    OR?: UserClassScalarWhereInput[]
    NOT?: UserClassScalarWhereInput | UserClassScalarWhereInput[]
    userId?: IntFilter<"UserClass"> | number
    classId?: IntFilter<"UserClass"> | number
    roleId?: IntFilter<"UserClass"> | number
  }

  export type UserCreateWithoutAccountsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PackageClassCreateWithoutPackageInput = {
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
    class: ClassCreateNestedOneWithoutPackageClassesInput
  }

  export type PackageClassUncheckedCreateWithoutPackageInput = {
    packageClassId?: number
    classId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type PackageClassCreateOrConnectWithoutPackageInput = {
    where: PackageClassWhereUniqueInput
    create: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput>
  }

  export type PackageClassCreateManyPackageInputEnvelope = {
    data: PackageClassCreateManyPackageInput | PackageClassCreateManyPackageInput[]
    skipDuplicates?: boolean
  }

  export type PackageClassUpsertWithWhereUniqueWithoutPackageInput = {
    where: PackageClassWhereUniqueInput
    update: XOR<PackageClassUpdateWithoutPackageInput, PackageClassUncheckedUpdateWithoutPackageInput>
    create: XOR<PackageClassCreateWithoutPackageInput, PackageClassUncheckedCreateWithoutPackageInput>
  }

  export type PackageClassUpdateWithWhereUniqueWithoutPackageInput = {
    where: PackageClassWhereUniqueInput
    data: XOR<PackageClassUpdateWithoutPackageInput, PackageClassUncheckedUpdateWithoutPackageInput>
  }

  export type PackageClassUpdateManyWithWhereWithoutPackageInput = {
    where: PackageClassScalarWhereInput
    data: XOR<PackageClassUpdateManyMutationInput, PackageClassUncheckedUpdateManyWithoutPackageInput>
  }

  export type PackageClassScalarWhereInput = {
    AND?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
    OR?: PackageClassScalarWhereInput[]
    NOT?: PackageClassScalarWhereInput | PackageClassScalarWhereInput[]
    packageClassId?: IntFilter<"PackageClass"> | number
    classId?: IntFilter<"PackageClass"> | number
    packageId?: IntFilter<"PackageClass"> | number
    purchasedAt?: DateTimeFilter<"PackageClass"> | Date | string
    startDate?: DateTimeFilter<"PackageClass"> | Date | string
    endDate?: DateTimeFilter<"PackageClass"> | Date | string
  }

  export type ClassLabsCreateWithoutClassInput = {
    lab: LabCreateNestedOneWithoutClassLabsInput
  }

  export type ClassLabsUncheckedCreateWithoutClassInput = {
    labId: number
  }

  export type ClassLabsCreateOrConnectWithoutClassInput = {
    where: ClassLabsWhereUniqueInput
    create: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput>
  }

  export type ClassLabsCreateManyClassInputEnvelope = {
    data: ClassLabsCreateManyClassInput | ClassLabsCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type PackageClassCreateWithoutClassInput = {
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
    package: PackageCreateNestedOneWithoutPackageClassesInput
  }

  export type PackageClassUncheckedCreateWithoutClassInput = {
    packageClassId?: number
    packageId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type PackageClassCreateOrConnectWithoutClassInput = {
    where: PackageClassWhereUniqueInput
    create: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput>
  }

  export type PackageClassCreateManyClassInputEnvelope = {
    data: PackageClassCreateManyClassInput | PackageClassCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type UserClassCreateWithoutClassInput = {
    role: RoleCreateNestedOneWithoutUserClassesInput
    user: UserCreateNestedOneWithoutUserClassesInput
  }

  export type UserClassUncheckedCreateWithoutClassInput = {
    userId: number
    roleId: number
  }

  export type UserClassCreateOrConnectWithoutClassInput = {
    where: UserClassWhereUniqueInput
    create: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput>
  }

  export type UserClassCreateManyClassInputEnvelope = {
    data: UserClassCreateManyClassInput | UserClassCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassLabsUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassLabsWhereUniqueInput
    update: XOR<ClassLabsUpdateWithoutClassInput, ClassLabsUncheckedUpdateWithoutClassInput>
    create: XOR<ClassLabsCreateWithoutClassInput, ClassLabsUncheckedCreateWithoutClassInput>
  }

  export type ClassLabsUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassLabsWhereUniqueInput
    data: XOR<ClassLabsUpdateWithoutClassInput, ClassLabsUncheckedUpdateWithoutClassInput>
  }

  export type ClassLabsUpdateManyWithWhereWithoutClassInput = {
    where: ClassLabsScalarWhereInput
    data: XOR<ClassLabsUpdateManyMutationInput, ClassLabsUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassLabsScalarWhereInput = {
    AND?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
    OR?: ClassLabsScalarWhereInput[]
    NOT?: ClassLabsScalarWhereInput | ClassLabsScalarWhereInput[]
    classId?: IntFilter<"ClassLabs"> | number
    labId?: IntFilter<"ClassLabs"> | number
  }

  export type PackageClassUpsertWithWhereUniqueWithoutClassInput = {
    where: PackageClassWhereUniqueInput
    update: XOR<PackageClassUpdateWithoutClassInput, PackageClassUncheckedUpdateWithoutClassInput>
    create: XOR<PackageClassCreateWithoutClassInput, PackageClassUncheckedCreateWithoutClassInput>
  }

  export type PackageClassUpdateWithWhereUniqueWithoutClassInput = {
    where: PackageClassWhereUniqueInput
    data: XOR<PackageClassUpdateWithoutClassInput, PackageClassUncheckedUpdateWithoutClassInput>
  }

  export type PackageClassUpdateManyWithWhereWithoutClassInput = {
    where: PackageClassScalarWhereInput
    data: XOR<PackageClassUpdateManyMutationInput, PackageClassUncheckedUpdateManyWithoutClassInput>
  }

  export type UserClassUpsertWithWhereUniqueWithoutClassInput = {
    where: UserClassWhereUniqueInput
    update: XOR<UserClassUpdateWithoutClassInput, UserClassUncheckedUpdateWithoutClassInput>
    create: XOR<UserClassCreateWithoutClassInput, UserClassUncheckedCreateWithoutClassInput>
  }

  export type UserClassUpdateWithWhereUniqueWithoutClassInput = {
    where: UserClassWhereUniqueInput
    data: XOR<UserClassUpdateWithoutClassInput, UserClassUncheckedUpdateWithoutClassInput>
  }

  export type UserClassUpdateManyWithWhereWithoutClassInput = {
    where: UserClassScalarWhereInput
    data: XOR<UserClassUpdateManyMutationInput, UserClassUncheckedUpdateManyWithoutClassInput>
  }

  export type ClassCreateWithoutPackageClassesInput = {
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsCreateNestedManyWithoutClassInput
    userClasses?: UserClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutPackageClassesInput = {
    classId?: number
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutClassInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutPackageClassesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutPackageClassesInput, ClassUncheckedCreateWithoutPackageClassesInput>
  }

  export type PackageCreateWithoutPackageClassesInput = {
    packageName: string
    duration: number
    seats: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type PackageUncheckedCreateWithoutPackageClassesInput = {
    packageId?: number
    packageName: string
    duration: number
    seats: number
    price: Decimal | DecimalJsLike | number | string
  }

  export type PackageCreateOrConnectWithoutPackageClassesInput = {
    where: PackageWhereUniqueInput
    create: XOR<PackageCreateWithoutPackageClassesInput, PackageUncheckedCreateWithoutPackageClassesInput>
  }

  export type ClassUpsertWithoutPackageClassesInput = {
    update: XOR<ClassUpdateWithoutPackageClassesInput, ClassUncheckedUpdateWithoutPackageClassesInput>
    create: XOR<ClassCreateWithoutPackageClassesInput, ClassUncheckedCreateWithoutPackageClassesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutPackageClassesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutPackageClassesInput, ClassUncheckedUpdateWithoutPackageClassesInput>
  }

  export type ClassUpdateWithoutPackageClassesInput = {
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutPackageClassesInput = {
    classId?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type PackageUpsertWithoutPackageClassesInput = {
    update: XOR<PackageUpdateWithoutPackageClassesInput, PackageUncheckedUpdateWithoutPackageClassesInput>
    create: XOR<PackageCreateWithoutPackageClassesInput, PackageUncheckedCreateWithoutPackageClassesInput>
    where?: PackageWhereInput
  }

  export type PackageUpdateToOneWithWhereWithoutPackageClassesInput = {
    where?: PackageWhereInput
    data: XOR<PackageUpdateWithoutPackageClassesInput, PackageUncheckedUpdateWithoutPackageClassesInput>
  }

  export type PackageUpdateWithoutPackageClassesInput = {
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type PackageUncheckedUpdateWithoutPackageClassesInput = {
    packageId?: IntFieldUpdateOperationsInput | number
    packageName?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    seats?: IntFieldUpdateOperationsInput | number
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
  }

  export type ClassLabsCreateWithoutLabInput = {
    class: ClassCreateNestedOneWithoutClassLabsInput
  }

  export type ClassLabsUncheckedCreateWithoutLabInput = {
    classId: number
  }

  export type ClassLabsCreateOrConnectWithoutLabInput = {
    where: ClassLabsWhereUniqueInput
    create: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput>
  }

  export type ClassLabsCreateManyLabInputEnvelope = {
    data: ClassLabsCreateManyLabInput | ClassLabsCreateManyLabInput[]
    skipDuplicates?: boolean
  }

  export type FlowchartCreateWithoutLabInput = {
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
    user: UserCreateNestedOneWithoutFlowchartsInput
  }

  export type FlowchartUncheckedCreateWithoutLabInput = {
    flowchartId?: number
    userId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartCreateOrConnectWithoutLabInput = {
    where: FlowchartWhereUniqueInput
    create: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput>
  }

  export type FlowchartCreateManyLabInputEnvelope = {
    data: FlowchartCreateManyLabInput | FlowchartCreateManyLabInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutLabsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLabsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLabsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLabsInput, UserUncheckedCreateWithoutLabsInput>
  }

  export type SubmissionCreateWithoutLabInput = {
    status: string
    createAt?: Date | string
    testcase: TestcaseCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutLabInput = {
    userId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutLabInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput>
  }

  export type SubmissionCreateManyLabInputEnvelope = {
    data: SubmissionCreateManyLabInput | SubmissionCreateManyLabInput[]
    skipDuplicates?: boolean
  }

  export type TestcaseCreateWithoutLabInput = {
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
    submissions?: SubmissionCreateNestedManyWithoutTestcaseInput
  }

  export type TestcaseUncheckedCreateWithoutLabInput = {
    testcaseId?: number
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
    submissions?: SubmissionUncheckedCreateNestedManyWithoutTestcaseInput
  }

  export type TestcaseCreateOrConnectWithoutLabInput = {
    where: TestcaseWhereUniqueInput
    create: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput>
  }

  export type TestcaseCreateManyLabInputEnvelope = {
    data: TestcaseCreateManyLabInput | TestcaseCreateManyLabInput[]
    skipDuplicates?: boolean
  }

  export type ClassLabsUpsertWithWhereUniqueWithoutLabInput = {
    where: ClassLabsWhereUniqueInput
    update: XOR<ClassLabsUpdateWithoutLabInput, ClassLabsUncheckedUpdateWithoutLabInput>
    create: XOR<ClassLabsCreateWithoutLabInput, ClassLabsUncheckedCreateWithoutLabInput>
  }

  export type ClassLabsUpdateWithWhereUniqueWithoutLabInput = {
    where: ClassLabsWhereUniqueInput
    data: XOR<ClassLabsUpdateWithoutLabInput, ClassLabsUncheckedUpdateWithoutLabInput>
  }

  export type ClassLabsUpdateManyWithWhereWithoutLabInput = {
    where: ClassLabsScalarWhereInput
    data: XOR<ClassLabsUpdateManyMutationInput, ClassLabsUncheckedUpdateManyWithoutLabInput>
  }

  export type FlowchartUpsertWithWhereUniqueWithoutLabInput = {
    where: FlowchartWhereUniqueInput
    update: XOR<FlowchartUpdateWithoutLabInput, FlowchartUncheckedUpdateWithoutLabInput>
    create: XOR<FlowchartCreateWithoutLabInput, FlowchartUncheckedCreateWithoutLabInput>
  }

  export type FlowchartUpdateWithWhereUniqueWithoutLabInput = {
    where: FlowchartWhereUniqueInput
    data: XOR<FlowchartUpdateWithoutLabInput, FlowchartUncheckedUpdateWithoutLabInput>
  }

  export type FlowchartUpdateManyWithWhereWithoutLabInput = {
    where: FlowchartScalarWhereInput
    data: XOR<FlowchartUpdateManyMutationInput, FlowchartUncheckedUpdateManyWithoutLabInput>
  }

  export type UserUpsertWithoutLabsInput = {
    update: XOR<UserUpdateWithoutLabsInput, UserUncheckedUpdateWithoutLabsInput>
    create: XOR<UserCreateWithoutLabsInput, UserUncheckedCreateWithoutLabsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLabsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLabsInput, UserUncheckedUpdateWithoutLabsInput>
  }

  export type UserUpdateWithoutLabsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLabsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubmissionUpsertWithWhereUniqueWithoutLabInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutLabInput, SubmissionUncheckedUpdateWithoutLabInput>
    create: XOR<SubmissionCreateWithoutLabInput, SubmissionUncheckedCreateWithoutLabInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutLabInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutLabInput, SubmissionUncheckedUpdateWithoutLabInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutLabInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutLabInput>
  }

  export type TestcaseUpsertWithWhereUniqueWithoutLabInput = {
    where: TestcaseWhereUniqueInput
    update: XOR<TestcaseUpdateWithoutLabInput, TestcaseUncheckedUpdateWithoutLabInput>
    create: XOR<TestcaseCreateWithoutLabInput, TestcaseUncheckedCreateWithoutLabInput>
  }

  export type TestcaseUpdateWithWhereUniqueWithoutLabInput = {
    where: TestcaseWhereUniqueInput
    data: XOR<TestcaseUpdateWithoutLabInput, TestcaseUncheckedUpdateWithoutLabInput>
  }

  export type TestcaseUpdateManyWithWhereWithoutLabInput = {
    where: TestcaseScalarWhereInput
    data: XOR<TestcaseUpdateManyMutationInput, TestcaseUncheckedUpdateManyWithoutLabInput>
  }

  export type TestcaseScalarWhereInput = {
    AND?: TestcaseScalarWhereInput | TestcaseScalarWhereInput[]
    OR?: TestcaseScalarWhereInput[]
    NOT?: TestcaseScalarWhereInput | TestcaseScalarWhereInput[]
    testcaseId?: IntFilter<"Testcase"> | number
    labId?: IntFilter<"Testcase"> | number
    inputVal?: StringFilter<"Testcase"> | string
    outputVal?: StringFilter<"Testcase"> | string
    inHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    outHiddenVal?: StringNullableFilter<"Testcase"> | string | null
    score?: IntFilter<"Testcase"> | number
  }

  export type ClassCreateWithoutClassLabsInput = {
    classname: string
    createAt?: Date | string
    packageClasses?: PackageClassCreateNestedManyWithoutClassInput
    userClasses?: UserClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutClassLabsInput = {
    classId?: number
    classname: string
    createAt?: Date | string
    packageClasses?: PackageClassUncheckedCreateNestedManyWithoutClassInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutClassLabsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutClassLabsInput, ClassUncheckedCreateWithoutClassLabsInput>
  }

  export type LabCreateWithoutClassLabsInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    flowcharts?: FlowchartCreateNestedManyWithoutLabInput
    owner: UserCreateNestedOneWithoutLabsInput
    submissions?: SubmissionCreateNestedManyWithoutLabInput
    testcases?: TestcaseCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateWithoutClassLabsInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutLabInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabInput
    testcases?: TestcaseUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabCreateOrConnectWithoutClassLabsInput = {
    where: LabWhereUniqueInput
    create: XOR<LabCreateWithoutClassLabsInput, LabUncheckedCreateWithoutClassLabsInput>
  }

  export type ClassUpsertWithoutClassLabsInput = {
    update: XOR<ClassUpdateWithoutClassLabsInput, ClassUncheckedUpdateWithoutClassLabsInput>
    create: XOR<ClassCreateWithoutClassLabsInput, ClassUncheckedCreateWithoutClassLabsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutClassLabsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutClassLabsInput, ClassUncheckedUpdateWithoutClassLabsInput>
  }

  export type ClassUpdateWithoutClassLabsInput = {
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageClasses?: PackageClassUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutClassLabsInput = {
    classId?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    packageClasses?: PackageClassUncheckedUpdateManyWithoutClassNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type LabUpsertWithoutClassLabsInput = {
    update: XOR<LabUpdateWithoutClassLabsInput, LabUncheckedUpdateWithoutClassLabsInput>
    create: XOR<LabCreateWithoutClassLabsInput, LabUncheckedCreateWithoutClassLabsInput>
    where?: LabWhereInput
  }

  export type LabUpdateToOneWithWhereWithoutClassLabsInput = {
    where?: LabWhereInput
    data: XOR<LabUpdateWithoutClassLabsInput, LabUncheckedUpdateWithoutClassLabsInput>
  }

  export type LabUpdateWithoutClassLabsInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    flowcharts?: FlowchartUpdateManyWithoutLabNestedInput
    owner?: UserUpdateOneRequiredWithoutLabsNestedInput
    submissions?: SubmissionUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateWithoutClassLabsInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    flowcharts?: FlowchartUncheckedUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUncheckedUpdateManyWithoutLabNestedInput
  }

  export type SubmissionCreateWithoutTestcaseInput = {
    status: string
    createAt?: Date | string
    lab: LabCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutTestcaseInput = {
    userId: number
    labId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionCreateOrConnectWithoutTestcaseInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput>
  }

  export type SubmissionCreateManyTestcaseInputEnvelope = {
    data: SubmissionCreateManyTestcaseInput | SubmissionCreateManyTestcaseInput[]
    skipDuplicates?: boolean
  }

  export type LabCreateWithoutTestcasesInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartCreateNestedManyWithoutLabInput
    owner: UserCreateNestedOneWithoutLabsInput
    submissions?: SubmissionCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateWithoutTestcasesInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutLabInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabCreateOrConnectWithoutTestcasesInput = {
    where: LabWhereUniqueInput
    create: XOR<LabCreateWithoutTestcasesInput, LabUncheckedCreateWithoutTestcasesInput>
  }

  export type SubmissionUpsertWithWhereUniqueWithoutTestcaseInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutTestcaseInput, SubmissionUncheckedUpdateWithoutTestcaseInput>
    create: XOR<SubmissionCreateWithoutTestcaseInput, SubmissionUncheckedCreateWithoutTestcaseInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutTestcaseInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutTestcaseInput, SubmissionUncheckedUpdateWithoutTestcaseInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutTestcaseInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutTestcaseInput>
  }

  export type LabUpsertWithoutTestcasesInput = {
    update: XOR<LabUpdateWithoutTestcasesInput, LabUncheckedUpdateWithoutTestcasesInput>
    create: XOR<LabCreateWithoutTestcasesInput, LabUncheckedCreateWithoutTestcasesInput>
    where?: LabWhereInput
  }

  export type LabUpdateToOneWithWhereWithoutTestcasesInput = {
    where?: LabWhereInput
    data: XOR<LabUpdateWithoutTestcasesInput, LabUncheckedUpdateWithoutTestcasesInput>
  }

  export type LabUpdateWithoutTestcasesInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUpdateManyWithoutLabNestedInput
    owner?: UserUpdateOneRequiredWithoutLabsNestedInput
    submissions?: SubmissionUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateWithoutTestcasesInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabNestedInput
  }

  export type LabCreateWithoutSubmissionsInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartCreateNestedManyWithoutLabInput
    owner: UserCreateNestedOneWithoutLabsInput
    testcases?: TestcaseCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateWithoutSubmissionsInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutLabInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutLabInput
    testcases?: TestcaseUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabCreateOrConnectWithoutSubmissionsInput = {
    where: LabWhereUniqueInput
    create: XOR<LabCreateWithoutSubmissionsInput, LabUncheckedCreateWithoutSubmissionsInput>
  }

  export type TestcaseCreateWithoutSubmissionsInput = {
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
    lab: LabCreateNestedOneWithoutTestcasesInput
  }

  export type TestcaseUncheckedCreateWithoutSubmissionsInput = {
    testcaseId?: number
    labId: number
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
  }

  export type TestcaseCreateOrConnectWithoutSubmissionsInput = {
    where: TestcaseWhereUniqueInput
    create: XOR<TestcaseCreateWithoutSubmissionsInput, TestcaseUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutSubmissionsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubmissionsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
  }

  export type LabUpsertWithoutSubmissionsInput = {
    update: XOR<LabUpdateWithoutSubmissionsInput, LabUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<LabCreateWithoutSubmissionsInput, LabUncheckedCreateWithoutSubmissionsInput>
    where?: LabWhereInput
  }

  export type LabUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: LabWhereInput
    data: XOR<LabUpdateWithoutSubmissionsInput, LabUncheckedUpdateWithoutSubmissionsInput>
  }

  export type LabUpdateWithoutSubmissionsInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUpdateManyWithoutLabNestedInput
    owner?: UserUpdateOneRequiredWithoutLabsNestedInput
    testcases?: TestcaseUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateWithoutSubmissionsInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUncheckedUpdateManyWithoutLabNestedInput
  }

  export type TestcaseUpsertWithoutSubmissionsInput = {
    update: XOR<TestcaseUpdateWithoutSubmissionsInput, TestcaseUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<TestcaseCreateWithoutSubmissionsInput, TestcaseUncheckedCreateWithoutSubmissionsInput>
    where?: TestcaseWhereInput
  }

  export type TestcaseUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: TestcaseWhereInput
    data: XOR<TestcaseUpdateWithoutSubmissionsInput, TestcaseUncheckedUpdateWithoutSubmissionsInput>
  }

  export type TestcaseUpdateWithoutSubmissionsInput = {
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    lab?: LabUpdateOneRequiredWithoutTestcasesNestedInput
  }

  export type TestcaseUncheckedUpdateWithoutSubmissionsInput = {
    testcaseId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpsertWithoutSubmissionsInput = {
    update: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateWithoutSubmissionsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ClassCreateWithoutUserClassesInput = {
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsCreateNestedManyWithoutClassInput
    packageClasses?: PackageClassCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutUserClassesInput = {
    classId?: number
    classname: string
    createAt?: Date | string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutClassInput
    packageClasses?: PackageClassUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutUserClassesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutUserClassesInput, ClassUncheckedCreateWithoutUserClassesInput>
  }

  export type RoleCreateWithoutUserClassesInput = {
    roleName: string
  }

  export type RoleUncheckedCreateWithoutUserClassesInput = {
    roleId?: number
    roleName: string
  }

  export type RoleCreateOrConnectWithoutUserClassesInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUserClassesInput, RoleUncheckedCreateWithoutUserClassesInput>
  }

  export type UserCreateWithoutUserClassesInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUserClassesInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUserClassesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserClassesInput, UserUncheckedCreateWithoutUserClassesInput>
  }

  export type ClassUpsertWithoutUserClassesInput = {
    update: XOR<ClassUpdateWithoutUserClassesInput, ClassUncheckedUpdateWithoutUserClassesInput>
    create: XOR<ClassCreateWithoutUserClassesInput, ClassUncheckedCreateWithoutUserClassesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutUserClassesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutUserClassesInput, ClassUncheckedUpdateWithoutUserClassesInput>
  }

  export type ClassUpdateWithoutUserClassesInput = {
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUpdateManyWithoutClassNestedInput
    packageClasses?: PackageClassUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutUserClassesInput = {
    classId?: IntFieldUpdateOperationsInput | number
    classname?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutClassNestedInput
    packageClasses?: PackageClassUncheckedUpdateManyWithoutClassNestedInput
  }

  export type RoleUpsertWithoutUserClassesInput = {
    update: XOR<RoleUpdateWithoutUserClassesInput, RoleUncheckedUpdateWithoutUserClassesInput>
    create: XOR<RoleCreateWithoutUserClassesInput, RoleUncheckedCreateWithoutUserClassesInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUserClassesInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUserClassesInput, RoleUncheckedUpdateWithoutUserClassesInput>
  }

  export type RoleUpdateWithoutUserClassesInput = {
    roleName?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUserClassesInput = {
    roleId?: IntFieldUpdateOperationsInput | number
    roleName?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutUserClassesInput = {
    update: XOR<UserUpdateWithoutUserClassesInput, UserUncheckedUpdateWithoutUserClassesInput>
    create: XOR<UserCreateWithoutUserClassesInput, UserUncheckedCreateWithoutUserClassesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserClassesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserClassesInput, UserUncheckedUpdateWithoutUserClassesInput>
  }

  export type UserUpdateWithoutUserClassesInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserClassCreateWithoutRoleInput = {
    class: ClassCreateNestedOneWithoutUserClassesInput
    user: UserCreateNestedOneWithoutUserClassesInput
  }

  export type UserClassUncheckedCreateWithoutRoleInput = {
    userId: number
    classId: number
  }

  export type UserClassCreateOrConnectWithoutRoleInput = {
    where: UserClassWhereUniqueInput
    create: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput>
  }

  export type UserClassCreateManyRoleInputEnvelope = {
    data: UserClassCreateManyRoleInput | UserClassCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserClassUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserClassWhereUniqueInput
    update: XOR<UserClassUpdateWithoutRoleInput, UserClassUncheckedUpdateWithoutRoleInput>
    create: XOR<UserClassCreateWithoutRoleInput, UserClassUncheckedCreateWithoutRoleInput>
  }

  export type UserClassUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserClassWhereUniqueInput
    data: XOR<UserClassUpdateWithoutRoleInput, UserClassUncheckedUpdateWithoutRoleInput>
  }

  export type UserClassUpdateManyWithWhereWithoutRoleInput = {
    where: UserClassScalarWhereInput
    data: XOR<UserClassUpdateManyMutationInput, UserClassUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserCreateWithoutNotificationsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    flowcharts?: FlowchartUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LabCreateWithoutFlowchartsInput = {
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsCreateNestedManyWithoutLabInput
    owner: UserCreateNestedOneWithoutLabsInput
    submissions?: SubmissionCreateNestedManyWithoutLabInput
    testcases?: TestcaseCreateNestedManyWithoutLabInput
  }

  export type LabUncheckedCreateWithoutFlowchartsInput = {
    labId?: number
    ownerUserId: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
    classLabs?: ClassLabsUncheckedCreateNestedManyWithoutLabInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutLabInput
    testcases?: TestcaseUncheckedCreateNestedManyWithoutLabInput
  }

  export type LabCreateOrConnectWithoutFlowchartsInput = {
    where: LabWhereUniqueInput
    create: XOR<LabCreateWithoutFlowchartsInput, LabUncheckedCreateWithoutFlowchartsInput>
  }

  export type UserCreateWithoutFlowchartsInput = {
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    labs?: LabCreateNestedManyWithoutOwnerInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
    userClasses?: UserClassCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFlowchartsInput = {
    id?: number
    fname?: string | null
    lname?: string | null
    name?: string | null
    email: string
    createdAt?: Date | string
    image?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    labs?: LabUncheckedCreateNestedManyWithoutOwnerInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
    userClasses?: UserClassUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFlowchartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFlowchartsInput, UserUncheckedCreateWithoutFlowchartsInput>
  }

  export type LabUpsertWithoutFlowchartsInput = {
    update: XOR<LabUpdateWithoutFlowchartsInput, LabUncheckedUpdateWithoutFlowchartsInput>
    create: XOR<LabCreateWithoutFlowchartsInput, LabUncheckedCreateWithoutFlowchartsInput>
    where?: LabWhereInput
  }

  export type LabUpdateToOneWithWhereWithoutFlowchartsInput = {
    where?: LabWhereInput
    data: XOR<LabUpdateWithoutFlowchartsInput, LabUncheckedUpdateWithoutFlowchartsInput>
  }

  export type LabUpdateWithoutFlowchartsInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUpdateManyWithoutLabNestedInput
    owner?: UserUpdateOneRequiredWithoutLabsNestedInput
    submissions?: SubmissionUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateWithoutFlowchartsInput = {
    labId?: IntFieldUpdateOperationsInput | number
    ownerUserId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUncheckedUpdateManyWithoutLabNestedInput
  }

  export type UserUpsertWithoutFlowchartsInput = {
    update: XOR<UserUpdateWithoutFlowchartsInput, UserUncheckedUpdateWithoutFlowchartsInput>
    create: XOR<UserCreateWithoutFlowchartsInput, UserUncheckedCreateWithoutFlowchartsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFlowchartsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFlowchartsInput, UserUncheckedUpdateWithoutFlowchartsInput>
  }

  export type UserUpdateWithoutFlowchartsInput = {
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    labs?: LabUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFlowchartsInput = {
    id?: IntFieldUpdateOperationsInput | number
    fname?: NullableStringFieldUpdateOperationsInput | string | null
    lname?: NullableStringFieldUpdateOperationsInput | string | null
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    labs?: LabUncheckedUpdateManyWithoutOwnerNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
    userClasses?: UserClassUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: number
    type: string
    provider: string
    providerAccountId: string
    access_token?: string | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    expires_at?: number | null
  }

  export type FlowchartCreateManyUserInput = {
    flowchartId?: number
    labId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type LabCreateManyOwnerInput = {
    labId?: number
    labname: string
    problemSolving: string
    inSymVal?: number
    outSymVal?: number
    declareSymVal?: number
    assignSymVal?: number
    ifSymVal?: number
    forSymVal?: number
    whileSymVal?: number
    createAt?: Date | string
    dueDate?: Date | string | null
    status?: string
  }

  export type NotificationCreateManyUserInput = {
    notiId?: number
    message: string
    createAt?: Date | string
  }

  export type SessionCreateManyUserInput = {
    id?: number
    sessionToken: string
    expires: Date | string
  }

  export type SubmissionCreateManyUserInput = {
    labId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type UserClassCreateManyUserInput = {
    classId: number
    roleId: number
  }

  export type AccountUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FlowchartUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
    lab?: LabUpdateOneRequiredWithoutFlowchartsNestedInput
  }

  export type FlowchartUncheckedUpdateWithoutUserInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartUncheckedUpdateManyWithoutUserInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type LabUpdateWithoutOwnerInput = {
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateWithoutOwnerInput = {
    labId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
    classLabs?: ClassLabsUncheckedUpdateManyWithoutLabNestedInput
    flowcharts?: FlowchartUncheckedUpdateManyWithoutLabNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutLabNestedInput
    testcases?: TestcaseUncheckedUpdateManyWithoutLabNestedInput
  }

  export type LabUncheckedUpdateManyWithoutOwnerInput = {
    labId?: IntFieldUpdateOperationsInput | number
    labname?: StringFieldUpdateOperationsInput | string
    problemSolving?: StringFieldUpdateOperationsInput | string
    inSymVal?: IntFieldUpdateOperationsInput | number
    outSymVal?: IntFieldUpdateOperationsInput | number
    declareSymVal?: IntFieldUpdateOperationsInput | number
    assignSymVal?: IntFieldUpdateOperationsInput | number
    ifSymVal?: IntFieldUpdateOperationsInput | number
    forSymVal?: IntFieldUpdateOperationsInput | number
    whileSymVal?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutUserInput = {
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    notiId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    notiId?: IntFieldUpdateOperationsInput | number
    message?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lab?: LabUpdateOneRequiredWithoutSubmissionsNestedInput
    testcase?: TestcaseUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutUserInput = {
    labId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutUserInput = {
    labId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClassUpdateWithoutUserInput = {
    class?: ClassUpdateOneRequiredWithoutUserClassesNestedInput
    role?: RoleUpdateOneRequiredWithoutUserClassesNestedInput
  }

  export type UserClassUncheckedUpdateWithoutUserInput = {
    classId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserClassUncheckedUpdateManyWithoutUserInput = {
    classId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type PackageClassCreateManyPackageInput = {
    packageClassId?: number
    classId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type PackageClassUpdateWithoutPackageInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    class?: ClassUpdateOneRequiredWithoutPackageClassesNestedInput
  }

  export type PackageClassUncheckedUpdateWithoutPackageInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageClassUncheckedUpdateManyWithoutPackageInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ClassLabsCreateManyClassInput = {
    labId: number
  }

  export type PackageClassCreateManyClassInput = {
    packageClassId?: number
    packageId: number
    purchasedAt: Date | string
    startDate: Date | string
    endDate: Date | string
  }

  export type UserClassCreateManyClassInput = {
    userId: number
    roleId: number
  }

  export type ClassLabsUpdateWithoutClassInput = {
    lab?: LabUpdateOneRequiredWithoutClassLabsNestedInput
  }

  export type ClassLabsUncheckedUpdateWithoutClassInput = {
    labId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassLabsUncheckedUpdateManyWithoutClassInput = {
    labId?: IntFieldUpdateOperationsInput | number
  }

  export type PackageClassUpdateWithoutClassInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    package?: PackageUpdateOneRequiredWithoutPackageClassesNestedInput
  }

  export type PackageClassUncheckedUpdateWithoutClassInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PackageClassUncheckedUpdateManyWithoutClassInput = {
    packageClassId?: IntFieldUpdateOperationsInput | number
    packageId?: IntFieldUpdateOperationsInput | number
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClassUpdateWithoutClassInput = {
    role?: RoleUpdateOneRequiredWithoutUserClassesNestedInput
    user?: UserUpdateOneRequiredWithoutUserClassesNestedInput
  }

  export type UserClassUncheckedUpdateWithoutClassInput = {
    userId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type UserClassUncheckedUpdateManyWithoutClassInput = {
    userId?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassLabsCreateManyLabInput = {
    classId: number
  }

  export type FlowchartCreateManyLabInput = {
    flowchartId?: number
    userId: number
    createdAt?: Date | string
    content: JsonNullValueInput | InputJsonValue
  }

  export type SubmissionCreateManyLabInput = {
    userId: number
    testcaseId: number
    status: string
    createAt?: Date | string
  }

  export type TestcaseCreateManyLabInput = {
    testcaseId?: number
    inputVal: string
    outputVal: string
    inHiddenVal?: string | null
    outHiddenVal?: string | null
    score: number
  }

  export type ClassLabsUpdateWithoutLabInput = {
    class?: ClassUpdateOneRequiredWithoutClassLabsNestedInput
  }

  export type ClassLabsUncheckedUpdateWithoutLabInput = {
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassLabsUncheckedUpdateManyWithoutLabInput = {
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type FlowchartUpdateWithoutLabInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
    user?: UserUpdateOneRequiredWithoutFlowchartsNestedInput
  }

  export type FlowchartUncheckedUpdateWithoutLabInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type FlowchartUncheckedUpdateManyWithoutLabInput = {
    flowchartId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    content?: JsonNullValueInput | InputJsonValue
  }

  export type SubmissionUpdateWithoutLabInput = {
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    testcase?: TestcaseUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutLabInput = {
    userId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutLabInput = {
    userId?: IntFieldUpdateOperationsInput | number
    testcaseId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TestcaseUpdateWithoutLabInput = {
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    submissions?: SubmissionUpdateManyWithoutTestcaseNestedInput
  }

  export type TestcaseUncheckedUpdateWithoutLabInput = {
    testcaseId?: IntFieldUpdateOperationsInput | number
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
    submissions?: SubmissionUncheckedUpdateManyWithoutTestcaseNestedInput
  }

  export type TestcaseUncheckedUpdateManyWithoutLabInput = {
    testcaseId?: IntFieldUpdateOperationsInput | number
    inputVal?: StringFieldUpdateOperationsInput | string
    outputVal?: StringFieldUpdateOperationsInput | string
    inHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    outHiddenVal?: NullableStringFieldUpdateOperationsInput | string | null
    score?: IntFieldUpdateOperationsInput | number
  }

  export type SubmissionCreateManyTestcaseInput = {
    userId: number
    labId: number
    status: string
    createAt?: Date | string
  }

  export type SubmissionUpdateWithoutTestcaseInput = {
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lab?: LabUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutTestcaseInput = {
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyWithoutTestcaseInput = {
    userId?: IntFieldUpdateOperationsInput | number
    labId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserClassCreateManyRoleInput = {
    userId: number
    classId: number
  }

  export type UserClassUpdateWithoutRoleInput = {
    class?: ClassUpdateOneRequiredWithoutUserClassesNestedInput
    user?: UserUpdateOneRequiredWithoutUserClassesNestedInput
  }

  export type UserClassUncheckedUpdateWithoutRoleInput = {
    userId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type UserClassUncheckedUpdateManyWithoutRoleInput = {
    userId?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}