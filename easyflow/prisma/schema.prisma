datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ------------------ USER ------------------
model User {
  id        Int      @id @default(autoincrement()) // ใช้อันนี้เท่านั้น
  fname     String?
  lname     String?
  name      String?  // fullname (NextAuth ใช้)
  image     String?
  email     String   @unique
  createdAt DateTime @default(now())

  accounts      Account[]
  sessions      Session[]
  labs          Lab[]          @relation("OwnerLabs")
  submissions   Submission[]
  flowcharts    Flowchart[]
  userClasses   UserClass[]
  notifications Notification[]
}

// ------------------ ACCOUNT ------------------
model Account {
  id                Int    @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  token_type        String?
  scope             String?
  id_token          String?
  expires_at        Int?

  user User @relation(fields: [userId], references: [id])
  @@unique([provider, providerAccountId])
}

// ------------------ SESSION ------------------
model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

// ------------------ PACKAGE ------------------
model Package {
  packageId   Int     @id @default(autoincrement())
  packageName String
  duration    Int
  seats       Int
  price       Decimal

  packageClasses PackageClass[]
}

// ------------------ CLASS ------------------
model Class {
  classId   Int      @id @default(autoincrement())
  classname String
  createAt  DateTime @default(now())

  packageClasses PackageClass[]
  classLabs      ClassLabs[]
  userClasses    UserClass[]
}

// ------------------ PACKAGECLASS ------------------
model PackageClass {
  packageClassId Int      @id @default(autoincrement())
  classId        Int
  packageId      Int
  purchasedAt    DateTime
  startDate      DateTime
  endDate        DateTime

  class   Class   @relation(fields: [classId], references: [classId])
  package Package @relation(fields: [packageId], references: [packageId])
}

// ------------------ LAB ------------------
model Lab {
  labId          Int       @id @default(autoincrement())
  ownerUserId    Int
  labname        String
  problemSolving String
  inSymVal       Int       @default(0)
  outSymVal      Int       @default(0)
  declareSymVal  Int       @default(0)
  assignSymVal   Int       @default(0)
  ifSymVal       Int       @default(0)
  forSymVal      Int       @default(0)
  whileSymVal    Int       @default(0)
  createAt       DateTime  @default(now())
  dueDate        DateTime?
  status         String    @default("active")

  owner       User         @relation("OwnerLabs", fields: [ownerUserId], references: [id])
  classLabs   ClassLabs[]
  testcases   Testcase[]
  submissions Submission[]
  flowcharts  Flowchart[]
}

// ------------------ CLASSLABS (Bridge) ------------------
model ClassLabs {
  classId Int
  labId   Int

  class Class @relation(fields: [classId], references: [classId])
  lab   Lab   @relation(fields: [labId], references: [labId])

  @@id([classId, labId])
}

// ------------------ TESTCASE ------------------
model Testcase {
  testcaseId   Int     @id @default(autoincrement())
  labId        Int
  inputVal     String
  outputVal    String
  inHiddenVal  String?
  outHiddenVal String?
  score        Int

  lab         Lab          @relation(fields: [labId], references: [labId])
  submissions Submission[]
}

// ------------------ SUBMISSION ------------------
model Submission {
  userId     Int
  labId      Int
  testcaseId Int
  status     String
  createAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  lab      Lab      @relation(fields: [labId], references: [labId])
  testcase Testcase @relation(fields: [testcaseId], references: [testcaseId])

  @@id([userId, labId, testcaseId])
}

// ------------------ USERCLASS (Bridge) ------------------
model UserClass {
  userId  Int
  classId Int
  roleId  Int

  user  User  @relation(fields: [userId], references: [id])
  class Class @relation(fields: [classId], references: [classId])
  role  Role  @relation(fields: [roleId], references: [roleId])

  @@id([userId, classId])
}

// ------------------ ROLE ------------------
model Role {
  roleId   Int    @id @default(autoincrement())
  roleName String

  userClasses UserClass[]
}

// ------------------ NOTIFICATION ------------------
model Notification {
  notiId   Int      @id @default(autoincrement())
  userId   Int
  message  String
  createAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

// ------------------ FLOWCHART ------------------
model Flowchart {
  flowchartId Int      @id @default(autoincrement())
  userId      Int
  labId       Int
  createdAt   DateTime @default(now())
  content     Json

  user User @relation(fields: [userId], references: [id])
  lab  Lab  @relation(fields: [labId], references: [labId])
}
